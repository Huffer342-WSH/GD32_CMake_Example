
D:/Project/GD32_Project/GD32_CMake_Example/bin/Debug/GD32_CMake_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004264  08000150  08000150  00010150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080043b8  080043b8  000143b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000a8  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000260  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049d0  080049d0  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  080049dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000470  08004e4c  00020470  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  2000060c  08004e4c  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002158  00000000  00000000  000204a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00009851  00000000  00000000  000225f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b1c  00000000  00000000  0002be49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002d968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c08  00000000  00000000  0002e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f58  00000000  00000000  0002ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000034fe  00000000  00000000  00035dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  000392d6  2**0
                  CONTENTS, READONLY
 20 .debug_loc    0000803e  00000000  00000000  0003931f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00041360  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0004139c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	; (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	20000470 	.word	0x20000470
 800016c:	00000000 	.word	0x00000000
 8000170:	0800439c 	.word	0x0800439c

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	; (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	; (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000474 	.word	0x20000474
 800018c:	0800439c 	.word	0x0800439c

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f001 b8de 	b.w	8001ca0 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <selfrel_offset31>:
 8000dcc:	6803      	ldr	r3, [r0, #0]
 8000dce:	005a      	lsls	r2, r3, #1
 8000dd0:	bf4c      	ite	mi
 8000dd2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000dd6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000dda:	4418      	add	r0, r3
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <search_EIT_table>:
 8000de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000de4:	b329      	cbz	r1, 8000e32 <search_EIT_table+0x52>
 8000de6:	1e4f      	subs	r7, r1, #1
 8000de8:	4604      	mov	r4, r0
 8000dea:	4615      	mov	r5, r2
 8000dec:	463e      	mov	r6, r7
 8000dee:	f04f 0800 	mov.w	r8, #0
 8000df2:	eb08 0106 	add.w	r1, r8, r6
 8000df6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000dfa:	1049      	asrs	r1, r1, #1
 8000dfc:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000e00:	4648      	mov	r0, r9
 8000e02:	f7ff ffe3 	bl	8000dcc <selfrel_offset31>
 8000e06:	4603      	mov	r3, r0
 8000e08:	00c8      	lsls	r0, r1, #3
 8000e0a:	3008      	adds	r0, #8
 8000e0c:	428f      	cmp	r7, r1
 8000e0e:	4420      	add	r0, r4
 8000e10:	d009      	beq.n	8000e26 <search_EIT_table+0x46>
 8000e12:	42ab      	cmp	r3, r5
 8000e14:	d809      	bhi.n	8000e2a <search_EIT_table+0x4a>
 8000e16:	f7ff ffd9 	bl	8000dcc <selfrel_offset31>
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	42a8      	cmp	r0, r5
 8000e1e:	d20a      	bcs.n	8000e36 <search_EIT_table+0x56>
 8000e20:	f101 0801 	add.w	r8, r1, #1
 8000e24:	e7e5      	b.n	8000df2 <search_EIT_table+0x12>
 8000e26:	42ab      	cmp	r3, r5
 8000e28:	d905      	bls.n	8000e36 <search_EIT_table+0x56>
 8000e2a:	4588      	cmp	r8, r1
 8000e2c:	d001      	beq.n	8000e32 <search_EIT_table+0x52>
 8000e2e:	1e4e      	subs	r6, r1, #1
 8000e30:	e7df      	b.n	8000df2 <search_EIT_table+0x12>
 8000e32:	f04f 0900 	mov.w	r9, #0
 8000e36:	4648      	mov	r0, r9
 8000e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e3c <__gnu_unwind_get_pr_addr>:
 8000e3c:	2801      	cmp	r0, #1
 8000e3e:	d007      	beq.n	8000e50 <__gnu_unwind_get_pr_addr+0x14>
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d007      	beq.n	8000e54 <__gnu_unwind_get_pr_addr+0x18>
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__gnu_unwind_get_pr_addr+0x1c>)
 8000e46:	2800      	cmp	r0, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	4618      	moveq	r0, r3
 8000e4c:	2000      	movne	r0, #0
 8000e4e:	4770      	bx	lr
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <__gnu_unwind_get_pr_addr+0x20>)
 8000e52:	4770      	bx	lr
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <__gnu_unwind_get_pr_addr+0x24>)
 8000e56:	4770      	bx	lr
 8000e58:	08001515 	.word	0x08001515
 8000e5c:	08001519 	.word	0x08001519
 8000e60:	0800151d 	.word	0x0800151d

08000e64 <get_eit_entry>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <get_eit_entry+0x90>)
 8000e68:	b083      	sub	sp, #12
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	1e8d      	subs	r5, r1, #2
 8000e6e:	b33b      	cbz	r3, 8000ec0 <get_eit_entry+0x5c>
 8000e70:	a901      	add	r1, sp, #4
 8000e72:	4628      	mov	r0, r5
 8000e74:	f3af 8000 	nop.w
 8000e78:	b1e8      	cbz	r0, 8000eb6 <get_eit_entry+0x52>
 8000e7a:	9901      	ldr	r1, [sp, #4]
 8000e7c:	462a      	mov	r2, r5
 8000e7e:	f7ff ffaf 	bl	8000de0 <search_EIT_table>
 8000e82:	4601      	mov	r1, r0
 8000e84:	b1b8      	cbz	r0, 8000eb6 <get_eit_entry+0x52>
 8000e86:	f7ff ffa1 	bl	8000dcc <selfrel_offset31>
 8000e8a:	684b      	ldr	r3, [r1, #4]
 8000e8c:	64a0      	str	r0, [r4, #72]	; 0x48
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d02c      	beq.n	8000eec <get_eit_entry+0x88>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f101 0004 	add.w	r0, r1, #4
 8000e98:	db24      	blt.n	8000ee4 <get_eit_entry+0x80>
 8000e9a:	f7ff ff97 	bl	8000dcc <selfrel_offset31>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000ea4:	6803      	ldr	r3, [r0, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db11      	blt.n	8000ece <get_eit_entry+0x6a>
 8000eaa:	f7ff ff8f 	bl	8000dcc <selfrel_offset31>
 8000eae:	6120      	str	r0, [r4, #16]
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	b003      	add	sp, #12
 8000eb4:	bd30      	pop	{r4, r5, pc}
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2009      	movs	r0, #9
 8000eba:	6123      	str	r3, [r4, #16]
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd30      	pop	{r4, r5, pc}
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <get_eit_entry+0x94>)
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <get_eit_entry+0x98>)
 8000ec4:	1ac9      	subs	r1, r1, r3
 8000ec6:	10c9      	asrs	r1, r1, #3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	9101      	str	r1, [sp, #4]
 8000ecc:	e7d6      	b.n	8000e7c <get_eit_entry+0x18>
 8000ece:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000ed2:	f7ff ffb3 	bl	8000e3c <__gnu_unwind_get_pr_addr>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	6120      	str	r0, [r4, #16]
 8000eda:	bf14      	ite	ne
 8000edc:	2000      	movne	r0, #0
 8000ede:	2009      	moveq	r0, #9
 8000ee0:	b003      	add	sp, #12
 8000ee2:	bd30      	pop	{r4, r5, pc}
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000eea:	e7db      	b.n	8000ea4 <get_eit_entry+0x40>
 8000eec:	2300      	movs	r3, #0
 8000eee:	6123      	str	r3, [r4, #16]
 8000ef0:	2005      	movs	r0, #5
 8000ef2:	e7de      	b.n	8000eb2 <get_eit_entry+0x4e>
 8000ef4:	00000000 	.word	0x00000000
 8000ef8:	08004770 	.word	0x08004770
 8000efc:	080049d0 	.word	0x080049d0

08000f00 <restore_non_core_regs>:
 8000f00:	6803      	ldr	r3, [r0, #0]
 8000f02:	07da      	lsls	r2, r3, #31
 8000f04:	b510      	push	{r4, lr}
 8000f06:	4604      	mov	r4, r0
 8000f08:	d406      	bmi.n	8000f18 <restore_non_core_regs+0x18>
 8000f0a:	079b      	lsls	r3, r3, #30
 8000f0c:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000f10:	d509      	bpl.n	8000f26 <restore_non_core_regs+0x26>
 8000f12:	f000 fc5b 	bl	80017cc <__gnu_Unwind_Restore_VFP_D>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	0759      	lsls	r1, r3, #29
 8000f1a:	d509      	bpl.n	8000f30 <restore_non_core_regs+0x30>
 8000f1c:	071a      	lsls	r2, r3, #28
 8000f1e:	d50e      	bpl.n	8000f3e <restore_non_core_regs+0x3e>
 8000f20:	06db      	lsls	r3, r3, #27
 8000f22:	d513      	bpl.n	8000f4c <restore_non_core_regs+0x4c>
 8000f24:	bd10      	pop	{r4, pc}
 8000f26:	f000 fc49 	bl	80017bc <__gnu_Unwind_Restore_VFP>
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	0759      	lsls	r1, r3, #29
 8000f2e:	d4f5      	bmi.n	8000f1c <restore_non_core_regs+0x1c>
 8000f30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000f34:	f000 fc52 	bl	80017dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	071a      	lsls	r2, r3, #28
 8000f3c:	d4f0      	bmi.n	8000f20 <restore_non_core_regs+0x20>
 8000f3e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f42:	f000 fc53 	bl	80017ec <__gnu_Unwind_Restore_WMMXD>
 8000f46:	6823      	ldr	r3, [r4, #0]
 8000f48:	06db      	lsls	r3, r3, #27
 8000f4a:	d4eb      	bmi.n	8000f24 <restore_non_core_regs+0x24>
 8000f4c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f54:	f000 bc8e 	b.w	8001874 <__gnu_Unwind_Restore_WMMXC>

08000f58 <__gnu_unwind_24bit.constprop.0>:
 8000f58:	2009      	movs	r0, #9
 8000f5a:	4770      	bx	lr

08000f5c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	6800      	ldr	r0, [r0, #0]
 8000f60:	b100      	cbz	r0, 8000f64 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000f62:	4418      	add	r0, r3
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <_Unwind_DebugHook>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <unwind_phase2>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460e      	mov	r6, r1
 8000f72:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000f74:	4620      	mov	r0, r4
 8000f76:	f7ff ff75 	bl	8000e64 <get_eit_entry>
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	b988      	cbnz	r0, 8000fa2 <unwind_phase2+0x36>
 8000f7e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000f80:	6162      	str	r2, [r4, #20]
 8000f82:	6923      	ldr	r3, [r4, #16]
 8000f84:	4632      	mov	r2, r6
 8000f86:	4621      	mov	r1, r4
 8000f88:	2001      	movs	r0, #1
 8000f8a:	4798      	blx	r3
 8000f8c:	2808      	cmp	r0, #8
 8000f8e:	d0f0      	beq.n	8000f72 <unwind_phase2+0x6>
 8000f90:	2807      	cmp	r0, #7
 8000f92:	d106      	bne.n	8000fa2 <unwind_phase2+0x36>
 8000f94:	4628      	mov	r0, r5
 8000f96:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000f98:	f7ff ffe6 	bl	8000f68 <_Unwind_DebugHook>
 8000f9c:	1d30      	adds	r0, r6, #4
 8000f9e:	f000 fc01 	bl	80017a4 <__restore_core_regs>
 8000fa2:	f003 f969 	bl	8004278 <abort>
 8000fa6:	bf00      	nop

08000fa8 <unwind_phase2_forced>:
 8000fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fac:	1d0d      	adds	r5, r1, #4
 8000fae:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000fb2:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000fb6:	4607      	mov	r7, r0
 8000fb8:	4614      	mov	r4, r2
 8000fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fbc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000fc0:	f10d 0c0c 	add.w	ip, sp, #12
 8000fc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fd8:	ae02      	add	r6, sp, #8
 8000fda:	f04f 0e00 	mov.w	lr, #0
 8000fde:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000fe2:	f8c6 e000 	str.w	lr, [r6]
 8000fe6:	e020      	b.n	800102a <unwind_phase2_forced+0x82>
 8000fe8:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	a87a      	add	r0, sp, #488	; 0x1e8
 8000ff4:	f000 fe56 	bl	8001ca4 <memcpy>
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	4650      	mov	r0, sl
 8001000:	4798      	blx	r3
 8001002:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001004:	6473      	str	r3, [r6, #68]	; 0x44
 8001006:	4621      	mov	r1, r4
 8001008:	e9cd 6900 	strd	r6, r9, [sp]
 800100c:	4605      	mov	r5, r0
 800100e:	463b      	mov	r3, r7
 8001010:	463a      	mov	r2, r7
 8001012:	2001      	movs	r0, #1
 8001014:	47c0      	blx	r8
 8001016:	4604      	mov	r4, r0
 8001018:	b9e0      	cbnz	r0, 8001054 <unwind_phase2_forced+0xac>
 800101a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800101e:	a97a      	add	r1, sp, #488	; 0x1e8
 8001020:	4630      	mov	r0, r6
 8001022:	f000 fe3f 	bl	8001ca4 <memcpy>
 8001026:	2d08      	cmp	r5, #8
 8001028:	d11a      	bne.n	8001060 <unwind_phase2_forced+0xb8>
 800102a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800102c:	4638      	mov	r0, r7
 800102e:	f7ff ff19 	bl	8000e64 <get_eit_entry>
 8001032:	3409      	adds	r4, #9
 8001034:	fa5f fa84 	uxtb.w	sl, r4
 8001038:	4605      	mov	r5, r0
 800103a:	2800      	cmp	r0, #0
 800103c:	d0d4      	beq.n	8000fe8 <unwind_phase2_forced+0x40>
 800103e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001040:	6473      	str	r3, [r6, #68]	; 0x44
 8001042:	463a      	mov	r2, r7
 8001044:	e9cd 6900 	strd	r6, r9, [sp]
 8001048:	463b      	mov	r3, r7
 800104a:	f04a 0110 	orr.w	r1, sl, #16
 800104e:	2001      	movs	r0, #1
 8001050:	47c0      	blx	r8
 8001052:	b100      	cbz	r0, 8001056 <unwind_phase2_forced+0xae>
 8001054:	2509      	movs	r5, #9
 8001056:	4628      	mov	r0, r5
 8001058:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800105c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001060:	2d07      	cmp	r5, #7
 8001062:	d1f7      	bne.n	8001054 <unwind_phase2_forced+0xac>
 8001064:	4620      	mov	r0, r4
 8001066:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8001068:	f7ff ff7e 	bl	8000f68 <_Unwind_DebugHook>
 800106c:	a803      	add	r0, sp, #12
 800106e:	f000 fb99 	bl	80017a4 <__restore_core_regs>
 8001072:	bf00      	nop

08001074 <_Unwind_GetCFA>:
 8001074:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001076:	4770      	bx	lr

08001078 <__gnu_Unwind_RaiseException>:
 8001078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800107c:	640b      	str	r3, [r1, #64]	; 0x40
 800107e:	f101 0c04 	add.w	ip, r1, #4
 8001082:	460e      	mov	r6, r1
 8001084:	4605      	mov	r5, r0
 8001086:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800108a:	b0f9      	sub	sp, #484	; 0x1e4
 800108c:	ac01      	add	r4, sp, #4
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001096:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80010a0:	f04f 37ff 	mov.w	r7, #4294967295
 80010a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80010a8:	9700      	str	r7, [sp, #0]
 80010aa:	e006      	b.n	80010ba <__gnu_Unwind_RaiseException+0x42>
 80010ac:	692b      	ldr	r3, [r5, #16]
 80010ae:	466a      	mov	r2, sp
 80010b0:	4629      	mov	r1, r5
 80010b2:	4798      	blx	r3
 80010b4:	2808      	cmp	r0, #8
 80010b6:	4604      	mov	r4, r0
 80010b8:	d108      	bne.n	80010cc <__gnu_Unwind_RaiseException+0x54>
 80010ba:	9910      	ldr	r1, [sp, #64]	; 0x40
 80010bc:	4628      	mov	r0, r5
 80010be:	f7ff fed1 	bl	8000e64 <get_eit_entry>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d0f2      	beq.n	80010ac <__gnu_Unwind_RaiseException+0x34>
 80010c6:	2009      	movs	r0, #9
 80010c8:	b079      	add	sp, #484	; 0x1e4
 80010ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010cc:	4668      	mov	r0, sp
 80010ce:	f7ff ff17 	bl	8000f00 <restore_non_core_regs>
 80010d2:	2c06      	cmp	r4, #6
 80010d4:	d1f7      	bne.n	80010c6 <__gnu_Unwind_RaiseException+0x4e>
 80010d6:	4631      	mov	r1, r6
 80010d8:	4628      	mov	r0, r5
 80010da:	f7ff ff47 	bl	8000f6c <unwind_phase2>
 80010de:	bf00      	nop

080010e0 <__gnu_Unwind_ForcedUnwind>:
 80010e0:	60c1      	str	r1, [r0, #12]
 80010e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010e4:	6182      	str	r2, [r0, #24]
 80010e6:	6419      	str	r1, [r3, #64]	; 0x40
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	e75c      	b.n	8000fa8 <unwind_phase2_forced>
 80010ee:	bf00      	nop

080010f0 <__gnu_Unwind_Resume>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	68c6      	ldr	r6, [r0, #12]
 80010f4:	6943      	ldr	r3, [r0, #20]
 80010f6:	640b      	str	r3, [r1, #64]	; 0x40
 80010f8:	b9ae      	cbnz	r6, 8001126 <__gnu_Unwind_Resume+0x36>
 80010fa:	6903      	ldr	r3, [r0, #16]
 80010fc:	460a      	mov	r2, r1
 80010fe:	4604      	mov	r4, r0
 8001100:	460d      	mov	r5, r1
 8001102:	4601      	mov	r1, r0
 8001104:	2002      	movs	r0, #2
 8001106:	4798      	blx	r3
 8001108:	2807      	cmp	r0, #7
 800110a:	d005      	beq.n	8001118 <__gnu_Unwind_Resume+0x28>
 800110c:	2808      	cmp	r0, #8
 800110e:	d10f      	bne.n	8001130 <__gnu_Unwind_Resume+0x40>
 8001110:	4629      	mov	r1, r5
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff ff2a 	bl	8000f6c <unwind_phase2>
 8001118:	4630      	mov	r0, r6
 800111a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800111c:	f7ff ff24 	bl	8000f68 <_Unwind_DebugHook>
 8001120:	1d28      	adds	r0, r5, #4
 8001122:	f000 fb3f 	bl	80017a4 <__restore_core_regs>
 8001126:	2201      	movs	r2, #1
 8001128:	f7ff ff3e 	bl	8000fa8 <unwind_phase2_forced>
 800112c:	f003 f8a4 	bl	8004278 <abort>
 8001130:	f003 f8a2 	bl	8004278 <abort>

08001134 <__gnu_Unwind_Resume_or_Rethrow>:
 8001134:	68c2      	ldr	r2, [r0, #12]
 8001136:	b11a      	cbz	r2, 8001140 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8001138:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800113a:	640a      	str	r2, [r1, #64]	; 0x40
 800113c:	2200      	movs	r2, #0
 800113e:	e733      	b.n	8000fa8 <unwind_phase2_forced>
 8001140:	e79a      	b.n	8001078 <__gnu_Unwind_RaiseException>
 8001142:	bf00      	nop

08001144 <_Unwind_Complete>:
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <_Unwind_DeleteException>:
 8001148:	6883      	ldr	r3, [r0, #8]
 800114a:	4601      	mov	r1, r0
 800114c:	b10b      	cbz	r3, 8001152 <_Unwind_DeleteException+0xa>
 800114e:	2001      	movs	r0, #1
 8001150:	4718      	bx	r3
 8001152:	4770      	bx	lr

08001154 <_Unwind_VRS_Get>:
 8001154:	2901      	cmp	r1, #1
 8001156:	d012      	beq.n	800117e <_Unwind_VRS_Get+0x2a>
 8001158:	d809      	bhi.n	800116e <_Unwind_VRS_Get+0x1a>
 800115a:	b973      	cbnz	r3, 800117a <_Unwind_VRS_Get+0x26>
 800115c:	2a0f      	cmp	r2, #15
 800115e:	d80c      	bhi.n	800117a <_Unwind_VRS_Get+0x26>
 8001160:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001164:	4618      	mov	r0, r3
 8001166:	6853      	ldr	r3, [r2, #4]
 8001168:	9a00      	ldr	r2, [sp, #0]
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4770      	bx	lr
 800116e:	3903      	subs	r1, #3
 8001170:	2901      	cmp	r1, #1
 8001172:	bf94      	ite	ls
 8001174:	2001      	movls	r0, #1
 8001176:	2002      	movhi	r0, #2
 8001178:	4770      	bx	lr
 800117a:	2002      	movs	r0, #2
 800117c:	4770      	bx	lr
 800117e:	4608      	mov	r0, r1
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <_Unwind_GetGR>:
 8001184:	b500      	push	{lr}
 8001186:	b085      	sub	sp, #20
 8001188:	460a      	mov	r2, r1
 800118a:	2300      	movs	r3, #0
 800118c:	a903      	add	r1, sp, #12
 800118e:	9100      	str	r1, [sp, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff ffdf 	bl	8001154 <_Unwind_VRS_Get>
 8001196:	9803      	ldr	r0, [sp, #12]
 8001198:	b005      	add	sp, #20
 800119a:	f85d fb04 	ldr.w	pc, [sp], #4
 800119e:	bf00      	nop

080011a0 <_Unwind_VRS_Set>:
 80011a0:	2901      	cmp	r1, #1
 80011a2:	d012      	beq.n	80011ca <_Unwind_VRS_Set+0x2a>
 80011a4:	d809      	bhi.n	80011ba <_Unwind_VRS_Set+0x1a>
 80011a6:	b973      	cbnz	r3, 80011c6 <_Unwind_VRS_Set+0x26>
 80011a8:	2a0f      	cmp	r2, #15
 80011aa:	d80c      	bhi.n	80011c6 <_Unwind_VRS_Set+0x26>
 80011ac:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80011b0:	9a00      	ldr	r2, [sp, #0]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	6042      	str	r2, [r0, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	4770      	bx	lr
 80011ba:	3903      	subs	r1, #3
 80011bc:	2901      	cmp	r1, #1
 80011be:	bf94      	ite	ls
 80011c0:	2001      	movls	r0, #1
 80011c2:	2002      	movhi	r0, #2
 80011c4:	4770      	bx	lr
 80011c6:	2002      	movs	r0, #2
 80011c8:	4770      	bx	lr
 80011ca:	4608      	mov	r0, r1
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <_Unwind_SetGR>:
 80011d0:	b510      	push	{r4, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	2300      	movs	r3, #0
 80011d6:	ac03      	add	r4, sp, #12
 80011d8:	9203      	str	r2, [sp, #12]
 80011da:	9400      	str	r4, [sp, #0]
 80011dc:	460a      	mov	r2, r1
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff ffde 	bl	80011a0 <_Unwind_VRS_Set>
 80011e4:	b004      	add	sp, #16
 80011e6:	bd10      	pop	{r4, pc}

080011e8 <__gnu_Unwind_Backtrace>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	f102 0c04 	add.w	ip, r2, #4
 80011f2:	4605      	mov	r5, r0
 80011f4:	460c      	mov	r4, r1
 80011f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011fa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80011fe:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8001202:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001206:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800120a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800120e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001212:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001216:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800121a:	f04f 36ff 	mov.w	r6, #4294967295
 800121e:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001222:	9616      	str	r6, [sp, #88]	; 0x58
 8001224:	e010      	b.n	8001248 <__gnu_Unwind_Backtrace+0x60>
 8001226:	f7ff ffd3 	bl	80011d0 <_Unwind_SetGR>
 800122a:	4621      	mov	r1, r4
 800122c:	a816      	add	r0, sp, #88	; 0x58
 800122e:	47a8      	blx	r5
 8001230:	4603      	mov	r3, r0
 8001232:	aa16      	add	r2, sp, #88	; 0x58
 8001234:	4669      	mov	r1, sp
 8001236:	2008      	movs	r0, #8
 8001238:	b983      	cbnz	r3, 800125c <__gnu_Unwind_Backtrace+0x74>
 800123a:	9b04      	ldr	r3, [sp, #16]
 800123c:	4798      	blx	r3
 800123e:	2805      	cmp	r0, #5
 8001240:	4606      	mov	r6, r0
 8001242:	d00c      	beq.n	800125e <__gnu_Unwind_Backtrace+0x76>
 8001244:	2809      	cmp	r0, #9
 8001246:	d009      	beq.n	800125c <__gnu_Unwind_Backtrace+0x74>
 8001248:	9926      	ldr	r1, [sp, #152]	; 0x98
 800124a:	4668      	mov	r0, sp
 800124c:	f7ff fe0a 	bl	8000e64 <get_eit_entry>
 8001250:	4603      	mov	r3, r0
 8001252:	466a      	mov	r2, sp
 8001254:	210c      	movs	r1, #12
 8001256:	a816      	add	r0, sp, #88	; 0x58
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e4      	beq.n	8001226 <__gnu_Unwind_Backtrace+0x3e>
 800125c:	2609      	movs	r6, #9
 800125e:	a816      	add	r0, sp, #88	; 0x58
 8001260:	f7ff fe4e 	bl	8000f00 <restore_non_core_regs>
 8001264:	4630      	mov	r0, r6
 8001266:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800126a:	bd70      	pop	{r4, r5, r6, pc}

0800126c <__gnu_unwind_pr_common>:
 800126c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001270:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	461e      	mov	r6, r3
 8001276:	f854 3b04 	ldr.w	r3, [r4], #4
 800127a:	9406      	str	r4, [sp, #24]
 800127c:	460d      	mov	r5, r1
 800127e:	4617      	mov	r7, r2
 8001280:	f000 0803 	and.w	r8, r0, #3
 8001284:	2e00      	cmp	r6, #0
 8001286:	d079      	beq.n	800137c <__gnu_unwind_pr_common+0x110>
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	041b      	lsls	r3, r3, #16
 800128c:	9305      	str	r3, [sp, #20]
 800128e:	f88d 201d 	strb.w	r2, [sp, #29]
 8001292:	2302      	movs	r3, #2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800129a:	f88d 301c 	strb.w	r3, [sp, #28]
 800129e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80012a0:	f1b8 0f02 	cmp.w	r8, #2
 80012a4:	bf08      	it	eq
 80012a6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80012a8:	f013 0301 	ands.w	r3, r3, #1
 80012ac:	d00c      	beq.n	80012c8 <__gnu_unwind_pr_common+0x5c>
 80012ae:	a905      	add	r1, sp, #20
 80012b0:	4638      	mov	r0, r7
 80012b2:	f000 fb79 	bl	80019a8 <__gnu_unwind_execute>
 80012b6:	b918      	cbnz	r0, 80012c0 <__gnu_unwind_pr_common+0x54>
 80012b8:	2008      	movs	r0, #8
 80012ba:	b009      	add	sp, #36	; 0x24
 80012bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c0:	2009      	movs	r0, #9
 80012c2:	b009      	add	sp, #36	; 0x24
 80012c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c8:	f8d4 a000 	ldr.w	sl, [r4]
 80012cc:	f1ba 0f00 	cmp.w	sl, #0
 80012d0:	d0ed      	beq.n	80012ae <__gnu_unwind_pr_common+0x42>
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f000 0308 	and.w	r3, r0, #8
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2e02      	cmp	r6, #2
 80012dc:	d04a      	beq.n	8001374 <__gnu_unwind_pr_common+0x108>
 80012de:	f8b4 a000 	ldrh.w	sl, [r4]
 80012e2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80012e6:	3404      	adds	r4, #4
 80012e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80012ea:	f029 0b01 	bic.w	fp, r9, #1
 80012ee:	210f      	movs	r1, #15
 80012f0:	4638      	mov	r0, r7
 80012f2:	449b      	add	fp, r3
 80012f4:	f7ff ff46 	bl	8001184 <_Unwind_GetGR>
 80012f8:	4583      	cmp	fp, r0
 80012fa:	d839      	bhi.n	8001370 <__gnu_unwind_pr_common+0x104>
 80012fc:	f02a 0301 	bic.w	r3, sl, #1
 8001300:	449b      	add	fp, r3
 8001302:	4583      	cmp	fp, r0
 8001304:	bf94      	ite	ls
 8001306:	2000      	movls	r0, #0
 8001308:	2001      	movhi	r0, #1
 800130a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	f00a 0a01 	and.w	sl, sl, #1
 8001316:	ea43 030a 	orr.w	r3, r3, sl
 800131a:	2b01      	cmp	r3, #1
 800131c:	d049      	beq.n	80013b2 <__gnu_unwind_pr_common+0x146>
 800131e:	2b02      	cmp	r3, #2
 8001320:	d032      	beq.n	8001388 <__gnu_unwind_pr_common+0x11c>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1cc      	bne.n	80012c0 <__gnu_unwind_pr_common+0x54>
 8001326:	f1b8 0f00 	cmp.w	r8, #0
 800132a:	d002      	beq.n	8001332 <__gnu_unwind_pr_common+0xc6>
 800132c:	2800      	cmp	r0, #0
 800132e:	f040 80cd 	bne.w	80014cc <__gnu_unwind_pr_common+0x260>
 8001332:	3404      	adds	r4, #4
 8001334:	f8d4 a000 	ldr.w	sl, [r4]
 8001338:	f1ba 0f00 	cmp.w	sl, #0
 800133c:	d1cd      	bne.n	80012da <__gnu_unwind_pr_common+0x6e>
 800133e:	a905      	add	r1, sp, #20
 8001340:	4638      	mov	r0, r7
 8001342:	f000 fb31 	bl	80019a8 <__gnu_unwind_execute>
 8001346:	2800      	cmp	r0, #0
 8001348:	d1ba      	bne.n	80012c0 <__gnu_unwind_pr_common+0x54>
 800134a:	9b01      	ldr	r3, [sp, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0b3      	beq.n	80012b8 <__gnu_unwind_pr_common+0x4c>
 8001350:	210f      	movs	r1, #15
 8001352:	4638      	mov	r0, r7
 8001354:	f7ff ff16 	bl	8001184 <_Unwind_GetGR>
 8001358:	210e      	movs	r1, #14
 800135a:	4602      	mov	r2, r0
 800135c:	4638      	mov	r0, r7
 800135e:	f7ff ff37 	bl	80011d0 <_Unwind_SetGR>
 8001362:	4638      	mov	r0, r7
 8001364:	4a6a      	ldr	r2, [pc, #424]	; (8001510 <__gnu_unwind_pr_common+0x2a4>)
 8001366:	210f      	movs	r1, #15
 8001368:	f7ff ff32 	bl	80011d0 <_Unwind_SetGR>
 800136c:	2007      	movs	r0, #7
 800136e:	e7a8      	b.n	80012c2 <__gnu_unwind_pr_common+0x56>
 8001370:	2000      	movs	r0, #0
 8001372:	e7ca      	b.n	800130a <__gnu_unwind_pr_common+0x9e>
 8001374:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8001378:	3408      	adds	r4, #8
 800137a:	e7b5      	b.n	80012e8 <__gnu_unwind_pr_common+0x7c>
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	9305      	str	r3, [sp, #20]
 8001380:	2303      	movs	r3, #3
 8001382:	f8ad 301c 	strh.w	r3, [sp, #28]
 8001386:	e78a      	b.n	800129e <__gnu_unwind_pr_common+0x32>
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800138e:	f1b8 0f00 	cmp.w	r8, #0
 8001392:	d145      	bne.n	8001420 <__gnu_unwind_pr_common+0x1b4>
 8001394:	b128      	cbz	r0, 80013a2 <__gnu_unwind_pr_common+0x136>
 8001396:	9a02      	ldr	r2, [sp, #8]
 8001398:	2a00      	cmp	r2, #0
 800139a:	d05c      	beq.n	8001456 <__gnu_unwind_pr_common+0x1ea>
 800139c:	f1bb 0f00 	cmp.w	fp, #0
 80013a0:	d074      	beq.n	800148c <__gnu_unwind_pr_common+0x220>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	da00      	bge.n	80013a8 <__gnu_unwind_pr_common+0x13c>
 80013a6:	3404      	adds	r4, #4
 80013a8:	f10b 0b01 	add.w	fp, fp, #1
 80013ac:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 80013b0:	e7c0      	b.n	8001334 <__gnu_unwind_pr_common+0xc8>
 80013b2:	f1b8 0f00 	cmp.w	r8, #0
 80013b6:	d119      	bne.n	80013ec <__gnu_unwind_pr_common+0x180>
 80013b8:	b1b0      	cbz	r0, 80013e8 <__gnu_unwind_pr_common+0x17c>
 80013ba:	6863      	ldr	r3, [r4, #4]
 80013bc:	6822      	ldr	r2, [r4, #0]
 80013be:	1c99      	adds	r1, r3, #2
 80013c0:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80013c4:	f43f af7c 	beq.w	80012c0 <__gnu_unwind_pr_common+0x54>
 80013c8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80013cc:	3301      	adds	r3, #1
 80013ce:	9104      	str	r1, [sp, #16]
 80013d0:	f000 8090 	beq.w	80014f4 <__gnu_unwind_pr_common+0x288>
 80013d4:	1d20      	adds	r0, r4, #4
 80013d6:	f7ff fdc1 	bl	8000f5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 80013da:	ab04      	add	r3, sp, #16
 80013dc:	4601      	mov	r1, r0
 80013de:	4628      	mov	r0, r5
 80013e0:	f3af 8000 	nop.w
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d15b      	bne.n	80014a0 <__gnu_unwind_pr_common+0x234>
 80013e8:	3408      	adds	r4, #8
 80013ea:	e7a3      	b.n	8001334 <__gnu_unwind_pr_common+0xc8>
 80013ec:	210d      	movs	r1, #13
 80013ee:	4638      	mov	r0, r7
 80013f0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80013f4:	f7ff fec6 	bl	8001184 <_Unwind_GetGR>
 80013f8:	4581      	cmp	r9, r0
 80013fa:	d1f5      	bne.n	80013e8 <__gnu_unwind_pr_common+0x17c>
 80013fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80013fe:	429c      	cmp	r4, r3
 8001400:	d1f2      	bne.n	80013e8 <__gnu_unwind_pr_common+0x17c>
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fce2 	bl	8000dcc <selfrel_offset31>
 8001408:	210f      	movs	r1, #15
 800140a:	4602      	mov	r2, r0
 800140c:	4638      	mov	r0, r7
 800140e:	f7ff fedf 	bl	80011d0 <_Unwind_SetGR>
 8001412:	4638      	mov	r0, r7
 8001414:	462a      	mov	r2, r5
 8001416:	2100      	movs	r1, #0
 8001418:	f7ff feda 	bl	80011d0 <_Unwind_SetGR>
 800141c:	2007      	movs	r0, #7
 800141e:	e750      	b.n	80012c2 <__gnu_unwind_pr_common+0x56>
 8001420:	210d      	movs	r1, #13
 8001422:	4638      	mov	r0, r7
 8001424:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8001428:	f7ff feac 	bl	8001184 <_Unwind_GetGR>
 800142c:	4581      	cmp	r9, r0
 800142e:	d001      	beq.n	8001434 <__gnu_unwind_pr_common+0x1c8>
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	e7b6      	b.n	80013a2 <__gnu_unwind_pr_common+0x136>
 8001434:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001436:	429c      	cmp	r4, r3
 8001438:	d1fa      	bne.n	8001430 <__gnu_unwind_pr_common+0x1c4>
 800143a:	2304      	movs	r3, #4
 800143c:	2200      	movs	r2, #0
 800143e:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001442:	18e3      	adds	r3, r4, r3
 8001444:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8001448:	636b      	str	r3, [r5, #52]	; 0x34
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db59      	blt.n	8001504 <__gnu_unwind_pr_common+0x298>
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	e7a8      	b.n	80013a8 <__gnu_unwind_pr_common+0x13c>
 8001456:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800145a:	f8cd 800c 	str.w	r8, [sp, #12]
 800145e:	f104 0a04 	add.w	sl, r4, #4
 8001462:	46b0      	mov	r8, r6
 8001464:	4691      	mov	r9, r2
 8001466:	461e      	mov	r6, r3
 8001468:	e00e      	b.n	8001488 <__gnu_unwind_pr_common+0x21c>
 800146a:	4650      	mov	r0, sl
 800146c:	9604      	str	r6, [sp, #16]
 800146e:	f7ff fd75 	bl	8000f5c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001472:	2200      	movs	r2, #0
 8001474:	4601      	mov	r1, r0
 8001476:	ab04      	add	r3, sp, #16
 8001478:	4628      	mov	r0, r5
 800147a:	f109 0901 	add.w	r9, r9, #1
 800147e:	f10a 0a04 	add.w	sl, sl, #4
 8001482:	f3af 8000 	nop.w
 8001486:	b9e0      	cbnz	r0, 80014c2 <__gnu_unwind_pr_common+0x256>
 8001488:	45d9      	cmp	r9, fp
 800148a:	d1ee      	bne.n	800146a <__gnu_unwind_pr_common+0x1fe>
 800148c:	210d      	movs	r1, #13
 800148e:	4638      	mov	r0, r7
 8001490:	f7ff fe78 	bl	8001184 <_Unwind_GetGR>
 8001494:	9b04      	ldr	r3, [sp, #16]
 8001496:	62ac      	str	r4, [r5, #40]	; 0x28
 8001498:	e9c5 0308 	strd	r0, r3, [r5, #32]
 800149c:	2006      	movs	r0, #6
 800149e:	e710      	b.n	80012c2 <__gnu_unwind_pr_common+0x56>
 80014a0:	4681      	mov	r9, r0
 80014a2:	210d      	movs	r1, #13
 80014a4:	4638      	mov	r0, r7
 80014a6:	f7ff fe6d 	bl	8001184 <_Unwind_GetGR>
 80014aa:	f1b9 0f02 	cmp.w	r9, #2
 80014ae:	6228      	str	r0, [r5, #32]
 80014b0:	d125      	bne.n	80014fe <__gnu_unwind_pr_common+0x292>
 80014b2:	462b      	mov	r3, r5
 80014b4:	9a04      	ldr	r2, [sp, #16]
 80014b6:	f843 2f2c 	str.w	r2, [r3, #44]!
 80014ba:	626b      	str	r3, [r5, #36]	; 0x24
 80014bc:	62ac      	str	r4, [r5, #40]	; 0x28
 80014be:	2006      	movs	r0, #6
 80014c0:	e6ff      	b.n	80012c2 <__gnu_unwind_pr_common+0x56>
 80014c2:	4646      	mov	r6, r8
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80014ca:	e76a      	b.n	80013a2 <__gnu_unwind_pr_common+0x136>
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fc7d 	bl	8000dcc <selfrel_offset31>
 80014d2:	3404      	adds	r4, #4
 80014d4:	4602      	mov	r2, r0
 80014d6:	63ac      	str	r4, [r5, #56]	; 0x38
 80014d8:	4628      	mov	r0, r5
 80014da:	4614      	mov	r4, r2
 80014dc:	f3af 8000 	nop.w
 80014e0:	2800      	cmp	r0, #0
 80014e2:	f43f aeed 	beq.w	80012c0 <__gnu_unwind_pr_common+0x54>
 80014e6:	4638      	mov	r0, r7
 80014e8:	4622      	mov	r2, r4
 80014ea:	210f      	movs	r1, #15
 80014ec:	f7ff fe70 	bl	80011d0 <_Unwind_SetGR>
 80014f0:	2007      	movs	r0, #7
 80014f2:	e6e6      	b.n	80012c2 <__gnu_unwind_pr_common+0x56>
 80014f4:	210d      	movs	r1, #13
 80014f6:	4638      	mov	r0, r7
 80014f8:	f7ff fe44 	bl	8001184 <_Unwind_GetGR>
 80014fc:	6228      	str	r0, [r5, #32]
 80014fe:	9b04      	ldr	r3, [sp, #16]
 8001500:	626b      	str	r3, [r5, #36]	; 0x24
 8001502:	e7db      	b.n	80014bc <__gnu_unwind_pr_common+0x250>
 8001504:	f10b 0001 	add.w	r0, fp, #1
 8001508:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800150c:	e77a      	b.n	8001404 <__gnu_unwind_pr_common+0x198>
 800150e:	bf00      	nop
 8001510:	00000000 	.word	0x00000000

08001514 <__aeabi_unwind_cpp_pr0>:
 8001514:	2300      	movs	r3, #0
 8001516:	e6a9      	b.n	800126c <__gnu_unwind_pr_common>

08001518 <__aeabi_unwind_cpp_pr1>:
 8001518:	2301      	movs	r3, #1
 800151a:	e6a7      	b.n	800126c <__gnu_unwind_pr_common>

0800151c <__aeabi_unwind_cpp_pr2>:
 800151c:	2302      	movs	r3, #2
 800151e:	e6a5      	b.n	800126c <__gnu_unwind_pr_common>

08001520 <_Unwind_VRS_Pop>:
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	4606      	mov	r6, r0
 8001526:	b0c3      	sub	sp, #268	; 0x10c
 8001528:	4615      	mov	r5, r2
 800152a:	461c      	mov	r4, r3
 800152c:	2904      	cmp	r1, #4
 800152e:	f200 80bf 	bhi.w	80016b0 <_Unwind_VRS_Pop+0x190>
 8001532:	e8df f001 	tbb	[pc, r1]
 8001536:	579e      	.short	0x579e
 8001538:	2dbd      	.short	0x2dbd
 800153a:	03          	.byte	0x03
 800153b:	00          	.byte	0x00
 800153c:	2c00      	cmp	r4, #0
 800153e:	f040 80b7 	bne.w	80016b0 <_Unwind_VRS_Pop+0x190>
 8001542:	2a10      	cmp	r2, #16
 8001544:	f200 80b4 	bhi.w	80016b0 <_Unwind_VRS_Pop+0x190>
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	06d8      	lsls	r0, r3, #27
 800154c:	f100 80f9 	bmi.w	8001742 <_Unwind_VRS_Pop+0x222>
 8001550:	af20      	add	r7, sp, #128	; 0x80
 8001552:	4638      	mov	r0, r7
 8001554:	f000 f998 	bl	8001888 <__gnu_Unwind_Save_WMMXC>
 8001558:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800155a:	4639      	mov	r1, r7
 800155c:	2300      	movs	r3, #0
 800155e:	f04f 0c01 	mov.w	ip, #1
 8001562:	fa0c f203 	lsl.w	r2, ip, r3
 8001566:	422a      	tst	r2, r5
 8001568:	4620      	mov	r0, r4
 800156a:	f103 0301 	add.w	r3, r3, #1
 800156e:	d003      	beq.n	8001578 <_Unwind_VRS_Pop+0x58>
 8001570:	f850 2b04 	ldr.w	r2, [r0], #4
 8001574:	600a      	str	r2, [r1, #0]
 8001576:	4604      	mov	r4, r0
 8001578:	2b04      	cmp	r3, #4
 800157a:	f101 0104 	add.w	r1, r1, #4
 800157e:	d1f0      	bne.n	8001562 <_Unwind_VRS_Pop+0x42>
 8001580:	4638      	mov	r0, r7
 8001582:	63b4      	str	r4, [r6, #56]	; 0x38
 8001584:	f000 f976 	bl	8001874 <__gnu_Unwind_Restore_WMMXC>
 8001588:	2000      	movs	r0, #0
 800158a:	b043      	add	sp, #268	; 0x10c
 800158c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001590:	2c03      	cmp	r4, #3
 8001592:	f040 808d 	bne.w	80016b0 <_Unwind_VRS_Pop+0x190>
 8001596:	b294      	uxth	r4, r2
 8001598:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800159c:	2b10      	cmp	r3, #16
 800159e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 80015a2:	f200 8085 	bhi.w	80016b0 <_Unwind_VRS_Pop+0x190>
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	071f      	lsls	r7, r3, #28
 80015aa:	f100 80d2 	bmi.w	8001752 <_Unwind_VRS_Pop+0x232>
 80015ae:	af20      	add	r7, sp, #128	; 0x80
 80015b0:	4638      	mov	r0, r7
 80015b2:	f000 f93d 	bl	8001830 <__gnu_Unwind_Save_WMMXD>
 80015b6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80015b8:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 80015bc:	b154      	cbz	r4, 80015d4 <_Unwind_VRS_Pop+0xb4>
 80015be:	460b      	mov	r3, r1
 80015c0:	1ad0      	subs	r0, r2, r3
 80015c2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80015c6:	00e4      	lsls	r4, r4, #3
 80015c8:	581d      	ldr	r5, [r3, r0]
 80015ca:	f843 5b04 	str.w	r5, [r3], #4
 80015ce:	428b      	cmp	r3, r1
 80015d0:	d1fa      	bne.n	80015c8 <_Unwind_VRS_Pop+0xa8>
 80015d2:	4422      	add	r2, r4
 80015d4:	4638      	mov	r0, r7
 80015d6:	63b2      	str	r2, [r6, #56]	; 0x38
 80015d8:	f000 f908 	bl	80017ec <__gnu_Unwind_Restore_WMMXD>
 80015dc:	2000      	movs	r0, #0
 80015de:	b043      	add	sp, #268	; 0x10c
 80015e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e4:	2c01      	cmp	r4, #1
 80015e6:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80015ea:	b295      	uxth	r5, r2
 80015ec:	d05c      	beq.n	80016a8 <_Unwind_VRS_Pop+0x188>
 80015ee:	2c05      	cmp	r4, #5
 80015f0:	d15e      	bne.n	80016b0 <_Unwind_VRS_Pop+0x190>
 80015f2:	eb08 0905 	add.w	r9, r8, r5
 80015f6:	f1b9 0f20 	cmp.w	r9, #32
 80015fa:	d859      	bhi.n	80016b0 <_Unwind_VRS_Pop+0x190>
 80015fc:	f1b8 0f0f 	cmp.w	r8, #15
 8001600:	d979      	bls.n	80016f6 <_Unwind_VRS_Pop+0x1d6>
 8001602:	46a9      	mov	r9, r5
 8001604:	2d00      	cmp	r5, #0
 8001606:	f040 808a 	bne.w	800171e <_Unwind_VRS_Pop+0x1fe>
 800160a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800160c:	b36d      	cbz	r5, 800166a <_Unwind_VRS_Pop+0x14a>
 800160e:	af20      	add	r7, sp, #128	; 0x80
 8001610:	f04f 0900 	mov.w	r9, #0
 8001614:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8001618:	3f04      	subs	r7, #4
 800161a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800161e:	f853 1b04 	ldr.w	r1, [r3], #4
 8001622:	f847 1f04 	str.w	r1, [r7, #4]!
 8001626:	42ab      	cmp	r3, r5
 8001628:	d1f9      	bne.n	800161e <_Unwind_VRS_Pop+0xfe>
 800162a:	f1b9 0f00 	cmp.w	r9, #0
 800162e:	d00f      	beq.n	8001650 <_Unwind_VRS_Pop+0x130>
 8001630:	466f      	mov	r7, sp
 8001632:	4641      	mov	r1, r8
 8001634:	2910      	cmp	r1, #16
 8001636:	bf38      	it	cc
 8001638:	2110      	movcc	r1, #16
 800163a:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800163e:	3984      	subs	r1, #132	; 0x84
 8001640:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001644:	f853 0b04 	ldr.w	r0, [r3], #4
 8001648:	f841 0f04 	str.w	r0, [r1, #4]!
 800164c:	42ab      	cmp	r3, r5
 800164e:	d1f9      	bne.n	8001644 <_Unwind_VRS_Pop+0x124>
 8001650:	2c01      	cmp	r4, #1
 8001652:	f000 8086 	beq.w	8001762 <_Unwind_VRS_Pop+0x242>
 8001656:	f1b8 0f0f 	cmp.w	r8, #15
 800165a:	63b5      	str	r5, [r6, #56]	; 0x38
 800165c:	d947      	bls.n	80016ee <_Unwind_VRS_Pop+0x1ce>
 800165e:	f1b9 0f00 	cmp.w	r9, #0
 8001662:	d002      	beq.n	800166a <_Unwind_VRS_Pop+0x14a>
 8001664:	4668      	mov	r0, sp
 8001666:	f000 f8b9 	bl	80017dc <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800166a:	2000      	movs	r0, #0
 800166c:	b043      	add	sp, #268	; 0x10c
 800166e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001672:	b9ec      	cbnz	r4, 80016b0 <_Unwind_VRS_Pop+0x190>
 8001674:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001676:	4623      	mov	r3, r4
 8001678:	fa1f fc82 	uxth.w	ip, r2
 800167c:	2401      	movs	r4, #1
 800167e:	1d37      	adds	r7, r6, #4
 8001680:	fa04 f203 	lsl.w	r2, r4, r3
 8001684:	ea12 0f0c 	tst.w	r2, ip
 8001688:	4601      	mov	r1, r0
 800168a:	d004      	beq.n	8001696 <_Unwind_VRS_Pop+0x176>
 800168c:	f851 2b04 	ldr.w	r2, [r1], #4
 8001690:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 8001694:	4608      	mov	r0, r1
 8001696:	3301      	adds	r3, #1
 8001698:	2b10      	cmp	r3, #16
 800169a:	d1f1      	bne.n	8001680 <_Unwind_VRS_Pop+0x160>
 800169c:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
 80016a0:	d1e3      	bne.n	800166a <_Unwind_VRS_Pop+0x14a>
 80016a2:	63b0      	str	r0, [r6, #56]	; 0x38
 80016a4:	4628      	mov	r0, r5
 80016a6:	e004      	b.n	80016b2 <_Unwind_VRS_Pop+0x192>
 80016a8:	eb08 0305 	add.w	r3, r8, r5
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d903      	bls.n	80016b8 <_Unwind_VRS_Pop+0x198>
 80016b0:	2002      	movs	r0, #2
 80016b2:	b043      	add	sp, #268	; 0x10c
 80016b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016b8:	f1b8 0f0f 	cmp.w	r8, #15
 80016bc:	d8f8      	bhi.n	80016b0 <_Unwind_VRS_Pop+0x190>
 80016be:	6833      	ldr	r3, [r6, #0]
 80016c0:	07da      	lsls	r2, r3, #31
 80016c2:	d506      	bpl.n	80016d2 <_Unwind_VRS_Pop+0x1b2>
 80016c4:	4630      	mov	r0, r6
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f840 3b48 	str.w	r3, [r0], #72
 80016ce:	f000 f879 	bl	80017c4 <__gnu_Unwind_Save_VFP>
 80016d2:	af20      	add	r7, sp, #128	; 0x80
 80016d4:	4638      	mov	r0, r7
 80016d6:	f000 f875 	bl	80017c4 <__gnu_Unwind_Save_VFP>
 80016da:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d197      	bne.n	8001610 <_Unwind_VRS_Pop+0xf0>
 80016e0:	461d      	mov	r5, r3
 80016e2:	3504      	adds	r5, #4
 80016e4:	63b5      	str	r5, [r6, #56]	; 0x38
 80016e6:	4638      	mov	r0, r7
 80016e8:	f000 f868 	bl	80017bc <__gnu_Unwind_Restore_VFP>
 80016ec:	e7bd      	b.n	800166a <_Unwind_VRS_Pop+0x14a>
 80016ee:	a820      	add	r0, sp, #128	; 0x80
 80016f0:	f000 f86c 	bl	80017cc <__gnu_Unwind_Restore_VFP_D>
 80016f4:	e7b3      	b.n	800165e <_Unwind_VRS_Pop+0x13e>
 80016f6:	f1b9 0f10 	cmp.w	r9, #16
 80016fa:	d940      	bls.n	800177e <_Unwind_VRS_Pop+0x25e>
 80016fc:	f1a9 0910 	sub.w	r9, r9, #16
 8001700:	6833      	ldr	r3, [r6, #0]
 8001702:	07d9      	lsls	r1, r3, #31
 8001704:	d508      	bpl.n	8001718 <_Unwind_VRS_Pop+0x1f8>
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	4630      	mov	r0, r6
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	f840 3b48 	str.w	r3, [r0], #72
 8001714:	f000 f85e 	bl	80017d4 <__gnu_Unwind_Save_VFP_D>
 8001718:	f1b9 0f00 	cmp.w	r9, #0
 800171c:	d032      	beq.n	8001784 <_Unwind_VRS_Pop+0x264>
 800171e:	6833      	ldr	r3, [r6, #0]
 8001720:	075a      	lsls	r2, r3, #29
 8001722:	d420      	bmi.n	8001766 <_Unwind_VRS_Pop+0x246>
 8001724:	f1b8 0f0f 	cmp.w	r8, #15
 8001728:	d925      	bls.n	8001776 <_Unwind_VRS_Pop+0x256>
 800172a:	466f      	mov	r7, sp
 800172c:	4638      	mov	r0, r7
 800172e:	f1c8 0510 	rsb	r5, r8, #16
 8001732:	f000 f857 	bl	80017e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001736:	2d00      	cmp	r5, #0
 8001738:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800173a:	f77f af7a 	ble.w	8001632 <_Unwind_VRS_Pop+0x112>
 800173e:	af20      	add	r7, sp, #128	; 0x80
 8001740:	e768      	b.n	8001614 <_Unwind_VRS_Pop+0xf4>
 8001742:	f023 0310 	bic.w	r3, r3, #16
 8001746:	6033      	str	r3, [r6, #0]
 8001748:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 800174c:	f000 f89c 	bl	8001888 <__gnu_Unwind_Save_WMMXC>
 8001750:	e6fe      	b.n	8001550 <_Unwind_VRS_Pop+0x30>
 8001752:	f023 0308 	bic.w	r3, r3, #8
 8001756:	6003      	str	r3, [r0, #0]
 8001758:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800175c:	f000 f868 	bl	8001830 <__gnu_Unwind_Save_WMMXD>
 8001760:	e725      	b.n	80015ae <_Unwind_VRS_Pop+0x8e>
 8001762:	af20      	add	r7, sp, #128	; 0x80
 8001764:	e7bd      	b.n	80016e2 <_Unwind_VRS_Pop+0x1c2>
 8001766:	4630      	mov	r0, r6
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	f840 3bd0 	str.w	r3, [r0], #208
 8001770:	f000 f838 	bl	80017e4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001774:	e7d6      	b.n	8001724 <_Unwind_VRS_Pop+0x204>
 8001776:	a820      	add	r0, sp, #128	; 0x80
 8001778:	f000 f82c 	bl	80017d4 <__gnu_Unwind_Save_VFP_D>
 800177c:	e7d5      	b.n	800172a <_Unwind_VRS_Pop+0x20a>
 800177e:	f04f 0900 	mov.w	r9, #0
 8001782:	e7bd      	b.n	8001700 <_Unwind_VRS_Pop+0x1e0>
 8001784:	f1b8 0f0f 	cmp.w	r8, #15
 8001788:	f63f af3f 	bhi.w	800160a <_Unwind_VRS_Pop+0xea>
 800178c:	af20      	add	r7, sp, #128	; 0x80
 800178e:	4638      	mov	r0, r7
 8001790:	f000 f820 	bl	80017d4 <__gnu_Unwind_Save_VFP_D>
 8001794:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001796:	2d00      	cmp	r5, #0
 8001798:	f47f af3a 	bne.w	8001610 <_Unwind_VRS_Pop+0xf0>
 800179c:	4638      	mov	r0, r7
 800179e:	f000 f815 	bl	80017cc <__gnu_Unwind_Restore_VFP_D>
 80017a2:	e762      	b.n	800166a <_Unwind_VRS_Pop+0x14a>

080017a4 <__restore_core_regs>:
 80017a4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80017a8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80017ac:	469c      	mov	ip, r3
 80017ae:	46a6      	mov	lr, r4
 80017b0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80017b4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80017b8:	46e5      	mov	sp, ip
 80017ba:	bd00      	pop	{pc}

080017bc <__gnu_Unwind_Restore_VFP>:
 80017bc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop

080017c4 <__gnu_Unwind_Save_VFP>:
 80017c4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop

080017cc <__gnu_Unwind_Restore_VFP_D>:
 80017cc:	ec90 0b20 	vldmia	r0, {d0-d15}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <__gnu_Unwind_Save_VFP_D>:
 80017d4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop

080017dc <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80017dc:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80017e4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <__gnu_Unwind_Restore_WMMXD>:
 80017ec:	ecf0 0102 	ldfe	f0, [r0], #8
 80017f0:	ecf0 1102 	ldfe	f1, [r0], #8
 80017f4:	ecf0 2102 	ldfe	f2, [r0], #8
 80017f8:	ecf0 3102 	ldfe	f3, [r0], #8
 80017fc:	ecf0 4102 	ldfe	f4, [r0], #8
 8001800:	ecf0 5102 	ldfe	f5, [r0], #8
 8001804:	ecf0 6102 	ldfe	f6, [r0], #8
 8001808:	ecf0 7102 	ldfe	f7, [r0], #8
 800180c:	ecf0 8102 	ldfp	f0, [r0], #8
 8001810:	ecf0 9102 	ldfp	f1, [r0], #8
 8001814:	ecf0 a102 	ldfp	f2, [r0], #8
 8001818:	ecf0 b102 	ldfp	f3, [r0], #8
 800181c:	ecf0 c102 	ldfp	f4, [r0], #8
 8001820:	ecf0 d102 	ldfp	f5, [r0], #8
 8001824:	ecf0 e102 	ldfp	f6, [r0], #8
 8001828:	ecf0 f102 	ldfp	f7, [r0], #8
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <__gnu_Unwind_Save_WMMXD>:
 8001830:	ece0 0102 	stfe	f0, [r0], #8
 8001834:	ece0 1102 	stfe	f1, [r0], #8
 8001838:	ece0 2102 	stfe	f2, [r0], #8
 800183c:	ece0 3102 	stfe	f3, [r0], #8
 8001840:	ece0 4102 	stfe	f4, [r0], #8
 8001844:	ece0 5102 	stfe	f5, [r0], #8
 8001848:	ece0 6102 	stfe	f6, [r0], #8
 800184c:	ece0 7102 	stfe	f7, [r0], #8
 8001850:	ece0 8102 	stfp	f0, [r0], #8
 8001854:	ece0 9102 	stfp	f1, [r0], #8
 8001858:	ece0 a102 	stfp	f2, [r0], #8
 800185c:	ece0 b102 	stfp	f3, [r0], #8
 8001860:	ece0 c102 	stfp	f4, [r0], #8
 8001864:	ece0 d102 	stfp	f5, [r0], #8
 8001868:	ece0 e102 	stfp	f6, [r0], #8
 800186c:	ece0 f102 	stfp	f7, [r0], #8
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop

08001874 <__gnu_Unwind_Restore_WMMXC>:
 8001874:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001878:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800187c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001880:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <__gnu_Unwind_Save_WMMXC>:
 8001888:	fca0 8101 	stc2	1, cr8, [r0], #4
 800188c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001890:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001894:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <_Unwind_RaiseException>:
 800189c:	46ec      	mov	ip, sp
 800189e:	b500      	push	{lr}
 80018a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018b0:	a901      	add	r1, sp, #4
 80018b2:	f7ff fbe1 	bl	8001078 <__gnu_Unwind_RaiseException>
 80018b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018ba:	b012      	add	sp, #72	; 0x48
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <_Unwind_Resume>:
 80018c0:	46ec      	mov	ip, sp
 80018c2:	b500      	push	{lr}
 80018c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018d4:	a901      	add	r1, sp, #4
 80018d6:	f7ff fc0b 	bl	80010f0 <__gnu_Unwind_Resume>
 80018da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018de:	b012      	add	sp, #72	; 0x48
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop

080018e4 <_Unwind_Resume_or_Rethrow>:
 80018e4:	46ec      	mov	ip, sp
 80018e6:	b500      	push	{lr}
 80018e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018f8:	a901      	add	r1, sp, #4
 80018fa:	f7ff fc1b 	bl	8001134 <__gnu_Unwind_Resume_or_Rethrow>
 80018fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001902:	b012      	add	sp, #72	; 0x48
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop

08001908 <_Unwind_ForcedUnwind>:
 8001908:	46ec      	mov	ip, sp
 800190a:	b500      	push	{lr}
 800190c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001910:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e92d 000c 	stmdb	sp!, {r2, r3}
 800191c:	ab01      	add	r3, sp, #4
 800191e:	f7ff fbdf 	bl	80010e0 <__gnu_Unwind_ForcedUnwind>
 8001922:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001926:	b012      	add	sp, #72	; 0x48
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <_Unwind_Backtrace>:
 800192c:	46ec      	mov	ip, sp
 800192e:	b500      	push	{lr}
 8001930:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001934:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001940:	aa01      	add	r2, sp, #4
 8001942:	f7ff fc51 	bl	80011e8 <__gnu_Unwind_Backtrace>
 8001946:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800194a:	b012      	add	sp, #72	; 0x48
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <next_unwind_byte>:
 8001950:	7a02      	ldrb	r2, [r0, #8]
 8001952:	4603      	mov	r3, r0
 8001954:	b97a      	cbnz	r2, 8001976 <next_unwind_byte+0x26>
 8001956:	7a42      	ldrb	r2, [r0, #9]
 8001958:	b1a2      	cbz	r2, 8001984 <next_unwind_byte+0x34>
 800195a:	6841      	ldr	r1, [r0, #4]
 800195c:	3a01      	subs	r2, #1
 800195e:	b410      	push	{r4}
 8001960:	7242      	strb	r2, [r0, #9]
 8001962:	6808      	ldr	r0, [r1, #0]
 8001964:	2203      	movs	r2, #3
 8001966:	1d0c      	adds	r4, r1, #4
 8001968:	721a      	strb	r2, [r3, #8]
 800196a:	0202      	lsls	r2, r0, #8
 800196c:	605c      	str	r4, [r3, #4]
 800196e:	0e00      	lsrs	r0, r0, #24
 8001970:	bc10      	pop	{r4}
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4770      	bx	lr
 8001976:	6800      	ldr	r0, [r0, #0]
 8001978:	3a01      	subs	r2, #1
 800197a:	721a      	strb	r2, [r3, #8]
 800197c:	0202      	lsls	r2, r0, #8
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	0e00      	lsrs	r0, r0, #24
 8001982:	4770      	bx	lr
 8001984:	20b0      	movs	r0, #176	; 0xb0
 8001986:	4770      	bx	lr

08001988 <_Unwind_GetGR.constprop.0>:
 8001988:	b500      	push	{lr}
 800198a:	b085      	sub	sp, #20
 800198c:	2300      	movs	r3, #0
 800198e:	aa03      	add	r2, sp, #12
 8001990:	9200      	str	r2, [sp, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	220c      	movs	r2, #12
 8001996:	f7ff fbdd 	bl	8001154 <_Unwind_VRS_Get>
 800199a:	9803      	ldr	r0, [sp, #12]
 800199c:	b005      	add	sp, #20
 800199e:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a2:	bf00      	nop

080019a4 <unwind_UCB_from_context>:
 80019a4:	e7f0      	b.n	8001988 <_Unwind_GetGR.constprop.0>
 80019a6:	bf00      	nop

080019a8 <__gnu_unwind_execute>:
 80019a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ac:	4605      	mov	r5, r0
 80019ae:	b085      	sub	sp, #20
 80019b0:	460e      	mov	r6, r1
 80019b2:	f04f 0800 	mov.w	r8, #0
 80019b6:	4630      	mov	r0, r6
 80019b8:	f7ff ffca 	bl	8001950 <next_unwind_byte>
 80019bc:	28b0      	cmp	r0, #176	; 0xb0
 80019be:	4604      	mov	r4, r0
 80019c0:	f000 80ba 	beq.w	8001b38 <__gnu_unwind_execute+0x190>
 80019c4:	0607      	lsls	r7, r0, #24
 80019c6:	d520      	bpl.n	8001a0a <__gnu_unwind_execute+0x62>
 80019c8:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80019cc:	2b80      	cmp	r3, #128	; 0x80
 80019ce:	d04d      	beq.n	8001a6c <__gnu_unwind_execute+0xc4>
 80019d0:	2b90      	cmp	r3, #144	; 0x90
 80019d2:	d036      	beq.n	8001a42 <__gnu_unwind_execute+0x9a>
 80019d4:	2ba0      	cmp	r3, #160	; 0xa0
 80019d6:	d060      	beq.n	8001a9a <__gnu_unwind_execute+0xf2>
 80019d8:	2bb0      	cmp	r3, #176	; 0xb0
 80019da:	d074      	beq.n	8001ac6 <__gnu_unwind_execute+0x11e>
 80019dc:	2bc0      	cmp	r3, #192	; 0xc0
 80019de:	f000 808b 	beq.w	8001af8 <__gnu_unwind_execute+0x150>
 80019e2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019e6:	2bd0      	cmp	r3, #208	; 0xd0
 80019e8:	d10b      	bne.n	8001a02 <__gnu_unwind_execute+0x5a>
 80019ea:	f000 0207 	and.w	r2, r0, #7
 80019ee:	3201      	adds	r2, #1
 80019f0:	2305      	movs	r3, #5
 80019f2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019f6:	2101      	movs	r1, #1
 80019f8:	4628      	mov	r0, r5
 80019fa:	f7ff fd91 	bl	8001520 <_Unwind_VRS_Pop>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	d0d9      	beq.n	80019b6 <__gnu_unwind_execute+0xe>
 8001a02:	2009      	movs	r0, #9
 8001a04:	b005      	add	sp, #20
 8001a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a0a:	0083      	lsls	r3, r0, #2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	1d1f      	adds	r7, r3, #4
 8001a10:	f10d 090c 	add.w	r9, sp, #12
 8001a14:	2300      	movs	r3, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	f8cd 9000 	str.w	r9, [sp]
 8001a1c:	220d      	movs	r2, #13
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7ff fb98 	bl	8001154 <_Unwind_VRS_Get>
 8001a24:	9b03      	ldr	r3, [sp, #12]
 8001a26:	f8cd 9000 	str.w	r9, [sp]
 8001a2a:	0660      	lsls	r0, r4, #25
 8001a2c:	bf4c      	ite	mi
 8001a2e:	1bdf      	submi	r7, r3, r7
 8001a30:	18ff      	addpl	r7, r7, r3
 8001a32:	2300      	movs	r3, #0
 8001a34:	220d      	movs	r2, #13
 8001a36:	4619      	mov	r1, r3
 8001a38:	4628      	mov	r0, r5
 8001a3a:	9703      	str	r7, [sp, #12]
 8001a3c:	f7ff fbb0 	bl	80011a0 <_Unwind_VRS_Set>
 8001a40:	e7b9      	b.n	80019b6 <__gnu_unwind_execute+0xe>
 8001a42:	f000 030d 	and.w	r3, r0, #13
 8001a46:	2b0d      	cmp	r3, #13
 8001a48:	d0db      	beq.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001a4a:	af03      	add	r7, sp, #12
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f000 020f 	and.w	r2, r0, #15
 8001a52:	4619      	mov	r1, r3
 8001a54:	9700      	str	r7, [sp, #0]
 8001a56:	4628      	mov	r0, r5
 8001a58:	f7ff fb7c 	bl	8001154 <_Unwind_VRS_Get>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9700      	str	r7, [sp, #0]
 8001a60:	220d      	movs	r2, #13
 8001a62:	4619      	mov	r1, r3
 8001a64:	4628      	mov	r0, r5
 8001a66:	f7ff fb9b 	bl	80011a0 <_Unwind_VRS_Set>
 8001a6a:	e7a4      	b.n	80019b6 <__gnu_unwind_execute+0xe>
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f7ff ff6f 	bl	8001950 <next_unwind_byte>
 8001a72:	0224      	lsls	r4, r4, #8
 8001a74:	4320      	orrs	r0, r4
 8001a76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001a7a:	d0c2      	beq.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001a7c:	0104      	lsls	r4, r0, #4
 8001a7e:	2300      	movs	r3, #0
 8001a80:	b2a2      	uxth	r2, r4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4628      	mov	r0, r5
 8001a86:	f7ff fd4b 	bl	8001520 <_Unwind_VRS_Pop>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d1b9      	bne.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001a8e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001a92:	bf18      	it	ne
 8001a94:	f04f 0801 	movne.w	r8, #1
 8001a98:	e78d      	b.n	80019b6 <__gnu_unwind_execute+0xe>
 8001a9a:	43c2      	mvns	r2, r0
 8001a9c:	f002 0307 	and.w	r3, r2, #7
 8001aa0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001aa4:	411a      	asrs	r2, r3
 8001aa6:	0701      	lsls	r1, r0, #28
 8001aa8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	bf48      	it	mi
 8001ab2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f7ff fd31 	bl	8001520 <_Unwind_VRS_Pop>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	f43f af79 	beq.w	80019b6 <__gnu_unwind_execute+0xe>
 8001ac4:	e79d      	b.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001ac6:	28b1      	cmp	r0, #177	; 0xb1
 8001ac8:	d03b      	beq.n	8001b42 <__gnu_unwind_execute+0x19a>
 8001aca:	28b2      	cmp	r0, #178	; 0xb2
 8001acc:	f000 8093 	beq.w	8001bf6 <__gnu_unwind_execute+0x24e>
 8001ad0:	28b3      	cmp	r0, #179	; 0xb3
 8001ad2:	d041      	beq.n	8001b58 <__gnu_unwind_execute+0x1b0>
 8001ad4:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001ad8:	2bb4      	cmp	r3, #180	; 0xb4
 8001ada:	d092      	beq.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001adc:	f000 0207 	and.w	r2, r0, #7
 8001ae0:	3201      	adds	r2, #1
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4628      	mov	r0, r5
 8001aec:	f7ff fd18 	bl	8001520 <_Unwind_VRS_Pop>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	f43f af60 	beq.w	80019b6 <__gnu_unwind_execute+0xe>
 8001af6:	e784      	b.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001af8:	28c6      	cmp	r0, #198	; 0xc6
 8001afa:	d04a      	beq.n	8001b92 <__gnu_unwind_execute+0x1ea>
 8001afc:	28c7      	cmp	r0, #199	; 0xc7
 8001afe:	d054      	beq.n	8001baa <__gnu_unwind_execute+0x202>
 8001b00:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001b04:	2bc0      	cmp	r3, #192	; 0xc0
 8001b06:	d063      	beq.n	8001bd0 <__gnu_unwind_execute+0x228>
 8001b08:	28c8      	cmp	r0, #200	; 0xc8
 8001b0a:	d068      	beq.n	8001bde <__gnu_unwind_execute+0x236>
 8001b0c:	28c9      	cmp	r0, #201	; 0xc9
 8001b0e:	f47f af78 	bne.w	8001a02 <__gnu_unwind_execute+0x5a>
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff ff1c 	bl	8001950 <next_unwind_byte>
 8001b18:	0302      	lsls	r2, r0, #12
 8001b1a:	f000 000f 	and.w	r0, r0, #15
 8001b1e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001b22:	3001      	adds	r0, #1
 8001b24:	4302      	orrs	r2, r0
 8001b26:	2101      	movs	r1, #1
 8001b28:	2305      	movs	r3, #5
 8001b2a:	4628      	mov	r0, r5
 8001b2c:	f7ff fcf8 	bl	8001520 <_Unwind_VRS_Pop>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	f43f af40 	beq.w	80019b6 <__gnu_unwind_execute+0xe>
 8001b36:	e764      	b.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001b38:	f1b8 0f00 	cmp.w	r8, #0
 8001b3c:	d018      	beq.n	8001b70 <__gnu_unwind_execute+0x1c8>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	e760      	b.n	8001a04 <__gnu_unwind_execute+0x5c>
 8001b42:	4630      	mov	r0, r6
 8001b44:	f7ff ff04 	bl	8001950 <next_unwind_byte>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	f43f af59 	beq.w	8001a02 <__gnu_unwind_execute+0x5a>
 8001b50:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001b54:	d0c8      	beq.n	8001ae8 <__gnu_unwind_execute+0x140>
 8001b56:	e754      	b.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001b58:	4630      	mov	r0, r6
 8001b5a:	f7ff fef9 	bl	8001950 <next_unwind_byte>
 8001b5e:	0302      	lsls	r2, r0, #12
 8001b60:	f000 030f 	and.w	r3, r0, #15
 8001b64:	3301      	adds	r3, #1
 8001b66:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e7bb      	b.n	8001ae8 <__gnu_unwind_execute+0x140>
 8001b70:	ac03      	add	r4, sp, #12
 8001b72:	4643      	mov	r3, r8
 8001b74:	220e      	movs	r2, #14
 8001b76:	4641      	mov	r1, r8
 8001b78:	9400      	str	r4, [sp, #0]
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff faea 	bl	8001154 <_Unwind_VRS_Get>
 8001b80:	9400      	str	r4, [sp, #0]
 8001b82:	4643      	mov	r3, r8
 8001b84:	220f      	movs	r2, #15
 8001b86:	4641      	mov	r1, r8
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f7ff fb09 	bl	80011a0 <_Unwind_VRS_Set>
 8001b8e:	4640      	mov	r0, r8
 8001b90:	e738      	b.n	8001a04 <__gnu_unwind_execute+0x5c>
 8001b92:	4630      	mov	r0, r6
 8001b94:	f7ff fedc 	bl	8001950 <next_unwind_byte>
 8001b98:	0302      	lsls	r2, r0, #12
 8001b9a:	f000 030f 	and.w	r3, r0, #15
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e79e      	b.n	8001ae8 <__gnu_unwind_execute+0x140>
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff fed0 	bl	8001950 <next_unwind_byte>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	f43f af25 	beq.w	8001a02 <__gnu_unwind_execute+0x5a>
 8001bb8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001bbc:	f47f af21 	bne.w	8001a02 <__gnu_unwind_execute+0x5a>
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff fcac 	bl	8001520 <_Unwind_VRS_Pop>
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	f43f aef4 	beq.w	80019b6 <__gnu_unwind_execute+0xe>
 8001bce:	e718      	b.n	8001a02 <__gnu_unwind_execute+0x5a>
 8001bd0:	f000 020f 	and.w	r2, r0, #15
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001bdc:	e784      	b.n	8001ae8 <__gnu_unwind_execute+0x140>
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7ff feb6 	bl	8001950 <next_unwind_byte>
 8001be4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001be8:	f000 030f 	and.w	r3, r0, #15
 8001bec:	3210      	adds	r2, #16
 8001bee:	3301      	adds	r3, #1
 8001bf0:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001bf4:	e797      	b.n	8001b26 <__gnu_unwind_execute+0x17e>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f10d 090c 	add.w	r9, sp, #12
 8001bfc:	220d      	movs	r2, #13
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f8cd 9000 	str.w	r9, [sp]
 8001c04:	4628      	mov	r0, r5
 8001c06:	f7ff faa5 	bl	8001154 <_Unwind_VRS_Get>
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	f7ff fea0 	bl	8001950 <next_unwind_byte>
 8001c10:	0602      	lsls	r2, r0, #24
 8001c12:	f04f 0402 	mov.w	r4, #2
 8001c16:	d50c      	bpl.n	8001c32 <__gnu_unwind_execute+0x28a>
 8001c18:	9b03      	ldr	r3, [sp, #12]
 8001c1a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001c1e:	40a0      	lsls	r0, r4
 8001c20:	4418      	add	r0, r3
 8001c22:	9003      	str	r0, [sp, #12]
 8001c24:	4630      	mov	r0, r6
 8001c26:	f7ff fe93 	bl	8001950 <next_unwind_byte>
 8001c2a:	0603      	lsls	r3, r0, #24
 8001c2c:	f104 0407 	add.w	r4, r4, #7
 8001c30:	d4f2      	bmi.n	8001c18 <__gnu_unwind_execute+0x270>
 8001c32:	9b03      	ldr	r3, [sp, #12]
 8001c34:	f8cd 9000 	str.w	r9, [sp]
 8001c38:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001c3c:	40a2      	lsls	r2, r4
 8001c3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c42:	441a      	add	r2, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	9203      	str	r2, [sp, #12]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	220d      	movs	r2, #13
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f7ff faa7 	bl	80011a0 <_Unwind_VRS_Set>
 8001c52:	e6b0      	b.n	80019b6 <__gnu_unwind_execute+0xe>

08001c54 <__gnu_unwind_frame>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001c58:	6853      	ldr	r3, [r2, #4]
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	f04f 0c03 	mov.w	ip, #3
 8001c60:	3208      	adds	r2, #8
 8001c62:	021c      	lsls	r4, r3, #8
 8001c64:	4608      	mov	r0, r1
 8001c66:	0e1b      	lsrs	r3, r3, #24
 8001c68:	a901      	add	r1, sp, #4
 8001c6a:	9401      	str	r4, [sp, #4]
 8001c6c:	9202      	str	r2, [sp, #8]
 8001c6e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001c72:	f88d 300d 	strb.w	r3, [sp, #13]
 8001c76:	f7ff fe97 	bl	80019a8 <__gnu_unwind_execute>
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd10      	pop	{r4, pc}
 8001c7e:	bf00      	nop

08001c80 <_Unwind_GetRegionStart>:
 8001c80:	b508      	push	{r3, lr}
 8001c82:	f7ff fe8f 	bl	80019a4 <unwind_UCB_from_context>
 8001c86:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001c88:	bd08      	pop	{r3, pc}
 8001c8a:	bf00      	nop

08001c8c <_Unwind_GetLanguageSpecificData>:
 8001c8c:	b508      	push	{r3, lr}
 8001c8e:	f7ff fe89 	bl	80019a4 <unwind_UCB_from_context>
 8001c92:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001c94:	79c3      	ldrb	r3, [r0, #7]
 8001c96:	3302      	adds	r3, #2
 8001c98:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c9c:	bd08      	pop	{r3, pc}
 8001c9e:	bf00      	nop

08001ca0 <__aeabi_idiv0>:
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <memcpy>:
 8001ca4:	4684      	mov	ip, r0
 8001ca6:	ea41 0300 	orr.w	r3, r1, r0
 8001caa:	f013 0303 	ands.w	r3, r3, #3
 8001cae:	d16d      	bne.n	8001d8c <memcpy+0xe8>
 8001cb0:	3a40      	subs	r2, #64	; 0x40
 8001cb2:	d341      	bcc.n	8001d38 <memcpy+0x94>
 8001cb4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cb8:	f840 3b04 	str.w	r3, [r0], #4
 8001cbc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cc0:	f840 3b04 	str.w	r3, [r0], #4
 8001cc4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cc8:	f840 3b04 	str.w	r3, [r0], #4
 8001ccc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cd0:	f840 3b04 	str.w	r3, [r0], #4
 8001cd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cd8:	f840 3b04 	str.w	r3, [r0], #4
 8001cdc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ce0:	f840 3b04 	str.w	r3, [r0], #4
 8001ce4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001ce8:	f840 3b04 	str.w	r3, [r0], #4
 8001cec:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cf0:	f840 3b04 	str.w	r3, [r0], #4
 8001cf4:	f851 3b04 	ldr.w	r3, [r1], #4
 8001cf8:	f840 3b04 	str.w	r3, [r0], #4
 8001cfc:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d00:	f840 3b04 	str.w	r3, [r0], #4
 8001d04:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d08:	f840 3b04 	str.w	r3, [r0], #4
 8001d0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d10:	f840 3b04 	str.w	r3, [r0], #4
 8001d14:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d18:	f840 3b04 	str.w	r3, [r0], #4
 8001d1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d20:	f840 3b04 	str.w	r3, [r0], #4
 8001d24:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d28:	f840 3b04 	str.w	r3, [r0], #4
 8001d2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d30:	f840 3b04 	str.w	r3, [r0], #4
 8001d34:	3a40      	subs	r2, #64	; 0x40
 8001d36:	d2bd      	bcs.n	8001cb4 <memcpy+0x10>
 8001d38:	3230      	adds	r2, #48	; 0x30
 8001d3a:	d311      	bcc.n	8001d60 <memcpy+0xbc>
 8001d3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d40:	f840 3b04 	str.w	r3, [r0], #4
 8001d44:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d48:	f840 3b04 	str.w	r3, [r0], #4
 8001d4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d50:	f840 3b04 	str.w	r3, [r0], #4
 8001d54:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d58:	f840 3b04 	str.w	r3, [r0], #4
 8001d5c:	3a10      	subs	r2, #16
 8001d5e:	d2ed      	bcs.n	8001d3c <memcpy+0x98>
 8001d60:	320c      	adds	r2, #12
 8001d62:	d305      	bcc.n	8001d70 <memcpy+0xcc>
 8001d64:	f851 3b04 	ldr.w	r3, [r1], #4
 8001d68:	f840 3b04 	str.w	r3, [r0], #4
 8001d6c:	3a04      	subs	r2, #4
 8001d6e:	d2f9      	bcs.n	8001d64 <memcpy+0xc0>
 8001d70:	3204      	adds	r2, #4
 8001d72:	d008      	beq.n	8001d86 <memcpy+0xe2>
 8001d74:	07d2      	lsls	r2, r2, #31
 8001d76:	bf1c      	itt	ne
 8001d78:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001d7c:	f800 3b01 	strbne.w	r3, [r0], #1
 8001d80:	d301      	bcc.n	8001d86 <memcpy+0xe2>
 8001d82:	880b      	ldrh	r3, [r1, #0]
 8001d84:	8003      	strh	r3, [r0, #0]
 8001d86:	4660      	mov	r0, ip
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	2a08      	cmp	r2, #8
 8001d8e:	d313      	bcc.n	8001db8 <memcpy+0x114>
 8001d90:	078b      	lsls	r3, r1, #30
 8001d92:	d08d      	beq.n	8001cb0 <memcpy+0xc>
 8001d94:	f010 0303 	ands.w	r3, r0, #3
 8001d98:	d08a      	beq.n	8001cb0 <memcpy+0xc>
 8001d9a:	f1c3 0304 	rsb	r3, r3, #4
 8001d9e:	1ad2      	subs	r2, r2, r3
 8001da0:	07db      	lsls	r3, r3, #31
 8001da2:	bf1c      	itt	ne
 8001da4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001da8:	f800 3b01 	strbne.w	r3, [r0], #1
 8001dac:	d380      	bcc.n	8001cb0 <memcpy+0xc>
 8001dae:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001db2:	f820 3b02 	strh.w	r3, [r0], #2
 8001db6:	e77b      	b.n	8001cb0 <memcpy+0xc>
 8001db8:	3a04      	subs	r2, #4
 8001dba:	d3d9      	bcc.n	8001d70 <memcpy+0xcc>
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc2:	f800 3b01 	strb.w	r3, [r0], #1
 8001dc6:	d2f9      	bcs.n	8001dbc <memcpy+0x118>
 8001dc8:	780b      	ldrb	r3, [r1, #0]
 8001dca:	7003      	strb	r3, [r0, #0]
 8001dcc:	784b      	ldrb	r3, [r1, #1]
 8001dce:	7043      	strb	r3, [r0, #1]
 8001dd0:	788b      	ldrb	r3, [r1, #2]
 8001dd2:	7083      	strb	r3, [r0, #2]
 8001dd4:	4660      	mov	r0, ip
 8001dd6:	4770      	bx	lr

08001dd8 <__libc_init_array>:
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4e0d      	ldr	r6, [pc, #52]	; (8001e10 <__libc_init_array+0x38>)
 8001ddc:	4d0d      	ldr	r5, [pc, #52]	; (8001e14 <__libc_init_array+0x3c>)
 8001dde:	1b76      	subs	r6, r6, r5
 8001de0:	10b6      	asrs	r6, r6, #2
 8001de2:	d006      	beq.n	8001df2 <__libc_init_array+0x1a>
 8001de4:	2400      	movs	r4, #0
 8001de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dea:	3401      	adds	r4, #1
 8001dec:	4798      	blx	r3
 8001dee:	42a6      	cmp	r6, r4
 8001df0:	d1f9      	bne.n	8001de6 <__libc_init_array+0xe>
 8001df2:	4e09      	ldr	r6, [pc, #36]	; (8001e18 <__libc_init_array+0x40>)
 8001df4:	4d09      	ldr	r5, [pc, #36]	; (8001e1c <__libc_init_array+0x44>)
 8001df6:	1b76      	subs	r6, r6, r5
 8001df8:	f002 fad0 	bl	800439c <_init>
 8001dfc:	10b6      	asrs	r6, r6, #2
 8001dfe:	d006      	beq.n	8001e0e <__libc_init_array+0x36>
 8001e00:	2400      	movs	r4, #0
 8001e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e06:	3401      	adds	r4, #1
 8001e08:	4798      	blx	r3
 8001e0a:	42a6      	cmp	r6, r4
 8001e0c:	d1f9      	bne.n	8001e02 <__libc_init_array+0x2a>
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	080049d0 	.word	0x080049d0
 8001e14:	080049d0 	.word	0x080049d0
 8001e18:	080049d8 	.word	0x080049d8
 8001e1c:	080049d0 	.word	0x080049d0

08001e20 <memset>:
 8001e20:	0783      	lsls	r3, r0, #30
 8001e22:	b530      	push	{r4, r5, lr}
 8001e24:	d048      	beq.n	8001eb8 <memset+0x98>
 8001e26:	1e54      	subs	r4, r2, #1
 8001e28:	2a00      	cmp	r2, #0
 8001e2a:	d03f      	beq.n	8001eac <memset+0x8c>
 8001e2c:	b2ca      	uxtb	r2, r1
 8001e2e:	4603      	mov	r3, r0
 8001e30:	e001      	b.n	8001e36 <memset+0x16>
 8001e32:	3c01      	subs	r4, #1
 8001e34:	d33a      	bcc.n	8001eac <memset+0x8c>
 8001e36:	f803 2b01 	strb.w	r2, [r3], #1
 8001e3a:	079d      	lsls	r5, r3, #30
 8001e3c:	d1f9      	bne.n	8001e32 <memset+0x12>
 8001e3e:	2c03      	cmp	r4, #3
 8001e40:	d92d      	bls.n	8001e9e <memset+0x7e>
 8001e42:	b2cd      	uxtb	r5, r1
 8001e44:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001e4e:	d936      	bls.n	8001ebe <memset+0x9e>
 8001e50:	f1a4 0210 	sub.w	r2, r4, #16
 8001e54:	f022 0c0f 	bic.w	ip, r2, #15
 8001e58:	f103 0e20 	add.w	lr, r3, #32
 8001e5c:	44e6      	add	lr, ip
 8001e5e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 8001e62:	f103 0210 	add.w	r2, r3, #16
 8001e66:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001e6a:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001e6e:	3210      	adds	r2, #16
 8001e70:	4572      	cmp	r2, lr
 8001e72:	d1f8      	bne.n	8001e66 <memset+0x46>
 8001e74:	f10c 0201 	add.w	r2, ip, #1
 8001e78:	f014 0f0c 	tst.w	r4, #12
 8001e7c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001e80:	f004 0c0f 	and.w	ip, r4, #15
 8001e84:	d013      	beq.n	8001eae <memset+0x8e>
 8001e86:	f1ac 0304 	sub.w	r3, ip, #4
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4413      	add	r3, r2
 8001e92:	f842 5b04 	str.w	r5, [r2], #4
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d1fb      	bne.n	8001e92 <memset+0x72>
 8001e9a:	f00c 0403 	and.w	r4, ip, #3
 8001e9e:	b12c      	cbz	r4, 8001eac <memset+0x8c>
 8001ea0:	b2ca      	uxtb	r2, r1
 8001ea2:	441c      	add	r4, r3
 8001ea4:	f803 2b01 	strb.w	r2, [r3], #1
 8001ea8:	429c      	cmp	r4, r3
 8001eaa:	d1fb      	bne.n	8001ea4 <memset+0x84>
 8001eac:	bd30      	pop	{r4, r5, pc}
 8001eae:	4664      	mov	r4, ip
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	2c00      	cmp	r4, #0
 8001eb4:	d1f4      	bne.n	8001ea0 <memset+0x80>
 8001eb6:	e7f9      	b.n	8001eac <memset+0x8c>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4614      	mov	r4, r2
 8001ebc:	e7bf      	b.n	8001e3e <memset+0x1e>
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	46a4      	mov	ip, r4
 8001ec2:	e7e0      	b.n	8001e86 <memset+0x66>

08001ec4 <register_fini>:
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <register_fini+0xc>)
 8001ec6:	b113      	cbz	r3, 8001ece <register_fini+0xa>
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <register_fini+0x10>)
 8001eca:	f000 b805 	b.w	8001ed8 <atexit>
 8001ece:	4770      	bx	lr
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	08001ee5 	.word	0x08001ee5

08001ed8 <atexit>:
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4601      	mov	r1, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 b81a 	b.w	8001f18 <__register_exitproc>

08001ee4 <__libc_fini_array>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <__libc_fini_array+0x24>)
 8001ee8:	4d08      	ldr	r5, [pc, #32]	; (8001f0c <__libc_fini_array+0x28>)
 8001eea:	1b5b      	subs	r3, r3, r5
 8001eec:	109c      	asrs	r4, r3, #2
 8001eee:	d007      	beq.n	8001f00 <__libc_fini_array+0x1c>
 8001ef0:	3b04      	subs	r3, #4
 8001ef2:	441d      	add	r5, r3
 8001ef4:	3c01      	subs	r4, #1
 8001ef6:	f855 3904 	ldr.w	r3, [r5], #-4
 8001efa:	4798      	blx	r3
 8001efc:	2c00      	cmp	r4, #0
 8001efe:	d1f9      	bne.n	8001ef4 <__libc_fini_array+0x10>
 8001f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f04:	f002 ba50 	b.w	80043a8 <_fini>
 8001f08:	080049dc 	.word	0x080049dc
 8001f0c:	080049d8 	.word	0x080049d8

08001f10 <__retarget_lock_acquire_recursive>:
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop

08001f14 <__retarget_lock_release_recursive>:
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <__register_exitproc>:
 8001f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f1c:	f8df a080 	ldr.w	sl, [pc, #128]	; 8001fa0 <__register_exitproc+0x88>
 8001f20:	4606      	mov	r6, r0
 8001f22:	f8da 0000 	ldr.w	r0, [sl]
 8001f26:	4698      	mov	r8, r3
 8001f28:	460f      	mov	r7, r1
 8001f2a:	4691      	mov	r9, r2
 8001f2c:	f7ff fff0 	bl	8001f10 <__retarget_lock_acquire_recursive>
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <__register_exitproc+0x84>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8001f38:	b324      	cbz	r4, 8001f84 <__register_exitproc+0x6c>
 8001f3a:	6865      	ldr	r5, [r4, #4]
 8001f3c:	2d1f      	cmp	r5, #31
 8001f3e:	dc26      	bgt.n	8001f8e <__register_exitproc+0x76>
 8001f40:	b95e      	cbnz	r6, 8001f5a <__register_exitproc+0x42>
 8001f42:	1c6b      	adds	r3, r5, #1
 8001f44:	3502      	adds	r5, #2
 8001f46:	f8da 0000 	ldr.w	r0, [sl]
 8001f4a:	6063      	str	r3, [r4, #4]
 8001f4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8001f50:	f7ff ffe0 	bl	8001f14 <__retarget_lock_release_recursive>
 8001f54:	2000      	movs	r0, #0
 8001f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8001f64:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001f68:	40ab      	lsls	r3, r5
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	2e02      	cmp	r6, #2
 8001f6e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8001f72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8001f76:	d1e4      	bne.n	8001f42 <__register_exitproc+0x2a>
 8001f78:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8001f82:	e7de      	b.n	8001f42 <__register_exitproc+0x2a>
 8001f84:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8001f88:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8001f8c:	e7d5      	b.n	8001f3a <__register_exitproc+0x22>
 8001f8e:	f8da 0000 	ldr.w	r0, [sl]
 8001f92:	f7ff ffbf 	bl	8001f14 <__retarget_lock_release_recursive>
 8001f96:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9a:	e7dc      	b.n	8001f56 <__register_exitproc+0x3e>
 8001f9c:	080043d0 	.word	0x080043d0
 8001fa0:	20000430 	.word	0x20000430

08001fa4 <NMI_Handler>:
    \brief      this function handles NMI exception
    \param[in]  none
    \param[out] none
    \retval     none
*/
void NMI_Handler(void) {}
 8001fa4:	4770      	bx	lr

08001fa6 <HardFault_Handler>:
    \param[out] none
    \retval     none
*/
void HardFault_Handler(void) {
    /* if Hard Fault exception occurs, go to infinite loop */
    while (1) {
 8001fa6:	e7fe      	b.n	8001fa6 <HardFault_Handler>

08001fa8 <MemManage_Handler>:
    \param[out] none
    \retval     none
*/
void MemManage_Handler(void) {
    /* if Memory Manage exception occurs, go to infinite loop */
    while (1) {
 8001fa8:	e7fe      	b.n	8001fa8 <MemManage_Handler>

08001faa <BusFault_Handler>:
    \param[out] none
    \retval     none
*/
void BusFault_Handler(void) {
    /* if Bus Fault exception occurs, go to infinite loop */
    while (1) {
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler>

08001fac <UsageFault_Handler>:
    \param[out] none
    \retval     none
*/
void UsageFault_Handler(void) {
    /* if Usage Fault exception occurs, go to infinite loop */
    while (1) {
 8001fac:	e7fe      	b.n	8001fac <UsageFault_Handler>

08001fae <SVC_Handler>:
    \brief      this function handles SVC exception
    \param[in]  none
    \param[out] none
    \retval     none
*/
void SVC_Handler(void) {}
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:
    \brief      this function handles DebugMon exception
    \param[in]  none
    \param[out] none
    \retval     none
*/
void DebugMon_Handler(void) {}
 8001fb0:	4770      	bx	lr

08001fb2 <PendSV_Handler>:
    \brief      this function handles PendSV exception
    \param[in]  none
    \param[out] none
    \retval     none
*/
void PendSV_Handler(void) {}
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:
    \brief      this function handles SysTick exception
    \param[in]  none
    \param[out] none
    \retval     none
*/
void SysTick_Handler(void) { systick_high_carry(); }
 8001fb4:	b508      	push	{r3, lr}
 8001fb6:	f000 f821 	bl	8001ffc <systick_high_carry>
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <main>:
    \param[in]  none
    \param[out] none
    \retval     none
*/

int main(void) {
 8001fbc:	b508      	push	{r3, lr}
    systick_config();
 8001fbe:	f000 f809 	bl	8001fd4 <systick_config>

    Usartx_Init();
 8001fc2:	f000 f9af 	bl	8002324 <Usartx_Init>
    SEGGER_RTT_Init();
 8001fc6:	f002 f953 	bl	8004270 <SEGGER_RTT_Init>

    uart_test();
 8001fca:	f000 f885 	bl	80020d8 <uart_test>
}
 8001fce:	2000      	movs	r0, #0
 8001fd0:	bd08      	pop	{r3, pc}
	...

08001fd4 <systick_config>:
{
    if((ticks - 1) > SysTick_LOAD_RELOAD_Msk) {
        return (1);    /* Reload value impossible */
    }

    SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8001fd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001fd8:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <systick_config+0x20>)
 8001fda:	615a      	str	r2, [r3, #20]
        SCB->SHP[((uint32_t)(IRQn) & 0xF) - 4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <systick_config+0x24>)
 8001fde:	21f0      	movs	r1, #240	; 0xf0
 8001fe0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1); /* set Priority for Systick Interrupt */
    SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	6199      	str	r1, [r3, #24]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe8:	2007      	movs	r0, #7
 8001fea:	6118      	str	r0, [r3, #16]
        SCB->SHP[((uint32_t)(IRQn) & 0xF) - 4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);
 8001fec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
        while (1) {
        }
    }
    /* configure the systick handler priority */
    NVIC_SetPriority(SysTick_IRQn, 0x00U);
}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	00fffffe 	.word	0x00fffffe
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <systick_high_carry>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void systick_high_carry(void) {
    systick_31_24 += 0x01000000;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <systick_high_carry+0x28>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
 8002004:	601a      	str	r2, [r3, #0]
    if (systick_31_24) {
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b15b      	cbz	r3, 8002022 <systick_high_carry+0x26>
void systick_high_carry(void) {
 800200a:	b410      	push	{r4}
        systick_64_32++;
 800200c:	4c06      	ldr	r4, [pc, #24]	; (8002028 <systick_high_carry+0x2c>)
 800200e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002012:	1c50      	adds	r0, r2, #1
 8002014:	f143 0100 	adc.w	r1, r3, #0
 8002018:	e9c4 0100 	strd	r0, r1, [r4]
    }
}
 800201c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	4770      	bx	lr
 8002024:	20000490 	.word	0x20000490
 8002028:	20000498 	.word	0x20000498

0800202c <Get_Tick>:

uint32_t Get_Tick(void) { return systick_31_24 + (~SysTick->VAL); }
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <Get_Tick+0x10>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	1ac0      	subs	r0, r0, r3
 8002038:	3801      	subs	r0, #1
 800203a:	4770      	bx	lr
 800203c:	20000490 	.word	0x20000490

08002040 <delay_tick>:
void delay_tick(uint32_t delay) {
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4605      	mov	r5, r0
    uint32_t start_tick = systick_31_24 + (~SysTick->VAL);
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <delay_tick+0x20>)
 8002046:	681c      	ldr	r4, [r3, #0]
 8002048:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	1ae4      	subs	r4, r4, r3
 8002050:	3c01      	subs	r4, #1
    while (Get_Tick() - start_tick < delay) {
 8002052:	f7ff ffeb 	bl	800202c <Get_Tick>
 8002056:	1b00      	subs	r0, r0, r4
 8002058:	42a8      	cmp	r0, r5
 800205a:	d3fa      	bcc.n	8002052 <delay_tick+0x12>
}
 800205c:	bd38      	pop	{r3, r4, r5, pc}
 800205e:	bf00      	nop
 8002060:	20000490 	.word	0x20000490

08002064 <delay_ms>:
void delay_ms(uint32_t count) {
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	4605      	mov	r5, r0
    for (int i = 0; i < count; i++) {
 8002068:	2400      	movs	r4, #0
 800206a:	e009      	b.n	8002080 <delay_ms+0x1c>
        delay_tick(SystemCoreClock / 1000 - 3);
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <delay_ms+0x24>)
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <delay_ms+0x28>)
 8002072:	fba3 3000 	umull	r3, r0, r3, r0
 8002076:	0980      	lsrs	r0, r0, #6
 8002078:	3803      	subs	r0, #3
 800207a:	f7ff ffe1 	bl	8002040 <delay_tick>
    for (int i = 0; i < count; i++) {
 800207e:	3401      	adds	r4, #1
 8002080:	42ac      	cmp	r4, r5
 8002082:	d3f3      	bcc.n	800206c <delay_ms+0x8>
}
 8002084:	bd38      	pop	{r3, r4, r5, pc}
 8002086:	bf00      	nop
 8002088:	2000046c 	.word	0x2000046c
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <RTT_test>:
static char str0[] = "Uart test\r\n";
static char str1[] = "Control uart transmission by register mode\r\n";
static char str2[] = "Send data from uart by printf function\r\n";
static char buf[128];

void RTT_test() {
 8002090:	b510      	push	{r4, lr}
    static uint8_t init_flag = 0;
    // 初始化SEGGER RTT
    if (!init_flag) {
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <RTT_test+0x3c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b12b      	cbz	r3, 80020a4 <RTT_test+0x14>
        SEGGER_RTT_Init();
        init_flag = 1;
    }

    SEGGER_RTT_printf(0, "Here is Segger RTT default channel\r\n");
 8002098:	490d      	ldr	r1, [pc, #52]	; (80020d0 <RTT_test+0x40>)
 800209a:	2000      	movs	r0, #0
 800209c:	f001 ffe6 	bl	800406c <SEGGER_RTT_printf>
    for (int i = 0; i < 5; i++) {
 80020a0:	2400      	movs	r4, #0
 80020a2:	e00f      	b.n	80020c4 <RTT_test+0x34>
        SEGGER_RTT_Init();
 80020a4:	f002 f8e4 	bl	8004270 <SEGGER_RTT_Init>
        init_flag = 1;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <RTT_test+0x3c>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e7f3      	b.n	8002098 <RTT_test+0x8>
        delay_ms(1000);
 80020b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b4:	f7ff ffd6 	bl	8002064 <delay_ms>
        SEGGER_RTT_printf(0, "Second %d\r\n", i);
 80020b8:	4622      	mov	r2, r4
 80020ba:	4906      	ldr	r1, [pc, #24]	; (80020d4 <RTT_test+0x44>)
 80020bc:	2000      	movs	r0, #0
 80020be:	f001 ffd5 	bl	800406c <SEGGER_RTT_printf>
    for (int i = 0; i < 5; i++) {
 80020c2:	3401      	adds	r4, #1
 80020c4:	2c04      	cmp	r4, #4
 80020c6:	ddf3      	ble.n	80020b0 <RTT_test+0x20>
    }
}
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	bf00      	nop
 80020cc:	20000521 	.word	0x20000521
 80020d0:	080043d4 	.word	0x080043d4
 80020d4:	080043fc 	.word	0x080043fc

080020d8 <uart_test>:

void uart_test() {
 80020d8:	b510      	push	{r4, lr}
 80020da:	b082      	sub	sp, #8
    static uint8_t init_flag = 0;
    // 初始化uart
    if (!init_flag) {
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <uart_test+0xac>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b12b      	cbz	r3, 80020ee <uart_test+0x16>
        Usartx_Init();
        init_flag = 1;
    }

    LOG("%s", str0);
 80020e2:	4929      	ldr	r1, [pc, #164]	; (8002188 <uart_test+0xb0>)
 80020e4:	4829      	ldr	r0, [pc, #164]	; (800218c <uart_test+0xb4>)
 80020e6:	f001 fd9d 	bl	8003c24 <printf_>

    for (int i = 0; i < sizeof(str1) - 1; i++) {
 80020ea:	2400      	movs	r4, #0
 80020ec:	e013      	b.n	8002116 <uart_test+0x3e>
        Usartx_Init();
 80020ee:	f000 f919 	bl	8002324 <Usartx_Init>
        init_flag = 1;
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <uart_test+0xac>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e7f3      	b.n	80020e2 <uart_test+0xa>
        while (RESET == usart_flag_get(USART1, USART_FLAG_TBE))
 80020fa:	f240 7107 	movw	r1, #1799	; 0x707
 80020fe:	4824      	ldr	r0, [pc, #144]	; (8002190 <uart_test+0xb8>)
 8002100:	f000 fda9 	bl	8002c56 <usart_flag_get>
 8002104:	2800      	cmp	r0, #0
 8002106:	d0f8      	beq.n	80020fa <uart_test+0x22>
            ;
        USART_TDATA(USART1) = (uint32_t)str1[i];
 8002108:	4b22      	ldr	r3, [pc, #136]	; (8002194 <uart_test+0xbc>)
 800210a:	5d1a      	ldrb	r2, [r3, r4]
 800210c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002110:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    for (int i = 0; i < sizeof(str1) - 1; i++) {
 8002114:	3401      	adds	r4, #1
 8002116:	2c2b      	cmp	r4, #43	; 0x2b
 8002118:	d9ef      	bls.n	80020fa <uart_test+0x22>
    }

    printf("%s", str2);
 800211a:	491f      	ldr	r1, [pc, #124]	; (8002198 <uart_test+0xc0>)
 800211c:	481f      	ldr	r0, [pc, #124]	; (800219c <uart_test+0xc4>)
 800211e:	f001 fd81 	bl	8003c24 <printf_>
    ERROR("error output test");
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <uart_test+0xc8>)
 8002124:	2230      	movs	r2, #48	; 0x30
 8002126:	491f      	ldr	r1, [pc, #124]	; (80021a4 <uart_test+0xcc>)
 8002128:	481f      	ldr	r0, [pc, #124]	; (80021a8 <uart_test+0xd0>)
 800212a:	f001 fd7b 	bl	8003c24 <printf_>

    LOG("\r\nSerial port receiving test, sending messages to the serial port of the "
 800212e:	481f      	ldr	r0, [pc, #124]	; (80021ac <uart_test+0xd4>)
 8002130:	f001 fd78 	bl	8003c24 <printf_>
        "microcontroller, "
        "and the serial port returns messages.");
    LOG("\r\nThe format of the message returned by the serial port is as follows:");
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <uart_test+0xd8>)
 8002136:	f001 fd75 	bl	8003c24 <printf_>
    LOG("\r\nuart received message:\r\n%s\r\n----- END -----", "[The message you send]");
 800213a:	491e      	ldr	r1, [pc, #120]	; (80021b4 <uart_test+0xdc>)
 800213c:	481e      	ldr	r0, [pc, #120]	; (80021b8 <uart_test+0xe0>)
 800213e:	f001 fd71 	bl	8003c24 <printf_>
    UART_Receive_DMA(buf, 128);
 8002142:	2180      	movs	r1, #128	; 0x80
 8002144:	481d      	ldr	r0, [pc, #116]	; (80021bc <uart_test+0xe4>)
 8002146:	f000 f901 	bl	800234c <UART_Receive_DMA>
    char* rx_str;
    uint32_t rx_size;
    while (1) {
        if (!USART1_Get_Rx(&rx_str, &rx_size)) {
 800214a:	4669      	mov	r1, sp
 800214c:	a801      	add	r0, sp, #4
 800214e:	f000 f953 	bl	80023f8 <USART1_Get_Rx>
 8002152:	2800      	cmp	r0, #0
 8002154:	d1f9      	bne.n	800214a <uart_test+0x72>
            LOG("uart received message:\r\n%s\r\n----- END -----", rx_str);
 8002156:	9901      	ldr	r1, [sp, #4]
 8002158:	4819      	ldr	r0, [pc, #100]	; (80021c0 <uart_test+0xe8>)
 800215a:	f001 fd63 	bl	8003c24 <printf_>
            if (rx_size >= 8 && !memcmp(rx_str, "RTT test", 8)) {
 800215e:	9b00      	ldr	r3, [sp, #0]
 8002160:	2b07      	cmp	r3, #7
 8002162:	d9f2      	bls.n	800214a <uart_test+0x72>
 8002164:	2208      	movs	r2, #8
 8002166:	4917      	ldr	r1, [pc, #92]	; (80021c4 <uart_test+0xec>)
 8002168:	9801      	ldr	r0, [sp, #4]
 800216a:	f002 f88d 	bl	8004288 <memcmp>
 800216e:	2800      	cmp	r0, #0
 8002170:	d1eb      	bne.n	800214a <uart_test+0x72>
                LOG("RTT_test start.");
 8002172:	4815      	ldr	r0, [pc, #84]	; (80021c8 <uart_test+0xf0>)
 8002174:	f001 fd56 	bl	8003c24 <printf_>
                RTT_test();
 8002178:	f7ff ff8a 	bl	8002090 <RTT_test>
                LOG("RTT_test end.");
 800217c:	4813      	ldr	r0, [pc, #76]	; (80021cc <uart_test+0xf4>)
 800217e:	f001 fd51 	bl	8003c24 <printf_>
 8002182:	e7e2      	b.n	800214a <uart_test+0x72>
 8002184:	20000520 	.word	0x20000520
 8002188:	20000434 	.word	0x20000434
 800218c:	08004408 	.word	0x08004408
 8002190:	40004400 	.word	0x40004400
 8002194:	08004608 	.word	0x08004608
 8002198:	20000440 	.word	0x20000440
 800219c:	08004410 	.word	0x08004410
 80021a0:	080045fc 	.word	0x080045fc
 80021a4:	08004414 	.word	0x08004414
 80021a8:	08004450 	.word	0x08004450
 80021ac:	08004484 	.word	0x08004484
 80021b0:	08004508 	.word	0x08004508
 80021b4:	08004554 	.word	0x08004554
 80021b8:	0800456c 	.word	0x0800456c
 80021bc:	200004a0 	.word	0x200004a0
 80021c0:	0800459c 	.word	0x0800459c
 80021c4:	080045cc 	.word	0x080045cc
 80021c8:	080045d8 	.word	0x080045d8
 80021cc:	080045ec 	.word	0x080045ec

080021d0 <usart1_dma_config>:
    usart_dma_receive_config(USART1, USART_DENR_ENABLE);

    usart_enable(USART1);
}

static void usart1_dma_config() {
 80021d0:	b530      	push	{r4, r5, lr}
 80021d2:	b089      	sub	sp, #36	; 0x24
    dma_parameter_struct dma_init_struct;
    rcu_periph_clock_enable(RCU_DMA);
 80021d4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80021d8:	f000 fbbe 	bl	8002958 <rcu_periph_clock_enable>

    dma_deinit(USART1_DMA_TX_CHx);
 80021dc:	2003      	movs	r0, #3
 80021de:	f000 fa41 	bl	8002664 <dma_deinit>

    dma_struct_para_init(&dma_init_struct);
 80021e2:	4668      	mov	r0, sp
 80021e4:	f000 fa5a 	bl	800269c <dma_struct_para_init>
    dma_init_struct.direction = DMA_MEMORY_TO_PERIPHERAL;
 80021e8:	2501      	movs	r5, #1
 80021ea:	f88d 5015 	strb.w	r5, [sp, #21]
    dma_init_struct.memory_addr = 0;
 80021ee:	2400      	movs	r4, #0
 80021f0:	9403      	str	r4, [sp, #12]
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
 80021f2:	f88d 5014 	strb.w	r5, [sp, #20]
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 80021f6:	9404      	str	r4, [sp, #16]
    dma_init_struct.number = 0;
 80021f8:	9406      	str	r4, [sp, #24]
    dma_init_struct.periph_addr = (uint32_t)&USART_TDATA(USART1);
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <usart1_dma_config+0x90>)
 80021fc:	9300      	str	r3, [sp, #0]
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 80021fe:	f88d 4008 	strb.w	r4, [sp, #8]
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8002202:	9401      	str	r4, [sp, #4]
    dma_init_struct.priority = DMA_PRIORITY_HIGH;
 8002204:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002208:	9307      	str	r3, [sp, #28]
    dma_init(USART1_DMA_TX_CHx, &dma_init_struct);
 800220a:	4669      	mov	r1, sp
 800220c:	2003      	movs	r0, #3
 800220e:	f000 fa77 	bl	8002700 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(USART1_DMA_TX_CHx);
 8002212:	2003      	movs	r0, #3
 8002214:	f000 fa4c 	bl	80026b0 <dma_circulation_disable>
    dma_memory_to_memory_disable(USART1_DMA_TX_CHx);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 fa53 	bl	80026c4 <dma_memory_to_memory_disable>
    /* enable DMA channel1 */
    dma_channel_disable(USART1_DMA_TX_CHx);
 800221e:	2003      	movs	r0, #3
 8002220:	f000 fa64 	bl	80026ec <dma_channel_disable>

    /*设置接收DMA*/
    dma_struct_para_init(&dma_init_struct);
 8002224:	4668      	mov	r0, sp
 8002226:	f000 fa39 	bl	800269c <dma_struct_para_init>
    dma_init_struct.direction = DMA_PERIPHERAL_TO_MEMORY;
 800222a:	f88d 4015 	strb.w	r4, [sp, #21]
    dma_init_struct.memory_addr = 0;
 800222e:	9403      	str	r4, [sp, #12]
    dma_init_struct.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
 8002230:	f88d 5014 	strb.w	r5, [sp, #20]
    dma_init_struct.memory_width = DMA_MEMORY_WIDTH_8BIT;
 8002234:	9404      	str	r4, [sp, #16]
    dma_init_struct.number = 0;
 8002236:	9406      	str	r4, [sp, #24]
    dma_init_struct.periph_addr = (uint32_t)&USART_RDATA(USART1);
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <usart1_dma_config+0x94>)
 800223a:	9300      	str	r3, [sp, #0]
    dma_init_struct.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
 800223c:	f88d 4008 	strb.w	r4, [sp, #8]
    dma_init_struct.periph_width = DMA_PERIPHERAL_WIDTH_8BIT;
 8002240:	9401      	str	r4, [sp, #4]
    dma_init_struct.priority = DMA_PRIORITY_ULTRA_HIGH;
 8002242:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002246:	9307      	str	r3, [sp, #28]
    dma_init(USART1_DMA_RX_CHx, &dma_init_struct);
 8002248:	4669      	mov	r1, sp
 800224a:	2004      	movs	r0, #4
 800224c:	f000 fa58 	bl	8002700 <dma_init>
    /* configure DMA mode */
    dma_circulation_disable(USART1_DMA_RX_CHx);
 8002250:	2004      	movs	r0, #4
 8002252:	f000 fa2d 	bl	80026b0 <dma_circulation_disable>
    /* enable DMA channel2 */
    dma_channel_enable(USART1_DMA_RX_CHx);
 8002256:	2004      	movs	r0, #4
 8002258:	f000 fa3e 	bl	80026d8 <dma_channel_enable>
}
 800225c:	b009      	add	sp, #36	; 0x24
 800225e:	bd30      	pop	{r4, r5, pc}
 8002260:	40004428 	.word	0x40004428
 8002264:	40004424 	.word	0x40004424

08002268 <usart1_gpio_config>:
void usart1_gpio_config(void) {
 8002268:	b508      	push	{r3, lr}
    rcu_periph_clock_enable(RCU_GPIOA);
 800226a:	f240 5011 	movw	r0, #1297	; 0x511
 800226e:	f000 fb73 	bl	8002958 <rcu_periph_clock_enable>
    gpio_af_set(GPIOA, GPIO_AF_1, GPIO_PIN_2);
 8002272:	2204      	movs	r2, #4
 8002274:	2101      	movs	r1, #1
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f000 faec 	bl	8002856 <gpio_af_set>
    gpio_af_set(GPIOA, GPIO_AF_1, GPIO_PIN_3);
 800227e:	2208      	movs	r2, #8
 8002280:	2101      	movs	r1, #1
 8002282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002286:	f000 fae6 	bl	8002856 <gpio_af_set>
    gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_2);
 800228a:	2304      	movs	r3, #4
 800228c:	2201      	movs	r2, #1
 800228e:	2102      	movs	r1, #2
 8002290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002294:	f000 fa86 	bl	80027a4 <gpio_mode_set>
    gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_10MHZ, GPIO_PIN_2);
 8002298:	2304      	movs	r3, #4
 800229a:	2201      	movs	r2, #1
 800229c:	2100      	movs	r1, #0
 800229e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a2:	f000 faa1 	bl	80027e8 <gpio_output_options_set>
    gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_3);
 80022a6:	2308      	movs	r3, #8
 80022a8:	2201      	movs	r2, #1
 80022aa:	2102      	movs	r1, #2
 80022ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b0:	f000 fa78 	bl	80027a4 <gpio_mode_set>
    gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_10MHZ, GPIO_PIN_3);
 80022b4:	2308      	movs	r3, #8
 80022b6:	2201      	movs	r2, #1
 80022b8:	2100      	movs	r1, #0
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f000 fa93 	bl	80027e8 <gpio_output_options_set>
}
 80022c2:	bd08      	pop	{r3, pc}

080022c4 <usart1_config>:
void usart1_config(void) {
 80022c4:	b510      	push	{r4, lr}
    rcu_periph_clock_enable(RCU_USART1);
 80022c6:	f240 7011 	movw	r0, #1809	; 0x711
 80022ca:	f000 fb45 	bl	8002958 <rcu_periph_clock_enable>
    usart_deinit(USART1);
 80022ce:	4c14      	ldr	r4, [pc, #80]	; (8002320 <usart1_config+0x5c>)
 80022d0:	4620      	mov	r0, r4
 80022d2:	f000 fc31 	bl	8002b38 <usart_deinit>
    usart_word_length_set(USART1, USART_WL_8BIT);
 80022d6:	2100      	movs	r1, #0
 80022d8:	4620      	mov	r0, r4
 80022da:	f000 fc7f 	bl	8002bdc <usart_word_length_set>
    usart_stop_bit_set(USART1, USART_STB_1BIT);
 80022de:	2100      	movs	r1, #0
 80022e0:	4620      	mov	r0, r4
 80022e2:	f000 fc87 	bl	8002bf4 <usart_stop_bit_set>
    usart_parity_config(USART1, USART_PM_NONE);
 80022e6:	2100      	movs	r1, #0
 80022e8:	4620      	mov	r0, r4
 80022ea:	f000 fc6b 	bl	8002bc4 <usart_parity_config>
    usart_baudrate_set(USART1, 115200);
 80022ee:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80022f2:	4620      	mov	r0, r4
 80022f4:	f000 fc3c 	bl	8002b70 <usart_baudrate_set>
    usart_receive_config(USART1, USART_RECEIVE_ENABLE);
 80022f8:	2104      	movs	r1, #4
 80022fa:	4620      	mov	r0, r4
 80022fc:	f000 fc93 	bl	8002c26 <usart_receive_config>
    usart_transmit_config(USART1, USART_TRANSMIT_ENABLE);
 8002300:	2108      	movs	r1, #8
 8002302:	4620      	mov	r0, r4
 8002304:	f000 fc87 	bl	8002c16 <usart_transmit_config>
    usart_dma_transmit_config(USART1, USART_DENT_ENABLE);
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	4620      	mov	r0, r4
 800230c:	f000 fc9b 	bl	8002c46 <usart_dma_transmit_config>
    usart_dma_receive_config(USART1, USART_DENR_ENABLE);
 8002310:	2140      	movs	r1, #64	; 0x40
 8002312:	4620      	mov	r0, r4
 8002314:	f000 fc8f 	bl	8002c36 <usart_dma_receive_config>
    usart_enable(USART1);
 8002318:	4620      	mov	r0, r4
 800231a:	f000 fc77 	bl	8002c0c <usart_enable>
}
 800231e:	bd10      	pop	{r4, pc}
 8002320:	40004400 	.word	0x40004400

08002324 <Usartx_Init>:
void Usartx_Init() {
 8002324:	b508      	push	{r3, lr}
    nvic_irq_enable(USART1_IRQn, 1, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	201c      	movs	r0, #28
 800232c:	f000 fac4 	bl	80028b8 <nvic_irq_enable>
    usart1_gpio_config();
 8002330:	f7ff ff9a 	bl	8002268 <usart1_gpio_config>
    usart1_config();
 8002334:	f7ff ffc6 	bl	80022c4 <usart1_config>
    usart1_dma_config();
 8002338:	f7ff ff4a 	bl	80021d0 <usart1_dma_config>

    usart_flag_clear(USART1, USART_FLAG_IDLE);
 800233c:	f240 7104 	movw	r1, #1796	; 0x704
 8002340:	4801      	ldr	r0, [pc, #4]	; (8002348 <Usartx_Init+0x24>)
 8002342:	f000 fc90 	bl	8002c66 <usart_flag_clear>
}
 8002346:	bd08      	pop	{r3, pc}
 8002348:	40004400 	.word	0x40004400

0800234c <UART_Receive_DMA>:
        while (RESET == dma_flag_get(USART1_DMA_TX_CHx, DMA_FLAG_FTF)) {
        }
    }
}

void UART_Receive_DMA(void* buf, uint32_t size) {
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4605      	mov	r5, r0
 8002350:	460c      	mov	r4, r1
    dma_channel_disable(USART1_DMA_RX_CHx);
 8002352:	2004      	movs	r0, #4
 8002354:	f000 f9ca 	bl	80026ec <dma_channel_disable>
    dma_transfer_number_config(USART1_DMA_RX_CHx, size);
 8002358:	4621      	mov	r1, r4
 800235a:	2004      	movs	r0, #4
 800235c:	f000 fa12 	bl	8002784 <dma_transfer_number_config>
    dma_memory_address_config(USART1_DMA_RX_CHx, (uint32_t)buf);
 8002360:	4629      	mov	r1, r5
 8002362:	2004      	movs	r0, #4
 8002364:	f000 fa06 	bl	8002774 <dma_memory_address_config>
    dma_channel_enable(USART1_DMA_RX_CHx);
 8002368:	2004      	movs	r0, #4
 800236a:	f000 f9b5 	bl	80026d8 <dma_channel_enable>
    usart_interrupt_flag_clear(USART1, USART_INT_FLAG_IDLE);
 800236e:	4d06      	ldr	r5, [pc, #24]	; (8002388 <UART_Receive_DMA+0x3c>)
 8002370:	4906      	ldr	r1, [pc, #24]	; (800238c <UART_Receive_DMA+0x40>)
 8002372:	4628      	mov	r0, r5
 8002374:	f000 fca2 	bl	8002cbc <usart_interrupt_flag_clear>
    usart_interrupt_enable(USART1, USART_INT_IDLE);
 8002378:	2104      	movs	r1, #4
 800237a:	4628      	mov	r0, r5
 800237c:	f000 fc7c 	bl	8002c78 <usart_interrupt_enable>

    rx_size = size;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <UART_Receive_DMA+0x44>)
 8002382:	601c      	str	r4, [r3, #0]
}
 8002384:	bd38      	pop	{r3, r4, r5, pc}
 8002386:	bf00      	nop
 8002388:	40004400 	.word	0x40004400
 800238c:	07040004 	.word	0x07040004
 8002390:	2000052c 	.word	0x2000052c

08002394 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8002394:	b570      	push	{r4, r5, r6, lr}
    // LOG("USART1_IRQHandler");
    if (RESET != usart_interrupt_flag_get(USART1, USART_INT_FLAG_IDLE)) {
 8002396:	4912      	ldr	r1, [pc, #72]	; (80023e0 <USART1_IRQHandler+0x4c>)
 8002398:	4812      	ldr	r0, [pc, #72]	; (80023e4 <USART1_IRQHandler+0x50>)
 800239a:	f000 fc78 	bl	8002c8e <usart_interrupt_flag_get>
 800239e:	b900      	cbnz	r0, 80023a2 <USART1_IRQHandler+0xe>
        /* disable DMA and reconfigure */
        dma_channel_disable(USART1_DMA_RX_CHx);
        dma_transfer_number_config(USART1_DMA_RX_CHx, rx_size);
        dma_channel_enable(USART1_DMA_RX_CHx);
    }
}
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
        usart_interrupt_flag_clear(USART1, USART_INT_FLAG_IDLE);
 80023a2:	490f      	ldr	r1, [pc, #60]	; (80023e0 <USART1_IRQHandler+0x4c>)
 80023a4:	480f      	ldr	r0, [pc, #60]	; (80023e4 <USART1_IRQHandler+0x50>)
 80023a6:	f000 fc89 	bl	8002cbc <usart_interrupt_flag_clear>
        s = (char*)DMA_CHMADDR(USART1_DMA_RX_CHx);
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <USART1_IRQHandler+0x54>)
 80023ac:	6e5e      	ldr	r6, [r3, #100]	; 0x64
        rx_count = rx_size - (dma_transfer_number_get(USART1_DMA_RX_CHx));
 80023ae:	4d0f      	ldr	r5, [pc, #60]	; (80023ec <USART1_IRQHandler+0x58>)
 80023b0:	682c      	ldr	r4, [r5, #0]
 80023b2:	2004      	movs	r0, #4
 80023b4:	f000 f9ee 	bl	8002794 <dma_transfer_number_get>
 80023b8:	1a20      	subs	r0, r4, r0
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <USART1_IRQHandler+0x5c>)
 80023bc:	6018      	str	r0, [r3, #0]
        s[rx_count + 1] = 0;
 80023be:	3001      	adds	r0, #1
 80023c0:	2300      	movs	r3, #0
 80023c2:	5433      	strb	r3, [r6, r0]
        receive_flag = 1;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <USART1_IRQHandler+0x60>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
        dma_channel_disable(USART1_DMA_RX_CHx);
 80023ca:	2004      	movs	r0, #4
 80023cc:	f000 f98e 	bl	80026ec <dma_channel_disable>
        dma_transfer_number_config(USART1_DMA_RX_CHx, rx_size);
 80023d0:	6829      	ldr	r1, [r5, #0]
 80023d2:	2004      	movs	r0, #4
 80023d4:	f000 f9d6 	bl	8002784 <dma_transfer_number_config>
        dma_channel_enable(USART1_DMA_RX_CHx);
 80023d8:	2004      	movs	r0, #4
 80023da:	f000 f97d 	bl	80026d8 <dma_channel_enable>
}
 80023de:	e7df      	b.n	80023a0 <USART1_IRQHandler+0xc>
 80023e0:	07040004 	.word	0x07040004
 80023e4:	40004400 	.word	0x40004400
 80023e8:	40020000 	.word	0x40020000
 80023ec:	2000052c 	.word	0x2000052c
 80023f0:	20000528 	.word	0x20000528
 80023f4:	20000524 	.word	0x20000524

080023f8 <USART1_Get_Rx>:

uint8_t USART1_Get_Rx(char** addr, uint32_t* size) {
    *addr = (char*)DMA_CHMADDR(USART1_DMA_RX_CHx);
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <USART1_Get_Rx+0x20>)
 80023fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fc:	6003      	str	r3, [r0, #0]
    *size = rx_count;
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <USART1_Get_Rx+0x24>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	600b      	str	r3, [r1, #0]
    if (receive_flag == 0) {
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <USART1_Get_Rx+0x28>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b11b      	cbz	r3, 8002412 <USART1_Get_Rx+0x1a>
        return 1;
    }
    receive_flag = 0;
 800240a:	2000      	movs	r0, #0
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <USART1_Get_Rx+0x28>)
 800240e:	6018      	str	r0, [r3, #0]
    return 0;
 8002410:	4770      	bx	lr
        return 1;
 8002412:	2001      	movs	r0, #1
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40020000 	.word	0x40020000
 800241c:	20000528 	.word	0x20000528
 8002420:	20000524 	.word	0x20000524

08002424 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopForever+0x6>)
  ldr r1, =_edata
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <LoopForever+0xa>)
  ldr r2, =_sidata
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LoopForever+0xe>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002440:	4c0b      	ldr	r4, [pc, #44]	; (8002470 <LoopForever+0x16>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800244e:	f000 f813 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002452:	f7ff fcc1 	bl	8001dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002456:	f7ff fdb1 	bl	8001fbc <main>

0800245a <LoopForever>:

LoopForever:
    b LoopForever
 800245a:	e7fe      	b.n	800245a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800245c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8002468:	080049dc 	.word	0x080049dc
  ldr r2, =_sbss
 800246c:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8002470:	2000060c 	.word	0x2000060c

08002474 <ADC_CMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC_CMP_IRQHandler>
	...

08002478 <SystemInit>:
void SystemInit(void) {
#if (defined(GD32F350))
    RCU_APB2EN |= BIT(0);
    CMP_CS |= (CMP_CS_CMP1MSEL | CMP_CS_CMP0MSEL);
#endif /* GD32F350 */
    if (((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) != OB_OBSTAT_PLEVEL_HIGH) &&
 8002478:	4b72      	ldr	r3, [pc, #456]	; (8002644 <SystemInit+0x1cc>)
 800247a:	69da      	ldr	r2, [r3, #28]
 800247c:	f002 0206 	and.w	r2, r2, #6
 8002480:	2a06      	cmp	r2, #6
void SystemInit(void) {
 8002482:	b082      	sub	sp, #8
    if (((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) != OB_OBSTAT_PLEVEL_HIGH) &&
 8002484:	d047      	beq.n	8002516 <SystemInit+0x9e>
        (((FMC_OBSTAT >> 13) & 0x1) == SET)) {
 8002486:	69da      	ldr	r2, [r3, #28]
    if (((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) != OB_OBSTAT_PLEVEL_HIGH) &&
 8002488:	0490      	lsls	r0, r2, #18
 800248a:	d544      	bpl.n	8002516 <SystemInit+0x9e>
        FMC_KEY = UNLOCK_KEY0;
        FMC_KEY = UNLOCK_KEY1;
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <SystemInit+0x1d0>)
        FMC_KEY = UNLOCK_KEY0;
 800248e:	496f      	ldr	r1, [pc, #444]	; (800264c <SystemInit+0x1d4>)
 8002490:	6059      	str	r1, [r3, #4]
        FMC_KEY = UNLOCK_KEY1;
 8002492:	605a      	str	r2, [r3, #4]
        FMC_OBKEY = UNLOCK_KEY0;
 8002494:	6099      	str	r1, [r3, #8]
        FMC_OBKEY = UNLOCK_KEY1;
 8002496:	609a      	str	r2, [r3, #8]
        FMC_CTL |= FMC_CTL_OBER;
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	f042 0220 	orr.w	r2, r2, #32
 800249e:	611a      	str	r2, [r3, #16]
        FMC_CTL |= FMC_CTL_START;
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a6:	611a      	str	r2, [r3, #16]
        while ((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY))
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	07d1      	lsls	r1, r2, #31
 80024ac:	d4fc      	bmi.n	80024a8 <SystemInit+0x30>
            ;
        FMC_CTL &= ~FMC_CTL_OBER;
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	f022 0220 	bic.w	r2, r2, #32
 80024b4:	611a      	str	r2, [r3, #16]
        FMC_CTL |= FMC_CTL_OBPG;
 80024b6:	691a      	ldr	r2, [r3, #16]
 80024b8:	f042 0210 	orr.w	r2, r2, #16
 80024bc:	611a      	str	r2, [r3, #16]
        if ((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) == OB_OBSTAT_PLEVEL_NO) {
 80024be:	69da      	ldr	r2, [r3, #28]
 80024c0:	f012 0f06 	tst.w	r2, #6
 80024c4:	4a62      	ldr	r2, [pc, #392]	; (8002650 <SystemInit+0x1d8>)
 80024c6:	f040 80ae 	bne.w	8002626 <SystemInit+0x1ae>
            OB_SPC = FMC_NSPC;
 80024ca:	23a5      	movs	r3, #165	; 0xa5
        } else if ((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) == OB_OBSTAT_PLEVEL_LOW) {
            OB_SPC = FMC_LSPC;
 80024cc:	8013      	strh	r3, [r2, #0]
        }
        OB_USER = OB_USER_DEFAULT & ((uint8_t)(FMC_OBSTAT >> 8));
 80024ce:	4b5d      	ldr	r3, [pc, #372]	; (8002644 <SystemInit+0x1cc>)
 80024d0:	4a5f      	ldr	r2, [pc, #380]	; (8002650 <SystemInit+0x1d8>)
 80024d2:	69d9      	ldr	r1, [r3, #28]
 80024d4:	0a09      	lsrs	r1, r1, #8
 80024d6:	f001 01df 	and.w	r1, r1, #223	; 0xdf
 80024da:	8051      	strh	r1, [r2, #2]
        OB_DATA0 = ((uint8_t)(FMC_OBSTAT >> 16));
 80024dc:	69d9      	ldr	r1, [r3, #28]
 80024de:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80024e2:	8091      	strh	r1, [r2, #4]
        OB_DATA1 = ((uint8_t)(FMC_OBSTAT >> 24));
 80024e4:	69d9      	ldr	r1, [r3, #28]
 80024e6:	0e09      	lsrs	r1, r1, #24
 80024e8:	80d1      	strh	r1, [r2, #6]
        OB_WP0 = ((uint8_t)(FMC_WP));
 80024ea:	6a19      	ldr	r1, [r3, #32]
 80024ec:	b2c9      	uxtb	r1, r1
 80024ee:	8111      	strh	r1, [r2, #8]
        OB_WP1 = ((uint8_t)(FMC_WP >> 8));
 80024f0:	6a19      	ldr	r1, [r3, #32]
 80024f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80024f6:	8151      	strh	r1, [r2, #10]
        while ((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY))
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	07d2      	lsls	r2, r2, #31
 80024fc:	d4fc      	bmi.n	80024f8 <SystemInit+0x80>
            ;
        FMC_CTL &= ~FMC_CTL_OBPG;
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	f022 0210 	bic.w	r2, r2, #16
 8002504:	611a      	str	r2, [r3, #16]
        FMC_CTL &= ~FMC_CTL_OBWEN;
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800250c:	611a      	str	r2, [r3, #16]
        FMC_CTL |= FMC_CTL_LK;
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002514:	611a      	str	r2, [r3, #16]
    }
    /* FPU settings */
#if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002516:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <SystemInit+0x1dc>)
 8002518:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

    /* enable IRC8M */
    RCU_CTL0 |= RCU_CTL0_IRC8MEN;
 8002524:	4b4c      	ldr	r3, [pc, #304]	; (8002658 <SystemInit+0x1e0>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    while (0U == (RCU_CTL0 & RCU_CTL0_IRC8MSTB)) {
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	0790      	lsls	r0, r2, #30
 8002532:	d5fc      	bpl.n	800252e <SystemInit+0xb6>
    }

    RCU_MODIFY(0x50);
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	9201      	str	r2, [sp, #4]
 8002540:	9a01      	ldr	r2, [sp, #4]
 8002542:	2a4f      	cmp	r2, #79	; 0x4f
 8002544:	d977      	bls.n	8002636 <SystemInit+0x1be>
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	9a01      	ldr	r2, [sp, #4]
 8002554:	2a4f      	cmp	r2, #79	; 0x4f
 8002556:	d971      	bls.n	800263c <SystemInit+0x1c4>

    RCU_CFG0 &= ~(RCU_CFG0_SCS);
 8002558:	685a      	ldr	r2, [r3, #4]
#if (defined(GD32F350))
    RCU_CFG0 &= ~(RCU_CFG0_USBFSPSC);
    RCU_CFG2 &= ~(RCU_CFG2_CECSEL | RCU_CFG2_USBFSPSC2);
#endif /* GD32F350 */

    RCU_CFG1 &= ~(RCU_CFG1_PREDV | RCU_CFG1_PLLMF5 | RCU_CFG1_PLLPRESEL);
 800255a:	4840      	ldr	r0, [pc, #256]	; (800265c <SystemInit+0x1e4>)
    RCU_CFG0 &= ~(RCU_CFG0_SCS);
 800255c:	f022 0203 	bic.w	r2, r2, #3
 8002560:	605a      	str	r2, [r3, #4]
    RCU_CTL0 &= ~(RCU_CTL0_HXTALEN | RCU_CTL0_CKMEN | RCU_CTL0_PLLEN | RCU_CTL0_HXTALBPS);
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	f022 7286 	bic.w	r2, r2, #17563648	; 0x10c0000
 8002568:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800256c:	601a      	str	r2, [r3, #0]
    RCU_CFG0 &= ~(RCU_CFG0_SCS | RCU_CFG0_AHBPSC | RCU_CFG0_APB1PSC | RCU_CFG0_APB2PSC |
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	4a3b      	ldr	r2, [pc, #236]	; (8002660 <SystemInit+0x1e8>)
 8002572:	400a      	ands	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PLLMF | RCU_CFG0_PLLMF4 | RCU_CFG0_PLLDV);
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	f022 4208 	bic.w	r2, r2, #2281701376	; 0x88000000
 800257c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002580:	605a      	str	r2, [r3, #4]
    RCU_CFG1 &= ~(RCU_CFG1_PREDV | RCU_CFG1_PLLMF5 | RCU_CFG1_PLLPRESEL);
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	4002      	ands	r2, r0
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
    RCU_CFG2 &= ~(RCU_CFG2_USART0SEL | RCU_CFG2_ADCSEL);
 8002588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258a:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	631a      	str	r2, [r3, #48]	; 0x30
    RCU_CFG2 &= ~RCU_CFG2_IRC28MDIV;
 8002594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002596:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
    RCU_CFG2 &= ~RCU_CFG2_ADCPSC2;
 800259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
    RCU_CTL1 &= ~RCU_CTL1_IRC28MEN;
 80025a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a6:	f021 0101 	bic.w	r1, r1, #1
 80025aa:	6359      	str	r1, [r3, #52]	; 0x34
    RCU_ADDCTL &= ~RCU_ADDCTL_IRC48MEN;
 80025ac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
    RCU_INT = 0x00000000U;
 80025b0:	2200      	movs	r2, #0
    RCU_ADDCTL &= ~RCU_ADDCTL_IRC48MEN;
 80025b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80025b6:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
    RCU_INT = 0x00000000U;
 80025ba:	609a      	str	r2, [r3, #8]
    RCU_ADDINT = 0x00000000U;
 80025bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    \param[out] none
    \retval     none
*/
static void system_clock_72m_irc8m(void) {
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	605a      	str	r2, [r3, #4]
    /* APB2 = AHB/2 */
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80025ca:	6059      	str	r1, [r3, #4]
    /* APB1 = AHB/2 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV2;
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80025d2:	6059      	str	r1, [r3, #4]
    /* PLL = (IRC8M/2) * 18 = 72 MHz */
    RCU_CFG0 &= ~(RCU_CFG0_PLLSEL | RCU_CFG0_PLLMF | RCU_CFG0_PLLMF4 | RCU_CFG0_PLLPREDV);
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	f022 6203 	bic.w	r2, r2, #137363456	; 0x8300000
 80025da:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80025de:	605a      	str	r2, [r3, #4]
    RCU_CFG1 &= ~(RCU_CFG1_PLLPRESEL | RCU_CFG1_PLLMF5 | RCU_CFG1_PREDV);
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	4002      	ands	r2, r0
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
    RCU_CFG0 |= (RCU_PLLSRC_IRC8M_DIV2 | (RCU_PLL_MUL18 & (~RCU_CFG1_PLLMF5)));
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80025ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025f0:	605a      	str	r2, [r3, #4]
    RCU_CFG1 |= (RCU_PLL_MUL18 & RCU_CFG1_PLLMF5);
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* enable PLL */
    RCU_CTL0 |= RCU_CTL0_PLLEN;
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80025fc:	601a      	str	r2, [r3, #0]

    /* wait until PLL is stable */
    while (0U == (RCU_CTL0 & RCU_CTL0_PLLSTB)) {
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	0191      	lsls	r1, r2, #6
 8002602:	d5fc      	bpl.n	80025fe <SystemInit+0x186>
    }

    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	f022 0203 	bic.w	r2, r2, #3
 800260a:	605a      	str	r2, [r3, #4]
    RCU_CFG0 |= RCU_CKSYSSRC_PLL;
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	f042 0202 	orr.w	r2, r2, #2
 8002612:	605a      	str	r2, [r3, #4]

    /* wait until PLL is selected as system clock */
    while (0U == (RCU_CFG0 & RCU_SCSS_PLL)) {
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	0712      	lsls	r2, r2, #28
 8002618:	d5fc      	bpl.n	8002614 <SystemInit+0x19c>
    nvic_vector_table_set(NVIC_VECTTAB_FLASH, VECT_TAB_OFFSET);
 800261a:	2100      	movs	r1, #0
 800261c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
}
 8002620:	b002      	add	sp, #8
    nvic_vector_table_set(NVIC_VECTTAB_FLASH, VECT_TAB_OFFSET);
 8002622:	f000 b98d 	b.w	8002940 <nvic_vector_table_set>
        } else if ((FMC_OBSTAT & OB_OBSTAT_PLEVEL_HIGH) == OB_OBSTAT_PLEVEL_LOW) {
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f003 0306 	and.w	r3, r3, #6
 800262c:	2b02      	cmp	r3, #2
 800262e:	f47f af4e 	bne.w	80024ce <SystemInit+0x56>
            OB_SPC = FMC_LSPC;
 8002632:	23bb      	movs	r3, #187	; 0xbb
 8002634:	e74a      	b.n	80024cc <SystemInit+0x54>
    RCU_MODIFY(0x50);
 8002636:	9a01      	ldr	r2, [sp, #4]
 8002638:	3201      	adds	r2, #1
 800263a:	e780      	b.n	800253e <SystemInit+0xc6>
 800263c:	9a01      	ldr	r2, [sp, #4]
 800263e:	3201      	adds	r2, #1
 8002640:	e786      	b.n	8002550 <SystemInit+0xd8>
 8002642:	bf00      	nop
 8002644:	40022000 	.word	0x40022000
 8002648:	cdef89ab 	.word	0xcdef89ab
 800264c:	45670123 	.word	0x45670123
 8002650:	1ffff800 	.word	0x1ffff800
 8002654:	e000ed00 	.word	0xe000ed00
 8002658:	40021000 	.word	0x40021000
 800265c:	3ffffff0 	.word	0x3ffffff0
 8002660:	08ff000c 	.word	0x08ff000c

08002664 <dma_deinit>:
    \param[out] none
    \retval     none
*/
void dma_deinit(dma_channel_enum channelx) {
    /* disable DMA a channel */
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CHEN;
 8002664:	2314      	movs	r3, #20
 8002666:	4343      	muls	r3, r0
 8002668:	490a      	ldr	r1, [pc, #40]	; (8002694 <dma_deinit+0x30>)
 800266a:	585a      	ldr	r2, [r3, r1]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	505a      	str	r2, [r3, r1]
    /* reset DMA channel registers */
    DMA_CHCTL(channelx) = DMA_CHCTL_RESET_VALUE;
 8002672:	2200      	movs	r2, #0
 8002674:	505a      	str	r2, [r3, r1]
    DMA_CHCNT(channelx) = DMA_CHCNT_RESET_VALUE;
 8002676:	3104      	adds	r1, #4
    DMA_CHPADDR(channelx) = DMA_CHPADDR_RESET_VALUE;
    DMA_CHMADDR(channelx) = DMA_CHMADDR_RESET_VALUE;
    DMA_INTC |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, channelx);
 8002678:	0080      	lsls	r0, r0, #2
    DMA_CHCNT(channelx) = DMA_CHCNT_RESET_VALUE;
 800267a:	505a      	str	r2, [r3, r1]
    DMA_CHPADDR(channelx) = DMA_CHPADDR_RESET_VALUE;
 800267c:	3104      	adds	r1, #4
 800267e:	505a      	str	r2, [r3, r1]
    DMA_CHMADDR(channelx) = DMA_CHMADDR_RESET_VALUE;
 8002680:	3104      	adds	r1, #4
 8002682:	505a      	str	r2, [r3, r1]
    DMA_INTC |= DMA_FLAG_ADD(DMA_CHINTF_RESET_VALUE, channelx);
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <dma_deinit+0x34>)
 8002686:	230f      	movs	r3, #15
 8002688:	6851      	ldr	r1, [r2, #4]
 800268a:	fa03 f000 	lsl.w	r0, r3, r0
 800268e:	4308      	orrs	r0, r1
 8002690:	6050      	str	r0, [r2, #4]
}
 8002692:	4770      	bx	lr
 8002694:	40020008 	.word	0x40020008
 8002698:	40020000 	.word	0x40020000

0800269c <dma_struct_para_init>:
    \param[out] none
    \retval     none
*/
void dma_struct_para_init(dma_parameter_struct *init_struct) {
    /* set the DMA struct with the default values */
    init_struct->periph_addr = 0U;
 800269c:	2300      	movs	r3, #0
    init_struct->periph_width = 0U;
 800269e:	e9c0 3300 	strd	r3, r3, [r0]
    init_struct->periph_inc = (uint8_t)DMA_PERIPH_INCREASE_DISABLE;
    init_struct->memory_addr = 0U;
    init_struct->memory_width = 0U;
 80026a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
    init_struct->periph_inc = (uint8_t)DMA_PERIPH_INCREASE_DISABLE;
 80026a6:	7203      	strb	r3, [r0, #8]
    init_struct->memory_inc = (uint8_t)DMA_MEMORY_INCREASE_DISABLE;
    init_struct->number = 0U;
 80026a8:	6183      	str	r3, [r0, #24]
    init_struct->memory_inc = (uint8_t)DMA_MEMORY_INCREASE_DISABLE;
 80026aa:	8283      	strh	r3, [r0, #20]
    init_struct->direction = (uint8_t)DMA_PERIPHERAL_TO_MEMORY;
    init_struct->priority = (uint32_t)DMA_PRIORITY_LOW;
 80026ac:	61c3      	str	r3, [r0, #28]
}
 80026ae:	4770      	bx	lr

080026b0 <dma_circulation_disable>:
                only one parameter can be selected which is shown as below:
      \arg        DMA_CHx(x=0..6)
    \param[out] none
    \retval     none
*/
void dma_circulation_disable(dma_channel_enum channelx) { DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CMEN; }
 80026b0:	2314      	movs	r3, #20
 80026b2:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <dma_circulation_disable+0x10>)
 80026b4:	4358      	muls	r0, r3
 80026b6:	5883      	ldr	r3, [r0, r2]
 80026b8:	f023 0320 	bic.w	r3, r3, #32
 80026bc:	5083      	str	r3, [r0, r2]
 80026be:	4770      	bx	lr
 80026c0:	40020008 	.word	0x40020008

080026c4 <dma_memory_to_memory_disable>:
      \arg        DMA_CHx(x=0..6)
    \param[out] none
    \retval     none
*/
void dma_memory_to_memory_disable(dma_channel_enum channelx) {
    DMA_CHCTL(channelx) &= ~DMA_CHXCTL_M2M;
 80026c4:	2314      	movs	r3, #20
 80026c6:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <dma_memory_to_memory_disable+0x10>)
 80026c8:	4358      	muls	r0, r3
 80026ca:	5883      	ldr	r3, [r0, r2]
 80026cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d0:	5083      	str	r3, [r0, r2]
}
 80026d2:	4770      	bx	lr
 80026d4:	40020008 	.word	0x40020008

080026d8 <dma_channel_enable>:
                only one parameter can be selected which is shown as below:
      \arg        DMA_CHx(x=0..6)
    \param[out] none
    \retval     none
*/
void dma_channel_enable(dma_channel_enum channelx) { DMA_CHCTL(channelx) |= DMA_CHXCTL_CHEN; }
 80026d8:	2314      	movs	r3, #20
 80026da:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <dma_channel_enable+0x10>)
 80026dc:	4358      	muls	r0, r3
 80026de:	5883      	ldr	r3, [r0, r2]
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	5083      	str	r3, [r0, r2]
 80026e6:	4770      	bx	lr
 80026e8:	40020008 	.word	0x40020008

080026ec <dma_channel_disable>:
                only one parameter can be selected which is shown as below:
      \arg        DMA_CHx(x=0..6)
    \param[out] none
    \retval     none
*/
void dma_channel_disable(dma_channel_enum channelx) { DMA_CHCTL(channelx) &= ~DMA_CHXCTL_CHEN; }
 80026ec:	2314      	movs	r3, #20
 80026ee:	4a03      	ldr	r2, [pc, #12]	; (80026fc <dma_channel_disable+0x10>)
 80026f0:	4358      	muls	r0, r3
 80026f2:	5883      	ldr	r3, [r0, r2]
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	5083      	str	r3, [r0, r2]
 80026fa:	4770      	bx	lr
 80026fc:	40020008 	.word	0x40020008

08002700 <dma_init>:
void dma_init(dma_channel_enum channelx, dma_parameter_struct *init_struct) {
 8002700:	b538      	push	{r3, r4, r5, lr}
 8002702:	4604      	mov	r4, r0
    dma_channel_disable(channelx);
 8002704:	f7ff fff2 	bl	80026ec <dma_channel_disable>
    DMA_CHPADDR(channelx) = init_struct->periph_addr;
 8002708:	2014      	movs	r0, #20
 800270a:	4360      	muls	r0, r4
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <dma_init+0x70>)
 800270e:	680a      	ldr	r2, [r1, #0]
 8002710:	50c2      	str	r2, [r0, r3]
    DMA_CHMADDR(channelx) = init_struct->memory_addr;
 8002712:	3304      	adds	r3, #4
 8002714:	68ca      	ldr	r2, [r1, #12]
 8002716:	50c2      	str	r2, [r0, r3]
    DMA_CHCNT(channelx) = (init_struct->number & DMA_CHANNEL_CNT_MASK);
 8002718:	3b08      	subs	r3, #8
 800271a:	8b0a      	ldrh	r2, [r1, #24]
 800271c:	50c2      	str	r2, [r0, r3]
    ctl = DMA_CHCTL(channelx);
 800271e:	3b04      	subs	r3, #4
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8002720:	690d      	ldr	r5, [r1, #16]
 8002722:	684a      	ldr	r2, [r1, #4]
    ctl = DMA_CHCTL(channelx);
 8002724:	58c4      	ldr	r4, [r0, r3]
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 8002726:	432a      	orrs	r2, r5
 8002728:	69cd      	ldr	r5, [r1, #28]
    ctl &= ~(DMA_CHXCTL_PWIDTH | DMA_CHXCTL_MWIDTH | DMA_CHXCTL_PRIO);
 800272a:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
    ctl |= (init_struct->periph_width | init_struct->memory_width | init_struct->priority);
 800272e:	432a      	orrs	r2, r5
 8002730:	4322      	orrs	r2, r4
    DMA_CHCTL(channelx) = ctl;
 8002732:	50c2      	str	r2, [r0, r3]
    if (DMA_PERIPH_INCREASE_ENABLE == init_struct->periph_inc) {
 8002734:	7a0a      	ldrb	r2, [r1, #8]
 8002736:	2a01      	cmp	r2, #1
        DMA_CHCTL(channelx) |= DMA_CHXCTL_PNAGA;
 8002738:	58c2      	ldr	r2, [r0, r3]
 800273a:	bf0c      	ite	eq
 800273c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_PNAGA;
 8002740:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002744:	50c2      	str	r2, [r0, r3]
    if (DMA_MEMORY_INCREASE_ENABLE == init_struct->memory_inc) {
 8002746:	7d0a      	ldrb	r2, [r1, #20]
 8002748:	2a01      	cmp	r2, #1
        DMA_CHCTL(channelx) |= DMA_CHXCTL_MNAGA;
 800274a:	58c2      	ldr	r2, [r0, r3]
 800274c:	bf0c      	ite	eq
 800274e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_MNAGA;
 8002752:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002756:	50c2      	str	r2, [r0, r3]
    if (DMA_PERIPHERAL_TO_MEMORY == init_struct->direction) {
 8002758:	7d4a      	ldrb	r2, [r1, #21]
 800275a:	b922      	cbnz	r2, 8002766 <dma_init+0x66>
        DMA_CHCTL(channelx) &= ~DMA_CHXCTL_DIR;
 800275c:	58c2      	ldr	r2, [r0, r3]
 800275e:	f022 0210 	bic.w	r2, r2, #16
        DMA_CHCTL(channelx) |= DMA_CHXCTL_DIR;
 8002762:	50c2      	str	r2, [r0, r3]
}
 8002764:	bd38      	pop	{r3, r4, r5, pc}
        DMA_CHCTL(channelx) |= DMA_CHXCTL_DIR;
 8002766:	58c2      	ldr	r2, [r0, r3]
 8002768:	f042 0210 	orr.w	r2, r2, #16
 800276c:	e7f9      	b.n	8002762 <dma_init+0x62>
 800276e:	bf00      	nop
 8002770:	40020010 	.word	0x40020010

08002774 <dma_memory_address_config>:
    \param[in]  address: memory base address
    \param[out] none
    \retval     none
*/
void dma_memory_address_config(dma_channel_enum channelx, uint32_t address) {
    DMA_CHMADDR(channelx) = address;
 8002774:	2314      	movs	r3, #20
 8002776:	4358      	muls	r0, r3
 8002778:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800277c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002780:	50c1      	str	r1, [r0, r3]
}
 8002782:	4770      	bx	lr

08002784 <dma_transfer_number_config>:
    \param[in]  number: the number of remaining data to be transferred by the DMA
    \param[out] none
    \retval     none
*/
void dma_transfer_number_config(dma_channel_enum channelx, uint32_t number) {
    DMA_CHCNT(channelx) = (number & DMA_CHANNEL_CNT_MASK);
 8002784:	2314      	movs	r3, #20
 8002786:	4358      	muls	r0, r3
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <dma_transfer_number_config+0xc>)
 800278a:	b289      	uxth	r1, r1
 800278c:	50c1      	str	r1, [r0, r3]
}
 800278e:	4770      	bx	lr
 8002790:	4002000c 	.word	0x4002000c

08002794 <dma_transfer_number_get>:
      \arg        DMA_CHx(x=0..6)
    \param[out] none
    \retval     the number of remaining data to be transferred by the DMA
*/
uint32_t dma_transfer_number_get(dma_channel_enum channelx) {
    return (uint32_t)DMA_CHCNT(channelx);
 8002794:	2314      	movs	r3, #20
 8002796:	4358      	muls	r0, r3
 8002798:	4b01      	ldr	r3, [pc, #4]	; (80027a0 <dma_transfer_number_get+0xc>)
 800279a:	58c0      	ldr	r0, [r0, r3]
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	4002000c 	.word	0x4002000c

080027a4 <gpio_mode_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_mode_set(uint32_t gpio_periph, uint32_t mode, uint32_t pull_up_down, uint32_t pin)
{
 80027a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uint16_t i;
    uint32_t ctl, pupd;

    ctl = GPIO_CTL(gpio_periph);
 80027a8:	6805      	ldr	r5, [r0, #0]
    pupd = GPIO_PUD(gpio_periph);
 80027aa:	68c4      	ldr	r4, [r0, #12]
 80027ac:	2600      	movs	r6, #0

    for(i = 0U; i < 16U; i++) {
        if((1U << i) & pin) {
 80027ae:	f04f 0e01 	mov.w	lr, #1
            /* clear the specified pin mode bits */
            ctl &= ~GPIO_MODE_MASK(i);
 80027b2:	f04f 0803 	mov.w	r8, #3
        if((1U << i) & pin) {
 80027b6:	fa0e f706 	lsl.w	r7, lr, r6
 80027ba:	421f      	tst	r7, r3
 80027bc:	d00d      	beq.n	80027da <gpio_mode_set+0x36>
            ctl &= ~GPIO_MODE_MASK(i);
 80027be:	0077      	lsls	r7, r6, #1
 80027c0:	fa08 fc07 	lsl.w	ip, r8, r7
            /* set the specified pin mode bits */
            ctl |= GPIO_MODE_SET(i, mode);
 80027c4:	fa01 f907 	lsl.w	r9, r1, r7
            ctl &= ~GPIO_MODE_MASK(i);
 80027c8:	ea25 050c 	bic.w	r5, r5, ip

            /* clear the specified pin pupd bits */
            pupd &= ~GPIO_PUPD_MASK(i);
 80027cc:	ea24 040c 	bic.w	r4, r4, ip
            /* set the specified pin pupd bits */
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 80027d0:	fa02 f707 	lsl.w	r7, r2, r7
            ctl |= GPIO_MODE_SET(i, mode);
 80027d4:	ea49 0505 	orr.w	r5, r9, r5
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 80027d8:	433c      	orrs	r4, r7
    for(i = 0U; i < 16U; i++) {
 80027da:	3601      	adds	r6, #1
 80027dc:	2e10      	cmp	r6, #16
 80027de:	d1ea      	bne.n	80027b6 <gpio_mode_set+0x12>
        }
    }

    GPIO_CTL(gpio_periph) = ctl;
 80027e0:	6005      	str	r5, [r0, #0]
    GPIO_PUD(gpio_periph) = pupd;
 80027e2:	60c4      	str	r4, [r0, #12]
}
 80027e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027e8 <gpio_output_options_set>:
void gpio_output_options_set(uint32_t gpio_periph, uint8_t otype, uint32_t speed, uint32_t pin)
{
    uint16_t i;
    uint32_t ospeed0, ospeed1;

    if(GPIO_OTYPE_OD == otype) {
 80027e8:	2901      	cmp	r1, #1
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 80027ea:	6841      	ldr	r1, [r0, #4]
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 80027ee:	bf0c      	ite	eq
 80027f0:	4319      	orreq	r1, r3
    } else {
        GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
 80027f2:	4399      	bicne	r1, r3
    }

    /* get the specified pin output speed bits value */
    ospeed0 = GPIO_OSPD0(gpio_periph);

    if(GPIO_OSPEED_MAX == speed) {
 80027f4:	f64f 74ff 	movw	r4, #65535	; 0xffff
        GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
 80027f8:	6041      	str	r1, [r0, #4]
    if(GPIO_OSPEED_MAX == speed) {
 80027fa:	42a2      	cmp	r2, r4
    ospeed0 = GPIO_OSPD0(gpio_periph);
 80027fc:	6881      	ldr	r1, [r0, #8]
    if(GPIO_OSPEED_MAX == speed) {
 80027fe:	d115      	bne.n	800282c <gpio_output_options_set+0x44>
        ospeed1 = GPIO_OSPD1(gpio_periph);
 8002800:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002802:	2200      	movs	r2, #0

        for(i = 0U; i < 16U; i++) {
            if((1U << i) & pin) {
 8002804:	2701      	movs	r7, #1
                /* enable very high output speed function of the pin when the corresponding OSPDy(y=0..15)
                   is "11" (output max speed 50MHz) */
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 8002806:	f04f 0c03 	mov.w	ip, #3
            if((1U << i) & pin) {
 800280a:	fa07 f602 	lsl.w	r6, r7, r2
 800280e:	421e      	tst	r6, r3
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 8002810:	bf1c      	itt	ne
 8002812:	0055      	lslne	r5, r2, #1
 8002814:	fa0c f505 	lslne.w	r5, ip, r5
        for(i = 0U; i < 16U; i++) {
 8002818:	f102 0201 	add.w	r2, r2, #1
                ospeed0 |= GPIO_OSPEED_SET(i, 0x03);
 800281c:	bf1c      	itt	ne
 800281e:	4329      	orrne	r1, r5
                ospeed1 |= (1U << i);
 8002820:	4334      	orrne	r4, r6
        for(i = 0U; i < 16U; i++) {
 8002822:	2a10      	cmp	r2, #16
 8002824:	d1f1      	bne.n	800280a <gpio_output_options_set+0x22>
            }
        }
        GPIO_OSPD0(gpio_periph) = ospeed0;
 8002826:	6081      	str	r1, [r0, #8]
        GPIO_OSPD1(gpio_periph) = ospeed1;
 8002828:	63c4      	str	r4, [r0, #60]	; 0x3c
                ospeed0 |= GPIO_OSPEED_SET(i, speed);
            }
        }
        GPIO_OSPD0(gpio_periph) = ospeed0;
    }
}
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282c:	2400      	movs	r4, #0
            if((1U << i) & pin) {
 800282e:	2701      	movs	r7, #1
                ospeed0 &= ~GPIO_OSPEED_MASK(i);
 8002830:	f04f 0c03 	mov.w	ip, #3
            if((1U << i) & pin) {
 8002834:	fa07 f504 	lsl.w	r5, r7, r4
 8002838:	421d      	tst	r5, r3
 800283a:	d007      	beq.n	800284c <gpio_output_options_set+0x64>
                ospeed0 &= ~GPIO_OSPEED_MASK(i);
 800283c:	0065      	lsls	r5, r4, #1
 800283e:	fa0c f605 	lsl.w	r6, ip, r5
 8002842:	ea21 0106 	bic.w	r1, r1, r6
                ospeed0 |= GPIO_OSPEED_SET(i, speed);
 8002846:	fa02 f505 	lsl.w	r5, r2, r5
 800284a:	4329      	orrs	r1, r5
        for(i = 0U; i < 16U; i++) {
 800284c:	3401      	adds	r4, #1
 800284e:	2c10      	cmp	r4, #16
 8002850:	d1f0      	bne.n	8002834 <gpio_output_options_set+0x4c>
        GPIO_OSPD0(gpio_periph) = ospeed0;
 8002852:	6081      	str	r1, [r0, #8]
}
 8002854:	e7e9      	b.n	800282a <gpio_output_options_set+0x42>

08002856 <gpio_af_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_af_set(uint32_t gpio_periph, uint32_t alt_func_num, uint32_t pin)
{
 8002856:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t i;
    uint32_t afrl, afrh;

    afrl = GPIO_AFSEL0(gpio_periph);
 8002858:	6a07      	ldr	r7, [r0, #32]
    afrh = GPIO_AFSEL1(gpio_periph);
 800285a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800285c:	2300      	movs	r3, #0

    for(i = 0U; i < 8U; i++) {
        if((1U << i) & pin) {
 800285e:	f04f 0c01 	mov.w	ip, #1
            /* clear the specified pin alternate function bits */
            afrl &= ~GPIO_AFR_MASK(i);
 8002862:	f04f 0e0f 	mov.w	lr, #15
        if((1U << i) & pin) {
 8002866:	fa0c f403 	lsl.w	r4, ip, r3
 800286a:	4214      	tst	r4, r2
 800286c:	d007      	beq.n	800287e <gpio_af_set+0x28>
            afrl &= ~GPIO_AFR_MASK(i);
 800286e:	009d      	lsls	r5, r3, #2
 8002870:	fa0e f405 	lsl.w	r4, lr, r5
 8002874:	ea27 0704 	bic.w	r7, r7, r4
            afrl |= GPIO_AFR_SET(i, alt_func_num);
 8002878:	fa01 f505 	lsl.w	r5, r1, r5
 800287c:	432f      	orrs	r7, r5
    for(i = 0U; i < 8U; i++) {
 800287e:	3301      	adds	r3, #1
 8002880:	2b08      	cmp	r3, #8
 8002882:	d1f0      	bne.n	8002866 <gpio_af_set+0x10>
 8002884:	2300      	movs	r3, #0
        }
    }

    for(i = 8U; i < 16U; i++) {
        if((1U << i) & pin) {
 8002886:	f04f 0c01 	mov.w	ip, #1
            /* clear the specified pin alternate function bits */
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 800288a:	f04f 0e0f 	mov.w	lr, #15
        if((1U << i) & pin) {
 800288e:	f103 0408 	add.w	r4, r3, #8
 8002892:	fa0c f404 	lsl.w	r4, ip, r4
 8002896:	4214      	tst	r4, r2
 8002898:	d007      	beq.n	80028aa <gpio_af_set+0x54>
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 800289a:	009c      	lsls	r4, r3, #2
 800289c:	fa0e f504 	lsl.w	r5, lr, r4
 80028a0:	ea26 0605 	bic.w	r6, r6, r5
            afrh |= GPIO_AFR_SET(i - 8U, alt_func_num);
 80028a4:	fa01 f404 	lsl.w	r4, r1, r4
 80028a8:	4326      	orrs	r6, r4
    for(i = 8U; i < 16U; i++) {
 80028aa:	3301      	adds	r3, #1
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d1ee      	bne.n	800288e <gpio_af_set+0x38>
        }
    }

    GPIO_AFSEL0(gpio_periph) = afrl;
 80028b0:	6207      	str	r7, [r0, #32]
    GPIO_AFSEL1(gpio_periph) = afrh;
 80028b2:	6246      	str	r6, [r0, #36]	; 0x24
}
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028b8 <nvic_irq_enable>:
                     uint8_t nvic_irq_sub_priority)
{
    uint32_t temp_priority = 0x00U, temp_pre = 0x00U, temp_sub = 0x00U;

    /* use the priority group value to get the temp_pre and the temp_sub */
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <nvic_irq_enable+0x7c>)
{
 80028ba:	b530      	push	{r4, r5, lr}
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 80028bc:	68dc      	ldr	r4, [r3, #12]
 80028be:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 80028c2:	f5b4 6fa0 	cmp.w	r4, #1280	; 0x500
 80028c6:	d008      	beq.n	80028da <nvic_irq_enable+0x22>
 80028c8:	d822      	bhi.n	8002910 <nvic_irq_enable+0x58>
 80028ca:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 80028ce:	d028      	beq.n	8002922 <nvic_irq_enable+0x6a>
 80028d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80028d4:	d028      	beq.n	8002928 <nvic_irq_enable+0x70>
    SCB->AIRCR = NVIC_AIRCR_VECTKEY_MASK | nvic_prigroup;
 80028d6:	4c18      	ldr	r4, [pc, #96]	; (8002938 <nvic_irq_enable+0x80>)
 80028d8:	60dc      	str	r4, [r3, #12]
        temp_pre = 1U;
        temp_sub = 0x3U;
        break;
    case NVIC_PRIGROUP_PRE2_SUB2:
        temp_pre = 2U;
        temp_sub = 0x2U;
 80028da:	2402      	movs	r4, #2
        temp_pre = 2U;
 80028dc:	4625      	mov	r5, r4
        temp_sub = 0x2U;
        break;
    }

    /* get the temp_priority to fill the NVIC->IP register */
    temp_priority = (uint32_t)nvic_irq_pre_priority << (0x4U - temp_pre);
 80028de:	f1c5 0504 	rsb	r5, r5, #4
 80028e2:	40a9      	lsls	r1, r5
    temp_priority |= nvic_irq_sub_priority & (0x0FU >> (0x4U - temp_sub));
 80028e4:	f1c4 0504 	rsb	r5, r4, #4
 80028e8:	240f      	movs	r4, #15
 80028ea:	40ec      	lsrs	r4, r5
 80028ec:	ea04 0302 	and.w	r3, r4, r2
    temp_priority = temp_priority << 0x04U;
    NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
 80028f0:	4a12      	ldr	r2, [pc, #72]	; (800293c <nvic_irq_enable+0x84>)
    temp_priority |= nvic_irq_sub_priority & (0x0FU >> (0x4U - temp_sub));
 80028f2:	430b      	orrs	r3, r1
    temp_priority = temp_priority << 0x04U;
 80028f4:	011b      	lsls	r3, r3, #4
    NVIC->IP[nvic_irq] = (uint8_t)temp_priority;
 80028f6:	1811      	adds	r1, r2, r0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300

    /* enable the selected IRQ */
    NVIC->ISER[nvic_irq >> 0x05U] = (uint32_t)0x01U << (nvic_irq & (uint8_t)0x1FU);
 80028fe:	0941      	lsrs	r1, r0, #5
 8002900:	2301      	movs	r3, #1
 8002902:	f000 001f 	and.w	r0, r0, #31
 8002906:	fa03 f000 	lsl.w	r0, r3, r0
 800290a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 800290e:	bd30      	pop	{r4, r5, pc}
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 8002910:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8002914:	d00b      	beq.n	800292e <nvic_irq_enable+0x76>
 8002916:	f5b4 6fe0 	cmp.w	r4, #1792	; 0x700
 800291a:	d1dc      	bne.n	80028d6 <nvic_irq_enable+0x1e>
        temp_sub = 0x4U;
 800291c:	2404      	movs	r4, #4
        temp_pre = 0U;
 800291e:	2500      	movs	r5, #0
 8002920:	e7dd      	b.n	80028de <nvic_irq_enable+0x26>
        temp_sub = 0x0U;
 8002922:	2400      	movs	r4, #0
        temp_pre = 4U;
 8002924:	2504      	movs	r5, #4
 8002926:	e7da      	b.n	80028de <nvic_irq_enable+0x26>
        temp_sub = 0x1U;
 8002928:	2401      	movs	r4, #1
        temp_pre = 3U;
 800292a:	2503      	movs	r5, #3
 800292c:	e7d7      	b.n	80028de <nvic_irq_enable+0x26>
    switch((SCB->AIRCR) & (uint32_t)0x700U) {
 800292e:	2403      	movs	r4, #3
 8002930:	2501      	movs	r5, #1
 8002932:	e7d4      	b.n	80028de <nvic_irq_enable+0x26>
 8002934:	e000ed00 	.word	0xe000ed00
 8002938:	05fa0500 	.word	0x05fa0500
 800293c:	e000e100 	.word	0xe000e100

08002940 <nvic_vector_table_set>:
    \param[out] none
    \retval     none
*/
void nvic_vector_table_set(uint32_t nvic_vict_tab, uint32_t offset)
{
    SCB->VTOR = nvic_vict_tab | (offset & NVIC_VECTTAB_OFFSET_MASK);
 8002940:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <nvic_vector_table_set+0x14>)
 8002946:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800294a:	4308      	orrs	r0, r1
 800294c:	6098      	str	r0, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
    __ASM volatile("dsb");
 800294e:	f3bf 8f4f 	dsb	sy
    __DSB();
}
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8002958:	0983      	lsrs	r3, r0, #6
 800295a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800295e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002962:	f000 001f 	and.w	r0, r0, #31
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	2201      	movs	r2, #1
 800296a:	fa02 f000 	lsl.w	r0, r2, r0
 800296e:	4308      	orrs	r0, r1
 8002970:	6018      	str	r0, [r3, #0]
}
 8002972:	4770      	bx	lr

08002974 <rcu_periph_clock_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_disable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) &= ~BIT(RCU_BIT_POS(periph));
 8002974:	0983      	lsrs	r3, r0, #6
 8002976:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800297a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800297e:	f000 001f 	and.w	r0, r0, #31
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	2101      	movs	r1, #1
 8002986:	fa01 f000 	lsl.w	r0, r1, r0
 800298a:	ea22 0000 	bic.w	r0, r2, r0
 800298e:	6018      	str	r0, [r3, #0]
}
 8002990:	4770      	bx	lr

08002992 <rcu_periph_reset_enable>:
 8002992:	f7ff bfe1 	b.w	8002958 <rcu_periph_clock_enable>

08002996 <rcu_periph_reset_disable>:
 8002996:	f7ff bfed 	b.w	8002974 <rcu_periph_clock_disable>
	...

0800299c <rcu_clock_freq_get>:
      \arg        CK_USART: USART clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2, ADC, CEC or USRAT
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t sws = 0U, adcps = 0U, adcps2 = 0U, ck_freq = 0U;
    uint32_t cksys_freq = 0U, ahb_freq = 0U, apb1_freq = 0U, apb2_freq = 0U;
    uint32_t adc_freq = 0U, cec_freq = 0U, usart_freq = 0U;
    uint32_t pllmf = 0U, pllmf4 = 0U, pllmf5 = 0U, pllsel = 0U, pllpresel = 0U, prediv = 0U, idx = 0U, clk_exp = 0U;
    /* exponent of AHB, APB1 and APB2 clock divider */
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 800299e:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <rcu_clock_freq_get+0x180>)
{
 80029a0:	b089      	sub	sp, #36	; 0x24
 80029a2:	4605      	mov	r5, r0
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 80029a4:	ac04      	add	r4, sp, #16
 80029a6:	f103 0610 	add.w	r6, r3, #16
 80029aa:	461f      	mov	r7, r3
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	4622      	mov	r2, r4
 80029b2:	c203      	stmia	r2!, {r0, r1}
 80029b4:	3308      	adds	r3, #8
 80029b6:	42b3      	cmp	r3, r6
 80029b8:	4614      	mov	r4, r2
 80029ba:	d1f7      	bne.n	80029ac <rcu_clock_freq_get+0x10>
    const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 80029bc:	6871      	ldr	r1, [r6, #4]
 80029be:	6938      	ldr	r0, [r7, #16]
 80029c0:	466b      	mov	r3, sp
 80029c2:	c303      	stmia	r3!, {r0, r1}
    const uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 80029c4:	c303      	stmia	r3!, {r0, r1}

    sws = GET_BITS(RCU_CFG0, 2, 3);
 80029c6:	4956      	ldr	r1, [pc, #344]	; (8002b20 <rcu_clock_freq_get+0x184>)
 80029c8:	684b      	ldr	r3, [r1, #4]
 80029ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
    switch(sws) {
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d141      	bne.n	8002a56 <rcu_clock_freq_get+0xba>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLL is selected as CK_SYS */
    case SEL_PLL:
        /* get the value of PLLMF[3:0] */
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80029d2:	684a      	ldr	r2, [r1, #4]
        pllmf4 = GET_BITS(RCU_CFG0, 27, 27);
 80029d4:	6848      	ldr	r0, [r1, #4]
        pllmf5 = GET_BITS(RCU_CFG1, 31, 31);
 80029d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
        /* high 16 bits */
        /* high 16 bits */
        if((0U == pllmf4) && (0U == pllmf5)) {
 80029d8:	0106      	lsls	r6, r0, #4
        pllmf = GET_BITS(RCU_CFG0, 18, 21);
 80029da:	f3c2 4283 	ubfx	r2, r2, #18, #4
        pllmf5 = GET_BITS(RCU_CFG1, 31, 31);
 80029de:	ea4f 73d3 	mov.w	r3, r3, lsr #31
        if((0U == pllmf4) && (0U == pllmf5)) {
 80029e2:	f100 8094 	bmi.w	8002b0e <rcu_clock_freq_get+0x172>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 8095 	bne.w	8002b16 <rcu_clock_freq_get+0x17a>
            pllmf += 2U;
 80029ec:	3202      	adds	r2, #2
        if((1U == pllmf4) && (1U == pllmf5)) {
            pllmf += 49U;
        }

        /* PLL clock source selection, HXTAL or IRC48M or IRC8M/2 */
        pllsel = GET_BITS(RCU_CFG0, 16, 16);
 80029ee:	684b      	ldr	r3, [r1, #4]
        pllpresel = GET_BITS(RCU_CFG1, 30, 30);
 80029f0:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
        if(0U != pllsel) {
 80029f2:	03dc      	lsls	r4, r3, #15
 80029f4:	d52d      	bpl.n	8002a52 <rcu_clock_freq_get+0xb6>
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 80029f6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
            if(0U == pllpresel) {
 80029f8:	0040      	lsls	r0, r0, #1
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 80029fa:	f003 030f 	and.w	r3, r3, #15
                cksys_freq = (HXTAL_VALUE / prediv) * pllmf;
 80029fe:	bf54      	ite	pl
 8002a00:	4848      	ldrpl	r0, [pc, #288]	; (8002b24 <rcu_clock_freq_get+0x188>)
            } else {
                cksys_freq = (IRC48M_VALUE / prediv) * pllmf;
 8002a02:	4849      	ldrmi	r0, [pc, #292]	; (8002b28 <rcu_clock_freq_get+0x18c>)
            prediv = (GET_BITS(RCU_CFG1, 0, 3) + 1U);
 8002a04:	3301      	adds	r3, #1
                cksys_freq = (IRC48M_VALUE / prediv) * pllmf;
 8002a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0a:	435a      	muls	r2, r3
    default:
        cksys_freq = IRC8M_VALUE;
        break;
    }
    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
    clk_exp = ahb_exp[idx];
 8002a12:	3320      	adds	r3, #32
 8002a14:	446b      	add	r3, sp
 8002a16:	f813 4c10 	ldrb.w	r4, [r3, #-16]
    ahb_freq = cksys_freq >> clk_exp;

    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 8, 10);
 8002a1a:	684b      	ldr	r3, [r1, #4]
 8002a1c:	f3c3 2302 	ubfx	r3, r3, #8, #3
    clk_exp = apb1_exp[idx];
 8002a20:	3320      	adds	r3, #32
 8002a22:	446b      	add	r3, sp
    ahb_freq = cksys_freq >> clk_exp;
 8002a24:	fa22 f404 	lsr.w	r4, r2, r4
    clk_exp = apb1_exp[idx];
 8002a28:	f813 6c20 	ldrb.w	r6, [r3, #-32]
    apb1_freq = ahb_freq >> clk_exp;

    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 11, 13);
 8002a2c:	684b      	ldr	r3, [r1, #4]
 8002a2e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
    clk_exp = apb2_exp[idx];
 8002a32:	3320      	adds	r3, #32
 8002a34:	446b      	add	r3, sp
 8002a36:	f813 3c18 	ldrb.w	r3, [r3, #-24]
    apb2_freq = ahb_freq >> clk_exp;
 8002a3a:	fa24 f003 	lsr.w	r0, r4, r3

    /* return the clocks frequency */
    switch(clock) {
 8002a3e:	2d06      	cmp	r5, #6
 8002a40:	d85e      	bhi.n	8002b00 <rcu_clock_freq_get+0x164>
 8002a42:	e8df f005 	tbb	[pc, r5]
 8002a46:	0a5f      	.short	0x0a5f
 8002a48:	3f100b0d 	.word	0x3f100b0d
 8002a4c:	48          	.byte	0x48
 8002a4d:	00          	.byte	0x00
            pllmf += 17U;
 8002a4e:	3211      	adds	r2, #17
        if((1U == pllmf4) && (1U == pllmf5)) {
 8002a50:	e7cd      	b.n	80029ee <rcu_clock_freq_get+0x52>
            cksys_freq = (IRC8M_VALUE >> 1) * pllmf;
 8002a52:	4b36      	ldr	r3, [pc, #216]	; (8002b2c <rcu_clock_freq_get+0x190>)
 8002a54:	e7d9      	b.n	8002a0a <rcu_clock_freq_get+0x6e>
        cksys_freq = IRC8M_VALUE;
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <rcu_clock_freq_get+0x188>)
 8002a58:	e7d8      	b.n	8002a0c <rcu_clock_freq_get+0x70>
    case CK_SYS:
        ck_freq = cksys_freq;
        break;
    case CK_AHB:
        ck_freq = ahb_freq;
 8002a5a:	4620      	mov	r0, r4
        break;
    default:
        break;
    }
    return ck_freq;
}
 8002a5c:	b009      	add	sp, #36	; 0x24
 8002a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    apb1_freq = ahb_freq >> clk_exp;
 8002a60:	fa24 f006 	lsr.w	r0, r4, r6
        break;
 8002a64:	e7fa      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
        if(RCU_ADCSRC_AHB_APB2DIV != (RCU_CFG2 & RCU_CFG2_ADCSEL)) {
 8002a66:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002a68:	05da      	lsls	r2, r3, #23
 8002a6a:	d407      	bmi.n	8002a7c <rcu_clock_freq_get+0xe0>
            if(RCU_ADC_IRC28M_DIV1 != (RCU_CFG2 & RCU_CFG2_IRC28MDIV)) {
 8002a6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
                adc_freq = IRC28M_VALUE;
 8002a6e:	4830      	ldr	r0, [pc, #192]	; (8002b30 <rcu_clock_freq_get+0x194>)
 8002a70:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002a74:	4b2f      	ldr	r3, [pc, #188]	; (8002b34 <rcu_clock_freq_get+0x198>)
 8002a76:	bf18      	it	ne
 8002a78:	4618      	movne	r0, r3
 8002a7a:	e7ef      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
            adcps = GET_BITS(RCU_CFG0, 14, 15);
 8002a7c:	684a      	ldr	r2, [r1, #4]
            adcps2 = GET_BITS(RCU_CFG2, 31, 31);
 8002a7e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
            adcps = GET_BITS(RCU_CFG0, 14, 15);
 8002a80:	f3c2 3281 	ubfx	r2, r2, #14, #2
            adcps2 = GET_BITS(RCU_CFG2, 31, 31);
 8002a84:	2a02      	cmp	r2, #2
 8002a86:	ea4f 73d3 	mov.w	r3, r3, lsr #31
            switch(adcps) {
 8002a8a:	d00f      	beq.n	8002aac <rcu_clock_freq_get+0x110>
 8002a8c:	2a03      	cmp	r2, #3
 8002a8e:	d014      	beq.n	8002aba <rcu_clock_freq_get+0x11e>
 8002a90:	2a01      	cmp	r2, #1
 8002a92:	d006      	beq.n	8002aa2 <rcu_clock_freq_get+0x106>
                if(0U == adcps2) {
 8002a94:	b90b      	cbnz	r3, 8002a9a <rcu_clock_freq_get+0xfe>
                    adc_freq = apb2_freq / 2U;
 8002a96:	0840      	lsrs	r0, r0, #1
 8002a98:	e7e0      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
                    adc_freq = ahb_freq / 3U;
 8002a9a:	2003      	movs	r0, #3
                    adc_freq = ahb_freq / 9U;
 8002a9c:	fbb4 f0f0 	udiv	r0, r4, r0
 8002aa0:	e7dc      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
                if(0U == adcps2) {
 8002aa2:	b90b      	cbnz	r3, 8002aa8 <rcu_clock_freq_get+0x10c>
                    adc_freq = apb2_freq / 4U;
 8002aa4:	0880      	lsrs	r0, r0, #2
 8002aa6:	e7d9      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
                    adc_freq = ahb_freq / 5U;
 8002aa8:	2005      	movs	r0, #5
 8002aaa:	e7f7      	b.n	8002a9c <rcu_clock_freq_get+0x100>
                if(0U == adcps2) {
 8002aac:	b91b      	cbnz	r3, 8002ab6 <rcu_clock_freq_get+0x11a>
                    adc_freq = apb2_freq / 6U;
 8002aae:	2306      	movs	r3, #6
 8002ab0:	fbb0 f0f3 	udiv	r0, r0, r3
 8002ab4:	e7d2      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
                    adc_freq = ahb_freq / 7U;
 8002ab6:	2007      	movs	r0, #7
 8002ab8:	e7f0      	b.n	8002a9c <rcu_clock_freq_get+0x100>
                if(0U == adcps2) {
 8002aba:	b90b      	cbnz	r3, 8002ac0 <rcu_clock_freq_get+0x124>
                    adc_freq = apb2_freq / 8U;
 8002abc:	08c0      	lsrs	r0, r0, #3
 8002abe:	e7cd      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
                    adc_freq = ahb_freq / 9U;
 8002ac0:	2009      	movs	r0, #9
 8002ac2:	e7eb      	b.n	8002a9c <rcu_clock_freq_get+0x100>
        if(RCU_CECSRC_LXTAL != (RCU_CFG2 & RCU_CFG2_CECSEL)) {
 8002ac4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
            cec_freq = IRC8M_VALUE / 244U;
 8002ac6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002aca:	f248 0012 	movw	r0, #32786	; 0x8012
 8002ace:	bf18      	it	ne
 8002ad0:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8002ad4:	e7c2      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
        if(RCU_USART0SRC_CKAPB2 == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002ad6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ad8:	079b      	lsls	r3, r3, #30
 8002ada:	d0bf      	beq.n	8002a5c <rcu_clock_freq_get+0xc0>
        } else if(RCU_USART0SRC_CKSYS == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002adc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d00e      	beq.n	8002b04 <rcu_clock_freq_get+0x168>
        } else if(RCU_USART0SRC_LXTAL == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002ae6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d00b      	beq.n	8002b08 <rcu_clock_freq_get+0x16c>
        } else if(RCU_USART0SRC_IRC8M == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002af0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
            usart_freq = IRC8M_VALUE;
 8002af2:	480c      	ldr	r0, [pc, #48]	; (8002b24 <rcu_clock_freq_get+0x188>)
        } else if(RCU_USART0SRC_IRC8M == (RCU_CFG2 & RCU_CFG2_USART0SEL)) {
 8002af4:	f003 0303 	and.w	r3, r3, #3
            usart_freq = IRC8M_VALUE;
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	bf18      	it	ne
 8002afc:	2000      	movne	r0, #0
 8002afe:	e7ad      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
    uint32_t sws = 0U, adcps = 0U, adcps2 = 0U, ck_freq = 0U;
 8002b00:	2000      	movs	r0, #0
 8002b02:	e7ab      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
            usart_freq = cksys_freq;
 8002b04:	4610      	mov	r0, r2
 8002b06:	e7a9      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
            cec_freq = LXTAL_VALUE;
 8002b08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b0c:	e7a6      	b.n	8002a5c <rcu_clock_freq_get+0xc0>
        if((1U == pllmf4) && (0U == pllmf5)) {
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d09d      	beq.n	8002a4e <rcu_clock_freq_get+0xb2>
            pllmf += 49U;
 8002b12:	3231      	adds	r2, #49	; 0x31
 8002b14:	e76b      	b.n	80029ee <rcu_clock_freq_get+0x52>
            pllmf += 33U;
 8002b16:	3221      	adds	r2, #33	; 0x21
 8002b18:	e769      	b.n	80029ee <rcu_clock_freq_get+0x52>
 8002b1a:	bf00      	nop
 8002b1c:	080043b8 	.word	0x080043b8
 8002b20:	40021000 	.word	0x40021000
 8002b24:	007a1200 	.word	0x007a1200
 8002b28:	02dc6c00 	.word	0x02dc6c00
 8002b2c:	003d0900 	.word	0x003d0900
 8002b30:	00d59f80 	.word	0x00d59f80
 8002b34:	01ab3f00 	.word	0x01ab3f00

08002b38 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 8002b38:	b508      	push	{r3, lr}
    switch(usart_periph) {
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <usart_deinit+0x34>)
 8002b3c:	4298      	cmp	r0, r3
 8002b3e:	d00d      	beq.n	8002b5c <usart_deinit+0x24>
 8002b40:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8002b44:	4298      	cmp	r0, r3
 8002b46:	d110      	bne.n	8002b6a <usart_deinit+0x32>
    case USART0:
        /* reset USART0 */
        rcu_periph_reset_enable(RCU_USART0RST);
 8002b48:	f240 300e 	movw	r0, #782	; 0x30e
 8002b4c:	f7ff ff21 	bl	8002992 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART0RST);
 8002b50:	f240 300e 	movw	r0, #782	; 0x30e
        rcu_periph_reset_disable(RCU_USART1RST);
        break;
    default:
        break;
    }
}
 8002b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        rcu_periph_reset_disable(RCU_USART1RST);
 8002b58:	f7ff bf1d 	b.w	8002996 <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 8002b5c:	f240 4011 	movw	r0, #1041	; 0x411
 8002b60:	f7ff ff17 	bl	8002992 <rcu_periph_reset_enable>
        rcu_periph_reset_disable(RCU_USART1RST);
 8002b64:	f240 4011 	movw	r0, #1041	; 0x411
 8002b68:	e7f4      	b.n	8002b54 <usart_deinit+0x1c>
}
 8002b6a:	bd08      	pop	{r3, pc}
 8002b6c:	40004400 	.word	0x40004400

08002b70 <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8002b70:	b538      	push	{r3, r4, r5, lr}
    uint32_t uclk = 0U, intdiv = 0U, fradiv = 0U, udiv = 0U;
    switch(usart_periph) {
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <usart_baudrate_set+0x50>)
 8002b74:	4298      	cmp	r0, r3
{
 8002b76:	4604      	mov	r4, r0
 8002b78:	460d      	mov	r5, r1
    switch(usart_periph) {
 8002b7a:	d018      	beq.n	8002bae <usart_baudrate_set+0x3e>
 8002b7c:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8002b80:	4298      	cmp	r0, r3
 8002b82:	d116      	bne.n	8002bb2 <usart_baudrate_set+0x42>
    /* get clock frequency */
    case USART0:
        /* get USART0 clock */
        uclk = rcu_clock_freq_get(CK_USART);
 8002b84:	2006      	movs	r0, #6
        break;
    case USART1:
        /* get USART1 clock */
        uclk = rcu_clock_freq_get(CK_APB1);
 8002b86:	f7ff ff09 	bl	800299c <rcu_clock_freq_get>
        break;
    default:
        break;
    }
    if(USART_CTL0(usart_periph) & USART_CTL0_OVSMOD) {
 8002b8a:	6822      	ldr	r2, [r4, #0]
 8002b8c:	0412      	lsls	r2, r2, #16
        /* oversampling by 8, configure the value of USART_BAUD */
        udiv = ((2U * uclk) + baudval / 2U) / baudval;
 8002b8e:	ea4f 0355 	mov.w	r3, r5, lsr #1
    if(USART_CTL0(usart_periph) & USART_CTL0_OVSMOD) {
 8002b92:	d510      	bpl.n	8002bb6 <usart_baudrate_set+0x46>
        udiv = ((2U * uclk) + baudval / 2U) / baudval;
 8002b94:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002b98:	fbb3 f1f5 	udiv	r1, r3, r5
        intdiv = udiv & 0x0000fff0U;
        fradiv = (udiv >> 1U) & 0x00000007U;
 8002b9c:	f3c1 0342 	ubfx	r3, r1, #1, #3
        intdiv = udiv & 0x0000fff0U;
 8002ba0:	f021 010f 	bic.w	r1, r1, #15
 8002ba4:	0409      	lsls	r1, r1, #16
 8002ba6:	0c09      	lsrs	r1, r1, #16
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002ba8:	4319      	orrs	r1, r3
    } else {
        /* oversampling by 16, configure the value of USART_BAUD */
        udiv = (uclk + baudval / 2U) / baudval;
        intdiv = udiv & 0x0000fff0U;
        fradiv = udiv & 0x0000000fU;
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002baa:	60e1      	str	r1, [r4, #12]
    }
}
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
        uclk = rcu_clock_freq_get(CK_APB1);
 8002bae:	2002      	movs	r0, #2
 8002bb0:	e7e9      	b.n	8002b86 <usart_baudrate_set+0x16>
    switch(usart_periph) {
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	e7e9      	b.n	8002b8a <usart_baudrate_set+0x1a>
        udiv = (uclk + baudval / 2U) / baudval;
 8002bb6:	4403      	add	r3, r0
 8002bb8:	fbb3 f1f5 	udiv	r1, r3, r5
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002bbc:	b289      	uxth	r1, r1
 8002bbe:	e7f4      	b.n	8002baa <usart_baudrate_set+0x3a>
 8002bc0:	40004400 	.word	0x40004400

08002bc4 <usart_parity_config>:
    \retval     none
*/
void usart_parity_config(uint32_t usart_periph, uint32_t paritycfg)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002bc4:	6802      	ldr	r2, [r0, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	6002      	str	r2, [r0, #0]
    /* clear USART_CTL0 PM,PCEN bits */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_PM | USART_CTL0_PCEN);
 8002bcc:	6802      	ldr	r2, [r0, #0]
 8002bce:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002bd2:	6002      	str	r2, [r0, #0]
    /* configure USART parity mode */
    USART_CTL0(usart_periph) |= paritycfg;
 8002bd4:	6803      	ldr	r3, [r0, #0]
 8002bd6:	4319      	orrs	r1, r3
 8002bd8:	6001      	str	r1, [r0, #0]
}
 8002bda:	4770      	bx	lr

08002bdc <usart_word_length_set>:
    \retval     none
*/
void usart_word_length_set(uint32_t usart_periph, uint32_t wlen)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002bdc:	6802      	ldr	r2, [r0, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	6002      	str	r2, [r0, #0]
    /* clear USART_CTL0 WL bit */
    USART_CTL0(usart_periph) &= ~USART_CTL0_WL;
 8002be4:	6802      	ldr	r2, [r0, #0]
 8002be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bea:	6002      	str	r2, [r0, #0]
    /* configure USART word length */
    USART_CTL0(usart_periph) |= wlen;
 8002bec:	6803      	ldr	r3, [r0, #0]
 8002bee:	4319      	orrs	r1, r3
 8002bf0:	6001      	str	r1, [r0, #0]
}
 8002bf2:	4770      	bx	lr

08002bf4 <usart_stop_bit_set>:
    \retval     none
*/
void usart_stop_bit_set(uint32_t usart_periph, uint32_t stblen)
{
    /* disable USART */
    USART_CTL0(usart_periph) &= ~(USART_CTL0_UEN);
 8002bf4:	6802      	ldr	r2, [r0, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	6002      	str	r2, [r0, #0]
    /* clear USART_CTL1 STB bits */
    USART_CTL1(usart_periph) &= ~USART_CTL1_STB;
 8002bfc:	6842      	ldr	r2, [r0, #4]
 8002bfe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c02:	6042      	str	r2, [r0, #4]
    USART_CTL1(usart_periph) |= stblen;
 8002c04:	6843      	ldr	r3, [r0, #4]
 8002c06:	4319      	orrs	r1, r3
 8002c08:	6041      	str	r1, [r0, #4]
}
 8002c0a:	4770      	bx	lr

08002c0c <usart_enable>:
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph)
{
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 8002c0c:	6803      	ldr	r3, [r0, #0]
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6003      	str	r3, [r0, #0]
}
 8002c14:	4770      	bx	lr

08002c16 <usart_transmit_config>:
    \param[out] none
    \retval     none
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    USART_CTL0(usart_periph) &= ~USART_CTL0_TEN;
 8002c16:	6802      	ldr	r2, [r0, #0]
 8002c18:	f022 0208 	bic.w	r2, r2, #8
 8002c1c:	6002      	str	r2, [r0, #0]
    /* configure transfer mode */
    USART_CTL0(usart_periph) |= txconfig;
 8002c1e:	6803      	ldr	r3, [r0, #0]
 8002c20:	4319      	orrs	r1, r3
 8002c22:	6001      	str	r1, [r0, #0]
}
 8002c24:	4770      	bx	lr

08002c26 <usart_receive_config>:
    \param[out] none
    \retval     none
*/
void usart_receive_config(uint32_t usart_periph, uint32_t rxconfig)
{
    USART_CTL0(usart_periph) &= ~USART_CTL0_REN;
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	f022 0204 	bic.w	r2, r2, #4
 8002c2c:	6002      	str	r2, [r0, #0]
    /* configure receiver mode */
    USART_CTL0(usart_periph) |= rxconfig;
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	4319      	orrs	r1, r3
 8002c32:	6001      	str	r1, [r0, #0]
}
 8002c34:	4770      	bx	lr

08002c36 <usart_dma_receive_config>:
    \param[out] none
    \retval     none
*/
void usart_dma_receive_config(uint32_t usart_periph, uint32_t dmacmd)
{
    USART_CTL2(usart_periph) &= ~USART_CTL2_DENR;
 8002c36:	6882      	ldr	r2, [r0, #8]
 8002c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c3c:	6082      	str	r2, [r0, #8]
    /* configure DMA reception */
    USART_CTL2(usart_periph) |= dmacmd;
 8002c3e:	6883      	ldr	r3, [r0, #8]
 8002c40:	4319      	orrs	r1, r3
 8002c42:	6081      	str	r1, [r0, #8]
}
 8002c44:	4770      	bx	lr

08002c46 <usart_dma_transmit_config>:
    \param[out] none
    \retval     none
*/
void usart_dma_transmit_config(uint32_t usart_periph, uint32_t dmacmd)
{
    USART_CTL2(usart_periph) &= ~USART_CTL2_DENT;
 8002c46:	6882      	ldr	r2, [r0, #8]
 8002c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4c:	6082      	str	r2, [r0, #8]
    /* configure DMA transmission */
    USART_CTL2(usart_periph) |= dmacmd;
 8002c4e:	6883      	ldr	r3, [r0, #8]
 8002c50:	4319      	orrs	r1, r3
 8002c52:	6081      	str	r1, [r0, #8]
}
 8002c54:	4770      	bx	lr

08002c56 <usart_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus usart_flag_get(uint32_t usart_periph, usart_flag_enum flag)
{
    if(RESET != (USART_REG_VAL(usart_periph, flag) & BIT(USART_BIT_POS(flag)))) {
 8002c56:	098b      	lsrs	r3, r1, #6
 8002c58:	f001 011f 	and.w	r1, r1, #31
 8002c5c:	5818      	ldr	r0, [r3, r0]
 8002c5e:	40c8      	lsrs	r0, r1
        return SET;
    } else {
        return RESET;
    }
}
 8002c60:	f000 0001 	and.w	r0, r0, #1
 8002c64:	4770      	bx	lr

08002c66 <usart_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_flag_clear(uint32_t usart_periph, usart_flag_enum flag)
{
    USART_INTC(usart_periph) |= BIT(USART_BIT_POS(flag));
 8002c66:	6a02      	ldr	r2, [r0, #32]
 8002c68:	f001 011f 	and.w	r1, r1, #31
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	fa03 f101 	lsl.w	r1, r3, r1
 8002c72:	4311      	orrs	r1, r2
 8002c74:	6201      	str	r1, [r0, #32]
}
 8002c76:	4770      	bx	lr

08002c78 <usart_interrupt_enable>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_enable(uint32_t usart_periph, usart_interrupt_enum interrupt)
{
    USART_REG_VAL(usart_periph, interrupt) |= BIT(USART_BIT_POS(interrupt));
 8002c78:	098a      	lsrs	r2, r1, #6
{
 8002c7a:	b510      	push	{r4, lr}
    USART_REG_VAL(usart_periph, interrupt) |= BIT(USART_BIT_POS(interrupt));
 8002c7c:	f001 011f 	and.w	r1, r1, #31
 8002c80:	5814      	ldr	r4, [r2, r0]
 8002c82:	2301      	movs	r3, #1
 8002c84:	fa03 f101 	lsl.w	r1, r3, r1
 8002c88:	4321      	orrs	r1, r4
 8002c8a:	5011      	str	r1, [r2, r0]
}
 8002c8c:	bd10      	pop	{r4, pc}

08002c8e <usart_interrupt_flag_get>:
*/
FlagStatus usart_interrupt_flag_get(uint32_t usart_periph, usart_interrupt_flag_enum int_flag)
{
    uint32_t intenable = 0U, flagstatus = 0U;
    /* get the interrupt enable bit status */
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002c8e:	f3c1 1389 	ubfx	r3, r1, #6, #10
{
 8002c92:	b510      	push	{r4, lr}
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002c94:	581c      	ldr	r4, [r3, r0]
    /* get the corresponding flag bit status */
    flagstatus = (USART_REG_VAL2(usart_periph, int_flag) & BIT(USART_BIT_POS2(int_flag)));
 8002c96:	0d8b      	lsrs	r3, r1, #22
 8002c98:	581a      	ldr	r2, [r3, r0]
 8002c9a:	f3c1 4004 	ubfx	r0, r1, #16, #5
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	fa03 f000 	lsl.w	r0, r3, r0

    if(flagstatus && intenable) {
 8002ca4:	4010      	ands	r0, r2
 8002ca6:	d007      	beq.n	8002cb8 <usart_interrupt_flag_get+0x2a>
    intenable = (USART_REG_VAL(usart_periph, int_flag) & BIT(USART_BIT_POS(int_flag)));
 8002ca8:	f001 011f 	and.w	r1, r1, #31
 8002cac:	fa03 f101 	lsl.w	r1, r3, r1
    if(flagstatus && intenable) {
 8002cb0:	4221      	tst	r1, r4
        return SET;
    } else {
        return RESET;
 8002cb2:	bf14      	ite	ne
 8002cb4:	4618      	movne	r0, r3
 8002cb6:	2000      	moveq	r0, #0
    }
}
 8002cb8:	bd10      	pop	{r4, pc}
	...

08002cbc <usart_interrupt_flag_clear>:
    \param[out] none
    \retval     none
*/
void usart_interrupt_flag_clear(uint32_t usart_periph, usart_interrupt_flag_enum int_flag)
{
    if(USART_INT_FLAG_RFFINT == int_flag) {
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <usart_interrupt_flag_clear+0x28>)
 8002cbe:	4299      	cmp	r1, r3
 8002cc0:	d106      	bne.n	8002cd0 <usart_interrupt_flag_clear+0x14>
        USART_RFCS(usart_periph) &= (uint32_t)(~USART_RFCS_RFFINT);
 8002cc2:	f8d0 30d0 	ldr.w	r3, [r0, #208]	; 0xd0
 8002cc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cca:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 8002cce:	4770      	bx	lr
    } else {
        USART_INTC(usart_periph) |= BIT(USART_BIT_POS2(int_flag));
 8002cd0:	6a02      	ldr	r2, [r0, #32]
 8002cd2:	f3c1 4104 	ubfx	r1, r1, #16, #5
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	fa03 f101 	lsl.w	r1, r3, r1
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	6201      	str	r1, [r0, #32]
    }
}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	340f3409 	.word	0x340f3409

08002ce8 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002ce8:	4770      	bx	lr

08002cea <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002cea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cee:	4699      	mov	r9, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8002cf2:	4615      	mov	r5, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002cf4:	079a      	lsls	r2, r3, #30
{
 8002cf6:	e9dd 470b 	ldrd	r4, r7, [sp, #44]	; 0x2c
 8002cfa:	4606      	mov	r6, r0
 8002cfc:	468b      	mov	fp, r1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002cfe:	d022      	beq.n	8002d46 <_out_rev+0x5c>
 8002d00:	462a      	mov	r2, r5
 8002d02:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002d04:	eb01 0804 	add.w	r8, r1, r4
 8002d08:	4414      	add	r4, r2
      out(' ', buffer, idx++, maxlen);
    }
  }

  // reverse string
  while (len) {
 8002d0a:	42a2      	cmp	r2, r4
 8002d0c:	d11f      	bne.n	8002d4e <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002d0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d10:	079b      	lsls	r3, r3, #30
 8002d12:	d505      	bpl.n	8002d20 <_out_rev+0x36>
 8002d14:	eba2 0805 	sub.w	r8, r2, r5
    while (idx - start_idx < width) {
 8002d18:	4547      	cmp	r7, r8
 8002d1a:	eb05 0408 	add.w	r4, r5, r8
 8002d1e:	d81f      	bhi.n	8002d60 <_out_rev+0x76>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 8002d20:	4620      	mov	r0, r4
 8002d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      out(' ', buffer, idx++, maxlen);
 8002d26:	464b      	mov	r3, r9
 8002d28:	4659      	mov	r1, fp
 8002d2a:	2020      	movs	r0, #32
 8002d2c:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8002d2e:	f108 0801 	add.w	r8, r8, #1
 8002d32:	45b8      	cmp	r8, r7
 8002d34:	eb0a 0208 	add.w	r2, sl, r8
 8002d38:	d3f5      	bcc.n	8002d26 <_out_rev+0x3c>
 8002d3a:	1b3a      	subs	r2, r7, r4
 8002d3c:	42bc      	cmp	r4, r7
 8002d3e:	bf88      	it	hi
 8002d40:	2200      	movhi	r2, #0
 8002d42:	442a      	add	r2, r5
 8002d44:	e7dd      	b.n	8002d02 <_out_rev+0x18>
 8002d46:	46a0      	mov	r8, r4
 8002d48:	eba5 0a04 	sub.w	sl, r5, r4
 8002d4c:	e7f1      	b.n	8002d32 <_out_rev+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 8002d4e:	f102 0a01 	add.w	sl, r2, #1
 8002d52:	f818 0d01 	ldrb.w	r0, [r8, #-1]!
 8002d56:	464b      	mov	r3, r9
 8002d58:	4659      	mov	r1, fp
 8002d5a:	47b0      	blx	r6
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	e7d4      	b.n	8002d0a <_out_rev+0x20>
      out(' ', buffer, idx++, maxlen);
 8002d60:	464b      	mov	r3, r9
 8002d62:	4622      	mov	r2, r4
 8002d64:	4659      	mov	r1, fp
 8002d66:	2020      	movs	r0, #32
 8002d68:	47b0      	blx	r6
 8002d6a:	f108 0801 	add.w	r8, r8, #1
 8002d6e:	e7d3      	b.n	8002d18 <_out_rev+0x2e>

08002d70 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	e9dd 760d 	ldrd	r7, r6, [sp, #52]	; 0x34
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002d78:	f016 0f02 	tst.w	r6, #2
{
 8002d7c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 8002d80:	e9dd c80b 	ldrd	ip, r8, [sp, #44]	; 0x2c
 8002d84:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT)) {
 8002d88:	d11f      	bne.n	8002dca <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002d8a:	f006 0901 	and.w	r9, r6, #1
 8002d8e:	b14f      	cbz	r7, 8002da4 <_ntoa_format+0x34>
 8002d90:	f1b9 0f00 	cmp.w	r9, #0
 8002d94:	d006      	beq.n	8002da4 <_ntoa_format+0x34>
 8002d96:	f1be 0f00 	cmp.w	lr, #0
 8002d9a:	d102      	bne.n	8002da2 <_ntoa_format+0x32>
 8002d9c:	f016 0f0c 	tst.w	r6, #12
 8002da0:	d000      	beq.n	8002da4 <_ntoa_format+0x34>
      width--;
 8002da2:	3f01      	subs	r7, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8002da4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8002da8:	e004      	b.n	8002db4 <_ntoa_format+0x44>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002daa:	2c20      	cmp	r4, #32
 8002dac:	d004      	beq.n	8002db8 <_ntoa_format+0x48>
      buf[len++] = '0';
 8002dae:	f805 a004 	strb.w	sl, [r5, r4]
 8002db2:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002db4:	45a0      	cmp	r8, r4
 8002db6:	d8f8      	bhi.n	8002daa <_ntoa_format+0x3a>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 8002db8:	f04f 0a30 	mov.w	sl, #48	; 0x30
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002dbc:	f1b9 0f00 	cmp.w	r9, #0
 8002dc0:	d003      	beq.n	8002dca <_ntoa_format+0x5a>
 8002dc2:	42bc      	cmp	r4, r7
 8002dc4:	d201      	bcs.n	8002dca <_ntoa_format+0x5a>
 8002dc6:	2c1f      	cmp	r4, #31
 8002dc8:	d934      	bls.n	8002e34 <_ntoa_format+0xc4>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002dca:	f016 0f10 	tst.w	r6, #16
 8002dce:	d01f      	beq.n	8002e10 <_ntoa_format+0xa0>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002dd0:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002dd4:	d133      	bne.n	8002e3e <_ntoa_format+0xce>
 8002dd6:	b394      	cbz	r4, 8002e3e <_ntoa_format+0xce>
 8002dd8:	4544      	cmp	r4, r8
 8002dda:	d001      	beq.n	8002de0 <_ntoa_format+0x70>
 8002ddc:	42bc      	cmp	r4, r7
 8002dde:	d12e      	bne.n	8002e3e <_ntoa_format+0xce>
      len--;
      if (len && (base == 16U)) {
 8002de0:	f1b4 0801 	subs.w	r8, r4, #1
 8002de4:	d02a      	beq.n	8002e3c <_ntoa_format+0xcc>
 8002de6:	f1bc 0f10 	cmp.w	ip, #16
 8002dea:	d133      	bne.n	8002e54 <_ntoa_format+0xe4>
        len--;
 8002dec:	3c02      	subs	r4, #2
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002dee:	f016 0f20 	tst.w	r6, #32
 8002df2:	d131      	bne.n	8002e58 <_ntoa_format+0xe8>
 8002df4:	2c1f      	cmp	r4, #31
 8002df6:	d815      	bhi.n	8002e24 <_ntoa_format+0xb4>
      buf[len++] = 'x';
 8002df8:	f04f 0c78 	mov.w	ip, #120	; 0x78
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'b';
 8002dfc:	f805 c004 	strb.w	ip, [r5, r4]
 8002e00:	3401      	adds	r4, #1
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002e02:	2c1f      	cmp	r4, #31
 8002e04:	d80e      	bhi.n	8002e24 <_ntoa_format+0xb4>
      buf[len++] = '0';
 8002e06:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002e0a:	f805 c004 	strb.w	ip, [r5, r4]
 8002e0e:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002e10:	2c1f      	cmp	r4, #31
 8002e12:	d807      	bhi.n	8002e24 <_ntoa_format+0xb4>
    if (negative) {
 8002e14:	f1be 0f00 	cmp.w	lr, #0
 8002e18:	d023      	beq.n	8002e62 <_ntoa_format+0xf2>
      buf[len++] = '-';
 8002e1a:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
    }
    else if (flags & FLAGS_PLUS) {
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
 8002e1e:	f805 c004 	strb.w	ip, [r5, r4]
 8002e22:	3401      	adds	r4, #1
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002e24:	e9cd 760a 	strd	r7, r6, [sp, #40]	; 0x28
 8002e28:	e9cd 5408 	strd	r5, r4, [sp, #32]
}
 8002e2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002e30:	f7ff bf5b 	b.w	8002cea <_out_rev>
      buf[len++] = '0';
 8002e34:	f805 a004 	strb.w	sl, [r5, r4]
 8002e38:	3401      	adds	r4, #1
 8002e3a:	e7bf      	b.n	8002dbc <_ntoa_format+0x4c>
 8002e3c:	4644      	mov	r4, r8
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002e3e:	f1bc 0f10 	cmp.w	ip, #16
 8002e42:	d0d4      	beq.n	8002dee <_ntoa_format+0x7e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002e44:	f1bc 0f02 	cmp.w	ip, #2
 8002e48:	d1db      	bne.n	8002e02 <_ntoa_format+0x92>
 8002e4a:	2c1f      	cmp	r4, #31
 8002e4c:	d8ea      	bhi.n	8002e24 <_ntoa_format+0xb4>
      buf[len++] = 'b';
 8002e4e:	f04f 0c62 	mov.w	ip, #98	; 0x62
 8002e52:	e7d3      	b.n	8002dfc <_ntoa_format+0x8c>
 8002e54:	4644      	mov	r4, r8
 8002e56:	e7f5      	b.n	8002e44 <_ntoa_format+0xd4>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002e58:	2c1f      	cmp	r4, #31
 8002e5a:	d8e3      	bhi.n	8002e24 <_ntoa_format+0xb4>
      buf[len++] = 'X';
 8002e5c:	f04f 0c58 	mov.w	ip, #88	; 0x58
 8002e60:	e7cc      	b.n	8002dfc <_ntoa_format+0x8c>
    else if (flags & FLAGS_PLUS) {
 8002e62:	f016 0f04 	tst.w	r6, #4
 8002e66:	d002      	beq.n	8002e6e <_ntoa_format+0xfe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002e68:	f04f 0c2b 	mov.w	ip, #43	; 0x2b
 8002e6c:	e7d7      	b.n	8002e1e <_ntoa_format+0xae>
    else if (flags & FLAGS_SPACE) {
 8002e6e:	f016 0f08 	tst.w	r6, #8
 8002e72:	d0d7      	beq.n	8002e24 <_ntoa_format+0xb4>
      buf[len++] = ' ';
 8002e74:	f04f 0c20 	mov.w	ip, #32
 8002e78:	e7d1      	b.n	8002e1e <_ntoa_format+0xae>

08002e7a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e7e:	b091      	sub	sp, #68	; 0x44
 8002e80:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002e82:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8002e84:	9f1d      	ldr	r7, [sp, #116]	; 0x74
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8002e86:	b90d      	cbnz	r5, 8002e8c <_ntoa_long+0x12>
    flags &= ~FLAGS_HASH;
 8002e88:	f027 0710 	bic.w	r7, r7, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002e8c:	057c      	lsls	r4, r7, #21
 8002e8e:	d500      	bpl.n	8002e92 <_ntoa_long+0x18>
 8002e90:	b315      	cbz	r5, 8002ed8 <_ntoa_long+0x5e>
 8002e92:	f017 0f20 	tst.w	r7, #32
 8002e96:	bf14      	ite	ne
 8002e98:	f04f 0e41 	movne.w	lr, #65	; 0x41
 8002e9c:	f04f 0e61 	moveq.w	lr, #97	; 0x61
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002ea0:	46ac      	mov	ip, r5
 8002ea2:	f10d 0820 	add.w	r8, sp, #32
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	f1ae 0e0a 	sub.w	lr, lr, #10
      const char digit = (char)(value % base);
 8002eac:	fbbc f9f6 	udiv	r9, ip, r6
 8002eb0:	fb06 c919 	mls	r9, r6, r9, ip
 8002eb4:	fa5f f489 	uxtb.w	r4, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002eb8:	f1b9 0f09 	cmp.w	r9, #9
 8002ebc:	bf94      	ite	ls
 8002ebe:	3430      	addls	r4, #48	; 0x30
 8002ec0:	4474      	addhi	r4, lr
 8002ec2:	b2e4      	uxtb	r4, r4
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002ec4:	45b4      	cmp	ip, r6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002ec6:	f808 4b01 	strb.w	r4, [r8], #1
      value /= base;
 8002eca:	fbbc f4f6 	udiv	r4, ip, r6
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002ece:	f105 0501 	add.w	r5, r5, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002ed2:	d301      	bcc.n	8002ed8 <_ntoa_long+0x5e>
 8002ed4:	2d20      	cmp	r5, #32
 8002ed6:	d110      	bne.n	8002efa <_ntoa_long+0x80>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002ed8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8002eda:	9405      	str	r4, [sp, #20]
 8002edc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002ede:	9706      	str	r7, [sp, #24]
 8002ee0:	e9cd 6403 	strd	r6, r4, [sp, #12]
 8002ee4:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
 8002ee8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8002eec:	ac08      	add	r4, sp, #32
 8002eee:	9400      	str	r4, [sp, #0]
 8002ef0:	f7ff ff3e 	bl	8002d70 <_ntoa_format>
}
 8002ef4:	b011      	add	sp, #68	; 0x44
 8002ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      value /= base;
 8002efa:	46a4      	mov	ip, r4
 8002efc:	e7d6      	b.n	8002eac <_ntoa_long+0x32>

08002efe <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f02:	ed2d 8b04 	vpush	{d8-d9}
 8002f06:	b093      	sub	sp, #76	; 0x4c
 8002f08:	e9dd 6520 	ldrd	r6, r5, [sp, #128]	; 0x80
 8002f0c:	9f28      	ldr	r7, [sp, #160]	; 0xa0
 8002f0e:	469a      	mov	sl, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8002f10:	ea56 0305 	orrs.w	r3, r6, r5
    flags &= ~FLAGS_HASH;
 8002f14:	bf08      	it	eq
 8002f16:	f027 0710 	biceq.w	r7, r7, #16
{
 8002f1a:	ee09 2a10 	vmov	s18, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002f1e:	057a      	lsls	r2, r7, #21
{
 8002f20:	e9dd b924 	ldrd	fp, r9, [sp, #144]	; 0x90
 8002f24:	ee08 0a10 	vmov	s16, r0
 8002f28:	ee08 1a90 	vmov	s17, r1
  if (!(flags & FLAGS_PRECISION) || value) {
 8002f2c:	d502      	bpl.n	8002f34 <_ntoa_long_long+0x36>
 8002f2e:	ea56 0305 	orrs.w	r3, r6, r5
 8002f32:	d03d      	beq.n	8002fb0 <_ntoa_long_long+0xb2>
 8002f34:	f017 0f20 	tst.w	r7, #32
 8002f38:	bf14      	ite	ne
 8002f3a:	2341      	movne	r3, #65	; 0x41
 8002f3c:	2361      	moveq	r3, #97	; 0x61
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002f3e:	3b0a      	subs	r3, #10
 8002f40:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8002f44:	2400      	movs	r4, #0
 8002f46:	9309      	str	r3, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
 8002f48:	465a      	mov	r2, fp
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f7fd fdbc 	bl	8000acc <__aeabi_uldivmod>
 8002f54:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002f56:	2a09      	cmp	r2, #9
 8002f58:	bf8a      	itet	hi
 8002f5a:	9b09      	ldrhi	r3, [sp, #36]	; 0x24
 8002f5c:	3230      	addls	r2, #48	; 0x30
 8002f5e:	18d2      	addhi	r2, r2, r3
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002f60:	455e      	cmp	r6, fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002f62:	b2d2      	uxtb	r2, r2
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002f64:	eb75 0309 	sbcs.w	r3, r5, r9
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002f68:	f808 2b01 	strb.w	r2, [r8], #1
 8002f6c:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002f70:	d301      	bcc.n	8002f76 <_ntoa_long_long+0x78>
 8002f72:	2c20      	cmp	r4, #32
 8002f74:	d119      	bne.n	8002faa <_ntoa_long_long+0xac>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002f76:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002f78:	9305      	str	r3, [sp, #20]
 8002f7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002f7c:	9706      	str	r7, [sp, #24]
 8002f7e:	e9cd b303 	strd	fp, r3, [sp, #12]
 8002f82:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
 8002f86:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8002f8a:	ab0a      	add	r3, sp, #40	; 0x28
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	ee19 2a10 	vmov	r2, s18
 8002f92:	ee18 1a90 	vmov	r1, s17
 8002f96:	ee18 0a10 	vmov	r0, s16
 8002f9a:	4653      	mov	r3, sl
 8002f9c:	f7ff fee8 	bl	8002d70 <_ntoa_format>
}
 8002fa0:	b013      	add	sp, #76	; 0x4c
 8002fa2:	ecbd 8b04 	vpop	{d8-d9}
 8002fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      value /= base;
 8002faa:	4606      	mov	r6, r0
 8002fac:	460d      	mov	r5, r1
 8002fae:	e7cb      	b.n	8002f48 <_ntoa_long_long+0x4a>
  size_t len = 0U;
 8002fb0:	2400      	movs	r4, #0
 8002fb2:	e7e0      	b.n	8002f76 <_ntoa_long_long+0x78>
 8002fb4:	0000      	movs	r0, r0
	...

08002fb8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fbc:	ed2d 8b08 	vpush	{d8-d11}
 8002fc0:	b08d      	sub	sp, #52	; 0x34
 8002fc2:	ee09 3a90 	vmov	s19, r3
 8002fc6:	e9dd 4320 	ldrd	r4, r3, [sp, #128]	; 0x80
 8002fca:	ed9d 7b1e 	vldr	d7, [sp, #120]	; 0x78
 8002fce:	930a      	str	r3, [sp, #40]	; 0x28
 8002fd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002fd2:	9207      	str	r2, [sp, #28]
 8002fd4:	ee09 0a10 	vmov	s18, r0
 8002fd8:	eeb0 8a47 	vmov.f32	s16, s14
 8002fdc:	eef0 8a67 	vmov.f32	s17, s15
 8002fe0:	468a      	mov	sl, r1
 8002fe2:	9306      	str	r3, [sp, #24]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002fe4:	ec51 0b17 	vmov	r0, r1, d7
 8002fe8:	ec53 2b17 	vmov	r2, r3, d7
 8002fec:	f7fd fcf4 	bl	80009d8 <__aeabi_dcmpeq>
 8002ff0:	b180      	cbz	r0, 8003014 <_etoa+0x5c>
 8002ff2:	4bd1      	ldr	r3, [pc, #836]	; (8003338 <_etoa+0x380>)
 8002ff4:	ec51 0b18 	vmov	r0, r1, d8
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	f7fd fd14 	bl	8000a28 <__aeabi_dcmpgt>
 8003000:	b940      	cbnz	r0, 8003014 <_etoa+0x5c>
 8003002:	ec51 0b18 	vmov	r0, r1, d8
 8003006:	f04f 32ff 	mov.w	r2, #4294967295
 800300a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800300e:	f7fd fced 	bl	80009ec <__aeabi_dcmplt>
 8003012:	b198      	cbz	r0, 800303c <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003014:	9b06      	ldr	r3, [sp, #24]
 8003016:	9322      	str	r3, [sp, #136]	; 0x88
 8003018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800301a:	9a07      	ldr	r2, [sp, #28]
 800301c:	e9cd 4320 	strd	r4, r3, [sp, #128]	; 0x80
 8003020:	ee19 0a10 	vmov	r0, s18
 8003024:	ee19 3a90 	vmov	r3, s19
 8003028:	4651      	mov	r1, sl
 800302a:	ed8d 8b1e 	vstr	d8, [sp, #120]	; 0x78
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 800302e:	b00d      	add	sp, #52	; 0x34
 8003030:	ecbd 8b08 	vpop	{d8-d11}
 8003034:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003038:	f000 b9a2 	b.w	8003380 <_ftoa>
  if (negative) {
 800303c:	ec51 0b18 	vmov	r0, r1, d8
 8003040:	2200      	movs	r2, #0
 8003042:	2300      	movs	r3, #0
 8003044:	f7fd fcd2 	bl	80009ec <__aeabi_dcmplt>
 8003048:	2800      	cmp	r0, #0
 800304a:	f000 8145 	beq.w	80032d8 <_etoa+0x320>
    value = -value;
 800304e:	ee18 3a90 	vmov	r3, s17
 8003052:	ee18 8a10 	vmov	r8, s16
 8003056:	f103 4900 	add.w	r9, r3, #2147483648	; 0x80000000
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800305a:	9b06      	ldr	r3, [sp, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800305c:	f3c9 500a 	ubfx	r0, r9, #20, #11
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003060:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003064:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003068:	bf08      	it	eq
 800306a:	2406      	moveq	r4, #6
 800306c:	930b      	str	r3, [sp, #44]	; 0x2c
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800306e:	f7fd f9e1 	bl	8000434 <__aeabi_i2d>
 8003072:	a3a1      	add	r3, pc, #644	; (adr r3, 80032f8 <_etoa+0x340>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fa46 	bl	8000508 <__aeabi_dmul>
 800307c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003300 <_etoa+0x348>)
 800307e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003082:	f7fd f88b 	bl	800019c <__adddf3>
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003086:	f3c9 0513 	ubfx	r5, r9, #0, #20
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800308a:	460f      	mov	r7, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800308c:	f045 517f 	orr.w	r1, r5, #1069547520	; 0x3fc00000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003090:	4606      	mov	r6, r0
 8003092:	4baa      	ldr	r3, [pc, #680]	; (800333c <_etoa+0x384>)
 8003094:	2200      	movs	r2, #0
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003096:	4640      	mov	r0, r8
 8003098:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800309c:	f7fd f87c 	bl	8000198 <__aeabi_dsub>
 80030a0:	a399      	add	r3, pc, #612	; (adr r3, 8003308 <_etoa+0x350>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f7fd fa2f 	bl	8000508 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4630      	mov	r0, r6
 80030b0:	4639      	mov	r1, r7
 80030b2:	f7fd f873 	bl	800019c <__adddf3>
 80030b6:	f7fd fcc1 	bl	8000a3c <__aeabi_d2iz>
 80030ba:	4683      	mov	fp, r0
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80030bc:	f7fd f9ba 	bl	8000434 <__aeabi_i2d>
 80030c0:	a393      	add	r3, pc, #588	; (adr r3, 8003310 <_etoa+0x358>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	4606      	mov	r6, r0
 80030c8:	460f      	mov	r7, r1
 80030ca:	f7fd fa1d 	bl	8000508 <__aeabi_dmul>
 80030ce:	4b9c      	ldr	r3, [pc, #624]	; (8003340 <_etoa+0x388>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	f7fd f863 	bl	800019c <__adddf3>
 80030d6:	f7fd fcb1 	bl	8000a3c <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80030da:	a38f      	add	r3, pc, #572	; (adr r3, 8003318 <_etoa+0x360>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80030e0:	4605      	mov	r5, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80030e2:	4639      	mov	r1, r7
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7fd fa0f 	bl	8000508 <__aeabi_dmul>
 80030ea:	4606      	mov	r6, r0
 80030ec:	4628      	mov	r0, r5
 80030ee:	460f      	mov	r7, r1
 80030f0:	f7fd f9a0 	bl	8000434 <__aeabi_i2d>
 80030f4:	a38a      	add	r3, pc, #552	; (adr r3, 8003320 <_etoa+0x368>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	f7fd fa05 	bl	8000508 <__aeabi_dmul>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4630      	mov	r0, r6
 8003104:	4639      	mov	r1, r7
 8003106:	f7fd f847 	bl	8000198 <__aeabi_dsub>
  const double z2 = z * z;
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800310e:	4606      	mov	r6, r0
 8003110:	460f      	mov	r7, r1
  const double z2 = z * z;
 8003112:	f7fd f9f9 	bl	8000508 <__aeabi_dmul>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003116:	4632      	mov	r2, r6
  const double z2 = z * z;
 8003118:	ec41 0b1a 	vmov	d10, r0, r1
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800311c:	463b      	mov	r3, r7
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	f7fd f83b 	bl	800019c <__adddf3>
 8003126:	4b87      	ldr	r3, [pc, #540]	; (8003344 <_etoa+0x38c>)
 8003128:	ec41 0b1b 	vmov	d11, r0, r1
 800312c:	2200      	movs	r2, #0
 800312e:	ec51 0b1a 	vmov	r0, r1, d10
 8003132:	f7fd fb13 	bl	800075c <__aeabi_ddiv>
 8003136:	4b84      	ldr	r3, [pc, #528]	; (8003348 <_etoa+0x390>)
 8003138:	2200      	movs	r2, #0
 800313a:	f7fd f82f 	bl	800019c <__adddf3>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	ec51 0b1a 	vmov	r0, r1, d10
 8003146:	f7fd fb09 	bl	800075c <__aeabi_ddiv>
 800314a:	4b80      	ldr	r3, [pc, #512]	; (800334c <_etoa+0x394>)
 800314c:	2200      	movs	r2, #0
 800314e:	f7fd f825 	bl	800019c <__adddf3>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	ec51 0b1a 	vmov	r0, r1, d10
 800315a:	f7fd faff 	bl	800075c <__aeabi_ddiv>
 800315e:	4632      	mov	r2, r6
 8003160:	ec41 0b1a 	vmov	d10, r0, r1
 8003164:	463b      	mov	r3, r7
 8003166:	2000      	movs	r0, #0
 8003168:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800316c:	f7fd f814 	bl	8000198 <__aeabi_dsub>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	ec51 0b1a 	vmov	r0, r1, d10
 8003178:	f7fd f810 	bl	800019c <__adddf3>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	ec51 0b1b 	vmov	r0, r1, d11
 8003184:	f7fd faea 	bl	800075c <__aeabi_ddiv>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003188:	f205 35ff 	addw	r5, r5, #1023	; 0x3ff
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800318c:	4b70      	ldr	r3, [pc, #448]	; (8003350 <_etoa+0x398>)
 800318e:	2200      	movs	r2, #0
 8003190:	f7fd f804 	bl	800019c <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8003194:	2200      	movs	r2, #0
 8003196:	052b      	lsls	r3, r5, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003198:	f7fd f9b6 	bl	8000508 <__aeabi_dmul>
  if (value < conv.F) {
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80031a0:	4606      	mov	r6, r0
 80031a2:	460f      	mov	r7, r1
  if (value < conv.F) {
 80031a4:	f7fd fc40 	bl	8000a28 <__aeabi_dcmpgt>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	f040 8098 	bne.w	80032de <_etoa+0x326>
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80031ae:	e9cd 6708 	strd	r6, r7, [sp, #32]
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80031b2:	f10b 0363 	add.w	r3, fp, #99	; 0x63
 80031b6:	2bc7      	cmp	r3, #199	; 0xc7
  if (flags & FLAGS_ADAPT_EXP) {
 80031b8:	9b06      	ldr	r3, [sp, #24]
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80031ba:	bf34      	ite	cc
 80031bc:	2504      	movcc	r5, #4
 80031be:	2505      	movcs	r5, #5
  if (flags & FLAGS_ADAPT_EXP) {
 80031c0:	0519      	lsls	r1, r3, #20
 80031c2:	d522      	bpl.n	800320a <_etoa+0x252>
    if ((value >= 1e-4) && (value < 1e6)) {
 80031c4:	a358      	add	r3, pc, #352	; (adr r3, 8003328 <_etoa+0x370>)
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	4640      	mov	r0, r8
 80031cc:	4649      	mov	r1, r9
 80031ce:	f7fd fc21 	bl	8000a14 <__aeabi_dcmpge>
 80031d2:	2800      	cmp	r0, #0
 80031d4:	f000 80be 	beq.w	8003354 <_etoa+0x39c>
 80031d8:	a355      	add	r3, pc, #340	; (adr r3, 8003330 <_etoa+0x378>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	4640      	mov	r0, r8
 80031e0:	4649      	mov	r1, r9
 80031e2:	f7fd fc03 	bl	80009ec <__aeabi_dcmplt>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	f000 80b4 	beq.w	8003354 <_etoa+0x39c>
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80031ec:	9b06      	ldr	r3, [sp, #24]
      if ((int)prec > expval) {
 80031ee:	455c      	cmp	r4, fp
        prec = (unsigned)((int)prec - expval - 1);
 80031f0:	bfc8      	it	gt
 80031f2:	eba4 000b 	subgt.w	r0, r4, fp
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80031f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
      minwidth = 0U;
 80031fa:	f04f 0500 	mov.w	r5, #0
        prec = (unsigned)((int)prec - expval - 1);
 80031fe:	bfcc      	ite	gt
 8003200:	f100 34ff 	addgt.w	r4, r0, #4294967295
        prec = 0;
 8003204:	2400      	movle	r4, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8003206:	9306      	str	r3, [sp, #24]
      expval   = 0;
 8003208:	46ab      	mov	fp, r5
  if (width > minwidth) {
 800320a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800320c:	429d      	cmp	r5, r3
    fwidth -= minwidth;
 800320e:	bf38      	it	cc
 8003210:	1b5e      	subcc	r6, r3, r5
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003212:	9b06      	ldr	r3, [sp, #24]
    fwidth = 0U;
 8003214:	bf28      	it	cs
 8003216:	2600      	movcs	r6, #0
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003218:	f013 0702 	ands.w	r7, r3, #2
 800321c:	d002      	beq.n	8003224 <_etoa+0x26c>
    fwidth = 0U;
 800321e:	2d00      	cmp	r5, #0
 8003220:	bf18      	it	ne
 8003222:	2600      	movne	r6, #0
  if (expval) {
 8003224:	f1bb 0f00 	cmp.w	fp, #0
 8003228:	d007      	beq.n	800323a <_etoa+0x282>
    value /= conv.F;
 800322a:	4640      	mov	r0, r8
 800322c:	4649      	mov	r1, r9
 800322e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003232:	f7fd fa93 	bl	800075c <__aeabi_ddiv>
 8003236:	4680      	mov	r8, r0
 8003238:	4689      	mov	r9, r1
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800323a:	ec51 0b18 	vmov	r0, r1, d8
 800323e:	2200      	movs	r2, #0
 8003240:	2300      	movs	r3, #0
 8003242:	f7fd fbd3 	bl	80009ec <__aeabi_dcmplt>
 8003246:	b110      	cbz	r0, 800324e <_etoa+0x296>
 8003248:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800324c:	4699      	mov	r9, r3
 800324e:	9b06      	ldr	r3, [sp, #24]
 8003250:	9a07      	ldr	r2, [sp, #28]
 8003252:	9402      	str	r4, [sp, #8]
 8003254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003258:	e9cd 6303 	strd	r6, r3, [sp, #12]
 800325c:	e9cd 8900 	strd	r8, r9, [sp]
 8003260:	ee19 3a90 	vmov	r3, s19
 8003264:	ee19 0a10 	vmov	r0, s18
 8003268:	4651      	mov	r1, sl
 800326a:	f000 f889 	bl	8003380 <_ftoa>
  if (minwidth) {
 800326e:	b375      	cbz	r5, 80032ce <_etoa+0x316>
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003270:	9b06      	ldr	r3, [sp, #24]
 8003272:	f013 0f20 	tst.w	r3, #32
 8003276:	f100 0601 	add.w	r6, r0, #1
 800327a:	4602      	mov	r2, r0
 800327c:	ee19 3a90 	vmov	r3, s19
 8003280:	bf14      	ite	ne
 8003282:	2045      	movne	r0, #69	; 0x45
 8003284:	2065      	moveq	r0, #101	; 0x65
 8003286:	4651      	mov	r1, sl
 8003288:	ee19 4a10 	vmov	r4, s18
 800328c:	47a0      	blx	r4
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800328e:	2305      	movs	r3, #5
 8003290:	2200      	movs	r2, #0
 8003292:	9305      	str	r3, [sp, #20]
 8003294:	ea8b 70eb 	eor.w	r0, fp, fp, asr #31
 8003298:	230a      	movs	r3, #10
 800329a:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800329e:	eba0 70eb 	sub.w	r0, r0, fp, asr #31
 80032a2:	ea4f 73db 	mov.w	r3, fp, lsr #31
 80032a6:	3d01      	subs	r5, #1
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	9000      	str	r0, [sp, #0]
 80032ac:	ee19 3a90 	vmov	r3, s19
 80032b0:	ee19 0a10 	vmov	r0, s18
 80032b4:	9504      	str	r5, [sp, #16]
 80032b6:	4632      	mov	r2, r6
 80032b8:	4651      	mov	r1, sl
 80032ba:	f7ff fdde 	bl	8002e7a <_ntoa_long>
    if (flags & FLAGS_LEFT) {
 80032be:	b137      	cbz	r7, 80032ce <_etoa+0x316>
 80032c0:	9b07      	ldr	r3, [sp, #28]
 80032c2:	1ac5      	subs	r5, r0, r3
 80032c4:	9b07      	ldr	r3, [sp, #28]
 80032c6:	1958      	adds	r0, r3, r5
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80032c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ca:	42ab      	cmp	r3, r5
 80032cc:	d84b      	bhi.n	8003366 <_etoa+0x3ae>
}
 80032ce:	b00d      	add	sp, #52	; 0x34
 80032d0:	ecbd 8b08 	vpop	{d8-d11}
 80032d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d8:	ec59 8b18 	vmov	r8, r9, d8
 80032dc:	e6bd      	b.n	800305a <_etoa+0xa2>
    conv.F /= 10;
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <_etoa+0x390>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	4630      	mov	r0, r6
 80032e4:	4639      	mov	r1, r7
 80032e6:	f7fd fa39 	bl	800075c <__aeabi_ddiv>
    expval--;
 80032ea:	f10b 3bff 	add.w	fp, fp, #4294967295
    conv.F /= 10;
 80032ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80032f2:	e75e      	b.n	80031b2 <_etoa+0x1fa>
 80032f4:	f3af 8000 	nop.w
 80032f8:	509f79fb 	.word	0x509f79fb
 80032fc:	3fd34413 	.word	0x3fd34413
 8003300:	8b60c8b3 	.word	0x8b60c8b3
 8003304:	3fc68a28 	.word	0x3fc68a28
 8003308:	636f4361 	.word	0x636f4361
 800330c:	3fd287a7 	.word	0x3fd287a7
 8003310:	0979a371 	.word	0x0979a371
 8003314:	400a934f 	.word	0x400a934f
 8003318:	bbb55516 	.word	0xbbb55516
 800331c:	40026bb1 	.word	0x40026bb1
 8003320:	fefa39ef 	.word	0xfefa39ef
 8003324:	3fe62e42 	.word	0x3fe62e42
 8003328:	eb1c432d 	.word	0xeb1c432d
 800332c:	3f1a36e2 	.word	0x3f1a36e2
 8003330:	00000000 	.word	0x00000000
 8003334:	412e8480 	.word	0x412e8480
 8003338:	7fefffff 	.word	0x7fefffff
 800333c:	3ff80000 	.word	0x3ff80000
 8003340:	3fe00000 	.word	0x3fe00000
 8003344:	402c0000 	.word	0x402c0000
 8003348:	40240000 	.word	0x40240000
 800334c:	40180000 	.word	0x40180000
 8003350:	3ff00000 	.word	0x3ff00000
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003354:	2c00      	cmp	r4, #0
 8003356:	f43f af58 	beq.w	800320a <_etoa+0x252>
 800335a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	f43f af54 	beq.w	800320a <_etoa+0x252>
        --prec;
 8003362:	3c01      	subs	r4, #1
 8003364:	e751      	b.n	800320a <_etoa+0x252>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003366:	4602      	mov	r2, r0
 8003368:	ee19 3a90 	vmov	r3, s19
 800336c:	ee19 4a10 	vmov	r4, s18
 8003370:	4651      	mov	r1, sl
 8003372:	2020      	movs	r0, #32
 8003374:	47a0      	blx	r4
 8003376:	3501      	adds	r5, #1
 8003378:	e7a4      	b.n	80032c4 <_etoa+0x30c>
 800337a:	bf00      	nop
 800337c:	0000      	movs	r0, r0
	...

08003380 <_ftoa>:
{
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003384:	ed2d 8b08 	vpush	{d8-d11}
 8003388:	b08f      	sub	sp, #60	; 0x3c
 800338a:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800338e:	ee09 3a10 	vmov	s18, r3
 8003392:	e9dd 5322 	ldrd	r5, r3, [sp, #136]	; 0x88
 8003396:	ee08 0a10 	vmov	s16, r0
 800339a:	ee08 2a90 	vmov	s17, r2
 800339e:	460f      	mov	r7, r1
 80033a0:	9304      	str	r3, [sp, #16]
  if (value != value)
 80033a2:	4652      	mov	r2, sl
 80033a4:	465b      	mov	r3, fp
 80033a6:	4650      	mov	r0, sl
 80033a8:	4659      	mov	r1, fp
{
 80033aa:	9e24      	ldr	r6, [sp, #144]	; 0x90
  if (value != value)
 80033ac:	f7fd fb14 	bl	80009d8 <__aeabi_dcmpeq>
 80033b0:	b9a0      	cbnz	r0, 80033dc <_ftoa+0x5c>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80033b2:	9b04      	ldr	r3, [sp, #16]
 80033b4:	9322      	str	r3, [sp, #136]	; 0x88
 80033b6:	2303      	movs	r3, #3
 80033b8:	9321      	str	r3, [sp, #132]	; 0x84
 80033ba:	4bb9      	ldr	r3, [pc, #740]	; (80036a0 <_ftoa+0x320>)
 80033bc:	9623      	str	r6, [sp, #140]	; 0x8c
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80033be:	9320      	str	r3, [sp, #128]	; 0x80
 80033c0:	ee18 2a90 	vmov	r2, s17
 80033c4:	ee19 3a10 	vmov	r3, s18
 80033c8:	ee18 0a10 	vmov	r0, s16
 80033cc:	4639      	mov	r1, r7
}
 80033ce:	b00f      	add	sp, #60	; 0x3c
 80033d0:	ecbd 8b08 	vpop	{d8-d11}
 80033d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80033d8:	f7ff bc87 	b.w	8002cea <_out_rev>
  if (value < -DBL_MAX)
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80033e4:	4650      	mov	r0, sl
 80033e6:	4659      	mov	r1, fp
 80033e8:	f7fd fb00 	bl	80009ec <__aeabi_dcmplt>
 80033ec:	b130      	cbz	r0, 80033fc <_ftoa+0x7c>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80033ee:	9b04      	ldr	r3, [sp, #16]
 80033f0:	9322      	str	r3, [sp, #136]	; 0x88
 80033f2:	2304      	movs	r3, #4
 80033f4:	9321      	str	r3, [sp, #132]	; 0x84
 80033f6:	9623      	str	r6, [sp, #140]	; 0x8c
 80033f8:	4baa      	ldr	r3, [pc, #680]	; (80036a4 <_ftoa+0x324>)
 80033fa:	e7e0      	b.n	80033be <_ftoa+0x3e>
  if (value > DBL_MAX)
 80033fc:	4baa      	ldr	r3, [pc, #680]	; (80036a8 <_ftoa+0x328>)
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003402:	4650      	mov	r0, sl
 8003404:	4659      	mov	r1, fp
 8003406:	f7fd fb0f 	bl	8000a28 <__aeabi_dcmpgt>
 800340a:	b170      	cbz	r0, 800342a <_ftoa+0xaa>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800340c:	4aa7      	ldr	r2, [pc, #668]	; (80036ac <_ftoa+0x32c>)
 800340e:	9904      	ldr	r1, [sp, #16]
 8003410:	9623      	str	r6, [sp, #140]	; 0x8c
 8003412:	f006 0304 	and.w	r3, r6, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf08      	it	eq
 800341a:	2203      	moveq	r2, #3
 800341c:	4ba4      	ldr	r3, [pc, #656]	; (80036b0 <_ftoa+0x330>)
 800341e:	bf1c      	itt	ne
 8003420:	4613      	movne	r3, r2
 8003422:	2204      	movne	r2, #4
 8003424:	e9cd 2121 	strd	r2, r1, [sp, #132]	; 0x84
 8003428:	e7c9      	b.n	80033be <_ftoa+0x3e>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800342a:	a399      	add	r3, pc, #612	; (adr r3, 8003690 <_ftoa+0x310>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	4650      	mov	r0, sl
 8003432:	4659      	mov	r1, fp
 8003434:	f7fd faf8 	bl	8000a28 <__aeabi_dcmpgt>
 8003438:	b938      	cbnz	r0, 800344a <_ftoa+0xca>
 800343a:	a397      	add	r3, pc, #604	; (adr r3, 8003698 <_ftoa+0x318>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	4650      	mov	r0, sl
 8003442:	4659      	mov	r1, fp
 8003444:	f7fd fad2 	bl	80009ec <__aeabi_dcmplt>
 8003448:	b198      	cbz	r0, 8003472 <_ftoa+0xf2>
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800344a:	9b04      	ldr	r3, [sp, #16]
 800344c:	9624      	str	r6, [sp, #144]	; 0x90
 800344e:	e9cd 5322 	strd	r5, r3, [sp, #136]	; 0x88
 8003452:	ee18 2a90 	vmov	r2, s17
 8003456:	ee19 3a10 	vmov	r3, s18
 800345a:	ee18 0a10 	vmov	r0, s16
 800345e:	4639      	mov	r1, r7
 8003460:	e9cd ab20 	strd	sl, fp, [sp, #128]	; 0x80
}
 8003464:	b00f      	add	sp, #60	; 0x3c
 8003466:	ecbd 8b08 	vpop	{d8-d11}
 800346a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800346e:	f7ff bda3 	b.w	8002fb8 <_etoa>
  if (value < 0) {
 8003472:	2200      	movs	r2, #0
 8003474:	2300      	movs	r3, #0
 8003476:	4650      	mov	r0, sl
 8003478:	4659      	mov	r1, fp
 800347a:	f7fd fab7 	bl	80009ec <__aeabi_dcmplt>
 800347e:	2800      	cmp	r0, #0
 8003480:	f000 8081 	beq.w	8003586 <_ftoa+0x206>
    value = 0 - value;
 8003484:	465b      	mov	r3, fp
 8003486:	4652      	mov	r2, sl
 8003488:	2000      	movs	r0, #0
 800348a:	2100      	movs	r1, #0
 800348c:	f7fc fe84 	bl	8000198 <__aeabi_dsub>
    negative = true;
 8003490:	2301      	movs	r3, #1
    value = 0 - value;
 8003492:	4682      	mov	sl, r0
 8003494:	468b      	mov	fp, r1
    negative = true;
 8003496:	9305      	str	r3, [sp, #20]
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003498:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800349c:	bf08      	it	eq
 800349e:	2506      	moveq	r5, #6
 80034a0:	ab06      	add	r3, sp, #24
 80034a2:	f1a5 0220 	sub.w	r2, r5, #32
 80034a6:	46a9      	mov	r9, r5
    buf[len++] = '0';
 80034a8:	2130      	movs	r1, #48	; 0x30
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80034aa:	f1b9 0f09 	cmp.w	r9, #9
 80034ae:	eba5 0409 	sub.w	r4, r5, r9
 80034b2:	d906      	bls.n	80034c2 <_ftoa+0x142>
    prec--;
 80034b4:	f109 39ff 	add.w	r9, r9, #4294967295
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80034b8:	454a      	cmp	r2, r9
    buf[len++] = '0';
 80034ba:	f803 1b01 	strb.w	r1, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80034be:	d1f4      	bne.n	80034aa <_ftoa+0x12a>
 80034c0:	2420      	movs	r4, #32
  int whole = (int)value;
 80034c2:	4659      	mov	r1, fp
 80034c4:	4650      	mov	r0, sl
 80034c6:	f7fd fab9 	bl	8000a3c <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 80034ca:	4b7a      	ldr	r3, [pc, #488]	; (80036b4 <_ftoa+0x334>)
 80034cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80034d0:	ed93 7b00 	vldr	d7, [r3]
  int whole = (int)value;
 80034d4:	4605      	mov	r5, r0
  double tmp = (value - whole) * pow10[prec];
 80034d6:	eeb0 aa47 	vmov.f32	s20, s14
 80034da:	eef0 aa67 	vmov.f32	s21, s15
 80034de:	f7fc ffa9 	bl	8000434 <__aeabi_i2d>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4650      	mov	r0, sl
 80034e8:	4659      	mov	r1, fp
 80034ea:	f7fc fe55 	bl	8000198 <__aeabi_dsub>
 80034ee:	ec53 2b1a 	vmov	r2, r3, d10
 80034f2:	f7fd f809 	bl	8000508 <__aeabi_dmul>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	ec43 2b1b 	vmov	d11, r2, r3
  unsigned long frac = (unsigned long)tmp;
 80034fe:	f7fd fac5 	bl	8000a8c <__aeabi_d2uiz>
 8003502:	4680      	mov	r8, r0
  diff = tmp - frac;
 8003504:	f7fc ff86 	bl	8000414 <__aeabi_ui2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec51 0b1b 	vmov	r0, r1, d11
 8003510:	f7fc fe42 	bl	8000198 <__aeabi_dsub>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	ec43 2b1b 	vmov	d11, r2, r3
  if (diff > 0.5) {
 800351c:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <_ftoa+0x338>)
 800351e:	2200      	movs	r2, #0
 8003520:	f7fd fa82 	bl	8000a28 <__aeabi_dcmpgt>
 8003524:	b388      	cbz	r0, 800358a <_ftoa+0x20a>
    ++frac;
 8003526:	f108 0801 	add.w	r8, r8, #1
    if (frac >= pow10[prec]) {
 800352a:	4640      	mov	r0, r8
 800352c:	f7fc ff72 	bl	8000414 <__aeabi_ui2d>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	ec51 0b1a 	vmov	r0, r1, d10
 8003538:	f7fd fa62 	bl	8000a00 <__aeabi_dcmple>
 800353c:	b110      	cbz	r0, 8003544 <_ftoa+0x1c4>
      ++whole;
 800353e:	3501      	adds	r5, #1
      frac = 0;
 8003540:	f04f 0800 	mov.w	r8, #0
  if (prec == 0U) {
 8003544:	f1b9 0f00 	cmp.w	r9, #0
 8003548:	d150      	bne.n	80035ec <_ftoa+0x26c>
    diff = value - (double)whole;
 800354a:	4628      	mov	r0, r5
 800354c:	f7fc ff72 	bl	8000434 <__aeabi_i2d>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4650      	mov	r0, sl
 8003556:	4659      	mov	r1, fp
 8003558:	f7fc fe1e 	bl	8000198 <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800355c:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <_ftoa+0x338>)
 800355e:	2200      	movs	r2, #0
    diff = value - (double)whole;
 8003560:	4680      	mov	r8, r0
 8003562:	4689      	mov	r9, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003564:	f7fd fa42 	bl	80009ec <__aeabi_dcmplt>
 8003568:	b130      	cbz	r0, 8003578 <_ftoa+0x1f8>
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <_ftoa+0x338>)
 800356c:	2200      	movs	r2, #0
 800356e:	4640      	mov	r0, r8
 8003570:	4649      	mov	r1, r9
 8003572:	f7fd fa59 	bl	8000a28 <__aeabi_dcmpgt>
 8003576:	b110      	cbz	r0, 800357e <_ftoa+0x1fe>
 8003578:	07e8      	lsls	r0, r5, #31
 800357a:	d500      	bpl.n	800357e <_ftoa+0x1fe>
      ++whole;
 800357c:	3501      	adds	r5, #1
 800357e:	ab06      	add	r3, sp, #24
 8003580:	4423      	add	r3, r4
    buf[len++] = (char)(48 + (whole % 10));
 8003582:	220a      	movs	r2, #10
 8003584:	e059      	b.n	800363a <_ftoa+0x2ba>
  bool negative = false;
 8003586:	9005      	str	r0, [sp, #20]
 8003588:	e786      	b.n	8003498 <_ftoa+0x118>
  else if (diff < 0.5) {
 800358a:	4b4b      	ldr	r3, [pc, #300]	; (80036b8 <_ftoa+0x338>)
 800358c:	ec51 0b1b 	vmov	r0, r1, d11
 8003590:	2200      	movs	r2, #0
 8003592:	f7fd fa2b 	bl	80009ec <__aeabi_dcmplt>
 8003596:	2800      	cmp	r0, #0
 8003598:	d1d4      	bne.n	8003544 <_ftoa+0x1c4>
  else if ((frac == 0U) || (frac & 1U)) {
 800359a:	f1b8 0f00 	cmp.w	r8, #0
 800359e:	d002      	beq.n	80035a6 <_ftoa+0x226>
 80035a0:	f018 0f01 	tst.w	r8, #1
 80035a4:	d0ce      	beq.n	8003544 <_ftoa+0x1c4>
    ++frac;
 80035a6:	f108 0801 	add.w	r8, r8, #1
 80035aa:	e7cb      	b.n	8003544 <_ftoa+0x1c4>
      buf[len++] = (char)(48U + (frac % 10U));
 80035ac:	fbb8 f0f1 	udiv	r0, r8, r1
 80035b0:	fb01 8210 	mls	r2, r1, r0, r8
 80035b4:	3230      	adds	r2, #48	; 0x30
      if (!(frac /= 10U)) {
 80035b6:	f1b8 0f09 	cmp.w	r8, #9
      buf[len++] = (char)(48U + (frac % 10U));
 80035ba:	f803 2b01 	strb.w	r2, [r3], #1
      --count;
 80035be:	f109 39ff 	add.w	r9, r9, #4294967295
      buf[len++] = (char)(48U + (frac % 10U));
 80035c2:	f104 0401 	add.w	r4, r4, #1
      if (!(frac /= 10U)) {
 80035c6:	d828      	bhi.n	800361a <_ftoa+0x29a>
 80035c8:	44a1      	add	r9, r4
      buf[len++] = '0';
 80035ca:	aa06      	add	r2, sp, #24
 80035cc:	2130      	movs	r1, #48	; 0x30
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80035ce:	2c20      	cmp	r4, #32
 80035d0:	d011      	beq.n	80035f6 <_ftoa+0x276>
 80035d2:	454c      	cmp	r4, r9
 80035d4:	f104 0301 	add.w	r3, r4, #1
 80035d8:	d121      	bne.n	800361e <_ftoa+0x29e>
      buf[len++] = '.';
 80035da:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80035de:	eb0d 0402 	add.w	r4, sp, r2
 80035e2:	222e      	movs	r2, #46	; 0x2e
 80035e4:	f804 2c20 	strb.w	r2, [r4, #-32]
 80035e8:	461c      	mov	r4, r3
 80035ea:	e7c8      	b.n	800357e <_ftoa+0x1fe>
 80035ec:	ab06      	add	r3, sp, #24
 80035ee:	4423      	add	r3, r4
      buf[len++] = (char)(48U + (frac % 10U));
 80035f0:	210a      	movs	r1, #10
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80035f2:	2c20      	cmp	r4, #32
 80035f4:	d1da      	bne.n	80035ac <_ftoa+0x22c>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80035f6:	f006 0303 	and.w	r3, r6, #3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	ab06      	add	r3, sp, #24
 80035fe:	d139      	bne.n	8003674 <_ftoa+0x2f4>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003600:	9a04      	ldr	r2, [sp, #16]
 8003602:	2a00      	cmp	r2, #0
 8003604:	d036      	beq.n	8003674 <_ftoa+0x2f4>
 8003606:	9a05      	ldr	r2, [sp, #20]
 8003608:	b912      	cbnz	r2, 8003610 <_ftoa+0x290>
 800360a:	f016 0f0c 	tst.w	r6, #12
 800360e:	d002      	beq.n	8003616 <_ftoa+0x296>
      width--;
 8003610:	9a04      	ldr	r2, [sp, #16]
 8003612:	3a01      	subs	r2, #1
 8003614:	9204      	str	r2, [sp, #16]
      buf[len++] = '0';
 8003616:	2230      	movs	r2, #48	; 0x30
 8003618:	e014      	b.n	8003644 <_ftoa+0x2c4>
      if (!(frac /= 10U)) {
 800361a:	4680      	mov	r8, r0
 800361c:	e7e9      	b.n	80035f2 <_ftoa+0x272>
      buf[len++] = '0';
 800361e:	54a1      	strb	r1, [r4, r2]
 8003620:	461c      	mov	r4, r3
 8003622:	e7d4      	b.n	80035ce <_ftoa+0x24e>
    buf[len++] = (char)(48 + (whole % 10));
 8003624:	fb95 f1f2 	sdiv	r1, r5, r2
 8003628:	fb02 5511 	mls	r5, r2, r1, r5
 800362c:	3530      	adds	r5, #48	; 0x30
 800362e:	f803 5b01 	strb.w	r5, [r3], #1
 8003632:	3401      	adds	r4, #1
    if (!(whole /= 10)) {
 8003634:	460d      	mov	r5, r1
 8003636:	2900      	cmp	r1, #0
 8003638:	d0dd      	beq.n	80035f6 <_ftoa+0x276>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800363a:	2c20      	cmp	r4, #32
 800363c:	d1f2      	bne.n	8003624 <_ftoa+0x2a4>
 800363e:	e7da      	b.n	80035f6 <_ftoa+0x276>
      buf[len++] = '0';
 8003640:	551a      	strb	r2, [r3, r4]
 8003642:	3401      	adds	r4, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003644:	9904      	ldr	r1, [sp, #16]
 8003646:	42a1      	cmp	r1, r4
 8003648:	d914      	bls.n	8003674 <_ftoa+0x2f4>
 800364a:	2c20      	cmp	r4, #32
 800364c:	d1f8      	bne.n	8003640 <_ftoa+0x2c0>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800364e:	9a04      	ldr	r2, [sp, #16]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8003656:	ee19 3a10 	vmov	r3, s18
 800365a:	ee18 2a90 	vmov	r2, s17
 800365e:	ee18 0a10 	vmov	r0, s16
 8003662:	9603      	str	r6, [sp, #12]
 8003664:	4639      	mov	r1, r7
 8003666:	f7ff fb40 	bl	8002cea <_out_rev>
}
 800366a:	b00f      	add	sp, #60	; 0x3c
 800366c:	ecbd 8b08 	vpop	{d8-d11}
 8003670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003674:	2c20      	cmp	r4, #32
 8003676:	d0ea      	beq.n	800364e <_ftoa+0x2ce>
    if (negative) {
 8003678:	9a05      	ldr	r2, [sp, #20]
 800367a:	b1fa      	cbz	r2, 80036bc <_ftoa+0x33c>
      buf[len++] = '-';
 800367c:	f104 0238 	add.w	r2, r4, #56	; 0x38
 8003680:	446a      	add	r2, sp
 8003682:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8003684:	f802 1c20 	strb.w	r1, [r2, #-32]
 8003688:	3401      	adds	r4, #1
 800368a:	e7e0      	b.n	800364e <_ftoa+0x2ce>
 800368c:	f3af 8000 	nop.w
 8003690:	00000000 	.word	0x00000000
 8003694:	41cdcd65 	.word	0x41cdcd65
 8003698:	00000000 	.word	0x00000000
 800369c:	c1cdcd65 	.word	0xc1cdcd65
 80036a0:	0800463e 	.word	0x0800463e
 80036a4:	08004642 	.word	0x08004642
 80036a8:	7fefffff 	.word	0x7fefffff
 80036ac:	08004639 	.word	0x08004639
 80036b0:	08004635 	.word	0x08004635
 80036b4:	08004648 	.word	0x08004648
 80036b8:	3fe00000 	.word	0x3fe00000
    else if (flags & FLAGS_PLUS) {
 80036bc:	0771      	lsls	r1, r6, #29
 80036be:	d504      	bpl.n	80036ca <_ftoa+0x34a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80036c0:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80036c4:	446a      	add	r2, sp
 80036c6:	212b      	movs	r1, #43	; 0x2b
 80036c8:	e7dc      	b.n	8003684 <_ftoa+0x304>
    else if (flags & FLAGS_SPACE) {
 80036ca:	0732      	lsls	r2, r6, #28
 80036cc:	d5bf      	bpl.n	800364e <_ftoa+0x2ce>
      buf[len++] = ' ';
 80036ce:	f104 0238 	add.w	r2, r4, #56	; 0x38
 80036d2:	446a      	add	r2, sp
 80036d4:	2120      	movs	r1, #32
 80036d6:	e7d5      	b.n	8003684 <_ftoa+0x304>

080036d8 <_out_char>:
  if (character) {
 80036d8:	b108      	cbz	r0, 80036de <_out_char+0x6>
    _putchar(character);
 80036da:	f000 bab7 	b.w	8003c4c <_putchar>
}
 80036de:	4770      	bx	lr

080036e0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80036e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e4:	b091      	sub	sp, #68	; 0x44
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
 80036e6:	2900      	cmp	r1, #0
{
 80036e8:	930a      	str	r3, [sp, #40]	; 0x28
    out = _out_null;
 80036ea:	4bba      	ldr	r3, [pc, #744]	; (80039d4 <_vsnprintf+0x2f4>)
 80036ec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
{
 80036ee:	4690      	mov	r8, r2
    out = _out_null;
 80036f0:	bf14      	ite	ne
 80036f2:	4681      	movne	r9, r0
 80036f4:	4699      	moveq	r9, r3
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 80036f6:	2500      	movs	r5, #0
  while (*format)
 80036f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036fa:	7818      	ldrb	r0, [r3, #0]
 80036fc:	b958      	cbnz	r0, 8003716 <_vsnprintf+0x36>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80036fe:	4545      	cmp	r5, r8
 8003700:	bf2c      	ite	cs
 8003702:	f108 32ff 	addcs.w	r2, r8, #4294967295
 8003706:	462a      	movcc	r2, r5
 8003708:	4643      	mov	r3, r8
 800370a:	2000      	movs	r0, #0
 800370c:	47c8      	blx	r9

  // return written chars without terminating \0
  return (int)idx;
}
 800370e:	4628      	mov	r0, r5
 8003710:	b011      	add	sp, #68	; 0x44
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      format++;
 8003716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8003718:	2825      	cmp	r0, #37	; 0x25
      format++;
 800371a:	f103 0301 	add.w	r3, r3, #1
 800371e:	930a      	str	r3, [sp, #40]	; 0x28
    if (*format != '%') {
 8003720:	d006      	beq.n	8003730 <_vsnprintf+0x50>
        out(*format, buffer, idx++, maxlen);
 8003722:	462a      	mov	r2, r5
 8003724:	1c6c      	adds	r4, r5, #1
 8003726:	4643      	mov	r3, r8
 8003728:	910b      	str	r1, [sp, #44]	; 0x2c
 800372a:	47c8      	blx	r9
 800372c:	4625      	mov	r5, r4
 800372e:	e1b6      	b.n	8003a9e <_vsnprintf+0x3be>
    flags = 0U;
 8003730:	2200      	movs	r2, #0
 8003732:	e006      	b.n	8003742 <_vsnprintf+0x62>
      switch (*format) {
 8003734:	2b2d      	cmp	r3, #45	; 0x2d
 8003736:	d014      	beq.n	8003762 <_vsnprintf+0x82>
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d10c      	bne.n	8003756 <_vsnprintf+0x76>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800373c:	f042 0201 	orr.w	r2, r2, #1
      format++;
 8003740:	900a      	str	r0, [sp, #40]	; 0x28
      switch (*format) {
 8003742:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003744:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003748:	2b2b      	cmp	r3, #43	; 0x2b
 800374a:	d00d      	beq.n	8003768 <_vsnprintf+0x88>
 800374c:	d8f2      	bhi.n	8003734 <_vsnprintf+0x54>
 800374e:	2b20      	cmp	r3, #32
 8003750:	d00d      	beq.n	800376e <_vsnprintf+0x8e>
 8003752:	2b23      	cmp	r3, #35	; 0x23
 8003754:	d00e      	beq.n	8003774 <_vsnprintf+0x94>
    if (_is_digit(*format)) {
 8003756:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800375a:	2c09      	cmp	r4, #9
 800375c:	d828      	bhi.n	80037b0 <_vsnprintf+0xd0>
  unsigned int i = 0U;
 800375e:	2700      	movs	r7, #0
 8003760:	e010      	b.n	8003784 <_vsnprintf+0xa4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003762:	f042 0202 	orr.w	r2, r2, #2
    } while (n);
 8003766:	e7eb      	b.n	8003740 <_vsnprintf+0x60>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003768:	f042 0204 	orr.w	r2, r2, #4
    } while (n);
 800376c:	e7e8      	b.n	8003740 <_vsnprintf+0x60>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800376e:	f042 0208 	orr.w	r2, r2, #8
    } while (n);
 8003772:	e7e5      	b.n	8003740 <_vsnprintf+0x60>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003774:	f042 0210 	orr.w	r2, r2, #16
    } while (n);
 8003778:	e7e2      	b.n	8003740 <_vsnprintf+0x60>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800377a:	240a      	movs	r4, #10
 800377c:	fb04 3707 	mla	r7, r4, r7, r3
 8003780:	3f30      	subs	r7, #48	; 0x30
 8003782:	900a      	str	r0, [sp, #40]	; 0x28
  while (_is_digit(**str)) {
 8003784:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003786:	f810 3b01 	ldrb.w	r3, [r0], #1
 800378a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 800378e:	2c09      	cmp	r4, #9
 8003790:	d9f3      	bls.n	800377a <_vsnprintf+0x9a>
    if (*format == '.') {
 8003792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b2e      	cmp	r3, #46	; 0x2e
 8003798:	d167      	bne.n	800386a <_vsnprintf+0x18a>
      format++;
 800379a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800379c:	1c58      	adds	r0, r3, #1
      if (_is_digit(*format)) {
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 80037a4:	2c09      	cmp	r4, #9
      flags |= FLAGS_PRECISION;
 80037a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      if (_is_digit(*format)) {
 80037aa:	d855      	bhi.n	8003858 <_vsnprintf+0x178>
  unsigned int i = 0U;
 80037ac:	2400      	movs	r4, #0
 80037ae:	e011      	b.n	80037d4 <_vsnprintf+0xf4>
    else if (*format == '*') {
 80037b0:	2b2a      	cmp	r3, #42	; 0x2a
 80037b2:	d108      	bne.n	80037c6 <_vsnprintf+0xe6>
      const int w = va_arg(va, int);
 80037b4:	f856 7b04 	ldr.w	r7, [r6], #4
 80037b8:	900a      	str	r0, [sp, #40]	; 0x28
      if (w < 0) {
 80037ba:	2f00      	cmp	r7, #0
        flags |= FLAGS_LEFT;    // reverse padding
 80037bc:	bfbc      	itt	lt
 80037be:	f042 0202 	orrlt.w	r2, r2, #2
        width = (unsigned int)-w;
 80037c2:	427f      	neglt	r7, r7
      format++;
 80037c4:	e7e5      	b.n	8003792 <_vsnprintf+0xb2>
    width = 0U;
 80037c6:	2700      	movs	r7, #0
 80037c8:	e7e3      	b.n	8003792 <_vsnprintf+0xb2>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80037ca:	200a      	movs	r0, #10
 80037cc:	fb00 3404 	mla	r4, r0, r4, r3
 80037d0:	3c30      	subs	r4, #48	; 0x30
 80037d2:	4660      	mov	r0, ip
  while (_is_digit(**str)) {
 80037d4:	4684      	mov	ip, r0
 80037d6:	f81c 3b01 	ldrb.w	r3, [ip], #1
 80037da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80037de:	f1be 0f09 	cmp.w	lr, #9
 80037e2:	d9f2      	bls.n	80037ca <_vsnprintf+0xea>
    switch (*format) {
 80037e4:	4603      	mov	r3, r0
 80037e6:	f813 cb01 	ldrb.w	ip, [r3], #1
 80037ea:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
 80037ee:	d048      	beq.n	8003882 <_vsnprintf+0x1a2>
 80037f0:	d83e      	bhi.n	8003870 <_vsnprintf+0x190>
 80037f2:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 80037f6:	d04d      	beq.n	8003894 <_vsnprintf+0x1b4>
 80037f8:	f1bc 0f6a 	cmp.w	ip, #106	; 0x6a
 80037fc:	d055      	beq.n	80038aa <_vsnprintf+0x1ca>
 80037fe:	4603      	mov	r3, r0
    switch (*format) {
 8003800:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003804:	930a      	str	r3, [sp, #40]	; 0x28
 8003806:	2878      	cmp	r0, #120	; 0x78
 8003808:	d88b      	bhi.n	8003722 <_vsnprintf+0x42>
 800380a:	2857      	cmp	r0, #87	; 0x57
 800380c:	d850      	bhi.n	80038b0 <_vsnprintf+0x1d0>
 800380e:	2845      	cmp	r0, #69	; 0x45
 8003810:	d005      	beq.n	800381e <_vsnprintf+0x13e>
 8003812:	d986      	bls.n	8003722 <_vsnprintf+0x42>
 8003814:	2846      	cmp	r0, #70	; 0x46
 8003816:	f000 812f 	beq.w	8003a78 <_vsnprintf+0x398>
 800381a:	2847      	cmp	r0, #71	; 0x47
 800381c:	d181      	bne.n	8003722 <_vsnprintf+0x42>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800381e:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8003822:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003824:	bf04      	itt	eq
 8003826:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800382a:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800382e:	2845      	cmp	r0, #69	; 0x45
 8003830:	bf08      	it	eq
 8003832:	f042 0220 	orreq.w	r2, r2, #32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003836:	e9cd 7203 	strd	r7, r2, [sp, #12]
 800383a:	3607      	adds	r6, #7
 800383c:	f026 0607 	bic.w	r6, r6, #7
 8003840:	9402      	str	r4, [sp, #8]
 8003842:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003846:	4648      	mov	r0, r9
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	4643      	mov	r3, r8
 800384e:	462a      	mov	r2, r5
 8003850:	910b      	str	r1, [sp, #44]	; 0x2c
 8003852:	f7ff fbb1 	bl	8002fb8 <_etoa>
 8003856:	e121      	b.n	8003a9c <_vsnprintf+0x3bc>
      else if (*format == '*') {
 8003858:	2b2a      	cmp	r3, #42	; 0x2a
 800385a:	d107      	bne.n	800386c <_vsnprintf+0x18c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800385c:	f856 4b04 	ldr.w	r4, [r6], #4
        format++;
 8003860:	980a      	ldr	r0, [sp, #40]	; 0x28
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003862:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
        format++;
 8003866:	3002      	adds	r0, #2
 8003868:	e7bc      	b.n	80037e4 <_vsnprintf+0x104>
 800386a:	980a      	ldr	r0, [sp, #40]	; 0x28
    precision = 0U;
 800386c:	2400      	movs	r4, #0
 800386e:	e7b9      	b.n	80037e4 <_vsnprintf+0x104>
    switch (*format) {
 8003870:	f1bc 0f74 	cmp.w	ip, #116	; 0x74
 8003874:	d002      	beq.n	800387c <_vsnprintf+0x19c>
 8003876:	f1bc 0f7a 	cmp.w	ip, #122	; 0x7a
 800387a:	d1c0      	bne.n	80037fe <_vsnprintf+0x11e>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800387c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
        break;
 8003880:	e7be      	b.n	8003800 <_vsnprintf+0x120>
        if (*format == 'l') {
 8003882:	f890 c001 	ldrb.w	ip, [r0, #1]
 8003886:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
 800388a:	d1f7      	bne.n	800387c <_vsnprintf+0x19c>
          flags |= FLAGS_LONG_LONG;
 800388c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
          format++;
 8003890:	1c83      	adds	r3, r0, #2
 8003892:	e7b5      	b.n	8003800 <_vsnprintf+0x120>
        if (*format == 'h') {
 8003894:	f890 c001 	ldrb.w	ip, [r0, #1]
 8003898:	f1bc 0f68 	cmp.w	ip, #104	; 0x68
 800389c:	d002      	beq.n	80038a4 <_vsnprintf+0x1c4>
        flags |= FLAGS_SHORT;
 800389e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038a2:	e7ad      	b.n	8003800 <_vsnprintf+0x120>
          flags |= FLAGS_CHAR;
 80038a4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80038a8:	e7f2      	b.n	8003890 <_vsnprintf+0x1b0>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
        break;
 80038ae:	e7a7      	b.n	8003800 <_vsnprintf+0x120>
    switch (*format) {
 80038b0:	f1a0 0358 	sub.w	r3, r0, #88	; 0x58
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	f63f af34 	bhi.w	8003722 <_vsnprintf+0x42>
 80038ba:	f20f 0c08 	addw	ip, pc, #8
 80038be:	f85c f023 	ldr.w	pc, [ip, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	08003949 	.word	0x08003949
 80038c8:	08003723 	.word	0x08003723
 80038cc:	08003723 	.word	0x08003723
 80038d0:	08003723 	.word	0x08003723
 80038d4:	08003723 	.word	0x08003723
 80038d8:	08003723 	.word	0x08003723
 80038dc:	08003723 	.word	0x08003723
 80038e0:	08003723 	.word	0x08003723
 80038e4:	08003723 	.word	0x08003723
 80038e8:	08003723 	.word	0x08003723
 80038ec:	08003949 	.word	0x08003949
 80038f0:	08003aa3 	.word	0x08003aa3
 80038f4:	08003949 	.word	0x08003949
 80038f8:	0800381f 	.word	0x0800381f
 80038fc:	08003a7d 	.word	0x08003a7d
 8003900:	0800381f 	.word	0x0800381f
 8003904:	08003723 	.word	0x08003723
 8003908:	08003949 	.word	0x08003949
 800390c:	08003723 	.word	0x08003723
 8003910:	08003723 	.word	0x08003723
 8003914:	08003723 	.word	0x08003723
 8003918:	08003723 	.word	0x08003723
 800391c:	08003723 	.word	0x08003723
 8003920:	08003949 	.word	0x08003949
 8003924:	08003beb 	.word	0x08003beb
 8003928:	08003723 	.word	0x08003723
 800392c:	08003723 	.word	0x08003723
 8003930:	08003b1f 	.word	0x08003b1f
 8003934:	08003723 	.word	0x08003723
 8003938:	08003949 	.word	0x08003949
 800393c:	08003723 	.word	0x08003723
 8003940:	08003723 	.word	0x08003723
 8003944:	08003949 	.word	0x08003949
        if (*format == 'x' || *format == 'X') {
 8003948:	2878      	cmp	r0, #120	; 0x78
 800394a:	f000 8164 	beq.w	8003c16 <_vsnprintf+0x536>
 800394e:	2858      	cmp	r0, #88	; 0x58
 8003950:	f000 815f 	beq.w	8003c12 <_vsnprintf+0x532>
        else if (*format == 'o') {
 8003954:	286f      	cmp	r0, #111	; 0x6f
 8003956:	f000 8160 	beq.w	8003c1a <_vsnprintf+0x53a>
        else if (*format == 'b') {
 800395a:	2862      	cmp	r0, #98	; 0x62
 800395c:	f000 815f 	beq.w	8003c1e <_vsnprintf+0x53e>
        if ((*format != 'i') && (*format != 'd')) {
 8003960:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003962:	f022 0210 	bic.w	r2, r2, #16
          base = 10U;
 8003966:	f04f 030a 	mov.w	r3, #10
        if ((*format != 'i') && (*format != 'd')) {
 800396a:	d003      	beq.n	8003974 <_vsnprintf+0x294>
 800396c:	2864      	cmp	r0, #100	; 0x64
 800396e:	d001      	beq.n	8003974 <_vsnprintf+0x294>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003970:	f022 020c 	bic.w	r2, r2, #12
        if (flags & FLAGS_PRECISION) {
 8003974:	f412 6f80 	tst.w	r2, #1024	; 0x400
          flags &= ~FLAGS_ZEROPAD;
 8003978:	bf18      	it	ne
 800397a:	f022 0201 	bicne.w	r2, r2, #1
        if ((*format == 'i') || (*format == 'd')) {
 800397e:	2869      	cmp	r0, #105	; 0x69
          if (flags & FLAGS_LONG_LONG) {
 8003980:	f402 7c00 	and.w	ip, r2, #512	; 0x200
        if ((*format == 'i') || (*format == 'd')) {
 8003984:	d001      	beq.n	800398a <_vsnprintf+0x2aa>
 8003986:	2864      	cmp	r0, #100	; 0x64
 8003988:	d141      	bne.n	8003a0e <_vsnprintf+0x32e>
          if (flags & FLAGS_LONG_LONG) {
 800398a:	f1bc 0f00 	cmp.w	ip, #0
 800398e:	d023      	beq.n	80039d8 <_vsnprintf+0x2f8>
            const long long value = va_arg(va, long long);
 8003990:	3607      	adds	r6, #7
 8003992:	f026 0607 	bic.w	r6, r6, #7
 8003996:	46b2      	mov	sl, r6
 8003998:	6876      	ldr	r6, [r6, #4]
 800399a:	f85a 0b08 	ldr.w	r0, [sl], #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800399e:	9304      	str	r3, [sp, #16]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	0ff3      	lsrs	r3, r6, #31
 80039a6:	2e00      	cmp	r6, #0
 80039a8:	9302      	str	r3, [sp, #8]
 80039aa:	e9cd 7207 	strd	r7, r2, [sp, #28]
 80039ae:	9406      	str	r4, [sp, #24]
 80039b0:	4603      	mov	r3, r0
 80039b2:	da02      	bge.n	80039ba <_vsnprintf+0x2da>
 80039b4:	4243      	negs	r3, r0
 80039b6:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 80039ba:	e9cd 3600 	strd	r3, r6, [sp]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80039be:	4643      	mov	r3, r8
 80039c0:	462a      	mov	r2, r5
 80039c2:	4648      	mov	r0, r9
 80039c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80039c6:	f7ff fa9a 	bl	8002efe <_ntoa_long_long>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80039ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039cc:	4605      	mov	r5, r0
        break;
 80039ce:	4656      	mov	r6, sl
 80039d0:	e692      	b.n	80036f8 <_vsnprintf+0x18>
 80039d2:	bf00      	nop
 80039d4:	08002ce9 	.word	0x08002ce9
          else if (flags & FLAGS_LONG) {
 80039d8:	05d0      	lsls	r0, r2, #23
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80039da:	f106 0a04 	add.w	sl, r6, #4
          else if (flags & FLAGS_LONG) {
 80039de:	d50c      	bpl.n	80039fa <_vsnprintf+0x31a>
            const long value = va_arg(va, long);
 80039e0:	6830      	ldr	r0, [r6, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80039e2:	e9cd 7204 	strd	r7, r2, [sp, #16]
 80039e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80039ea:	2800      	cmp	r0, #0
 80039ec:	ea4f 73d0 	mov.w	r3, r0, lsr #31
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	bfb8      	it	lt
 80039f4:	4240      	neglt	r0, r0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80039f6:	9000      	str	r0, [sp, #0]
 80039f8:	e027      	b.n	8003a4a <_vsnprintf+0x36a>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80039fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80039fe:	6830      	ldr	r0, [r6, #0]
 8003a00:	d001      	beq.n	8003a06 <_vsnprintf+0x326>
 8003a02:	b2c0      	uxtb	r0, r0
 8003a04:	e7ed      	b.n	80039e2 <_vsnprintf+0x302>
 8003a06:	0616      	lsls	r6, r2, #24
 8003a08:	bf48      	it	mi
 8003a0a:	b200      	sxthmi	r0, r0
 8003a0c:	e7e9      	b.n	80039e2 <_vsnprintf+0x302>
          if (flags & FLAGS_LONG_LONG) {
 8003a0e:	f1bc 0f00 	cmp.w	ip, #0
 8003a12:	d00e      	beq.n	8003a32 <_vsnprintf+0x352>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003a14:	e9cd 7207 	strd	r7, r2, [sp, #28]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8003a1e:	3607      	adds	r6, #7
 8003a20:	f026 0a07 	bic.w	sl, r6, #7
 8003a24:	9406      	str	r4, [sp, #24]
 8003a26:	9202      	str	r2, [sp, #8]
 8003a28:	e8fa 2302 	ldrd	r2, r3, [sl], #8
 8003a2c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a30:	e7c5      	b.n	80039be <_vsnprintf+0x2de>
          else if (flags & FLAGS_LONG) {
 8003a32:	05d0      	lsls	r0, r2, #23
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003a34:	f106 0a04 	add.w	sl, r6, #4
          else if (flags & FLAGS_LONG) {
 8003a38:	d50e      	bpl.n	8003a58 <_vsnprintf+0x378>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003a3a:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8003a3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003a42:	f8cd c004 	str.w	ip, [sp, #4]
 8003a46:	6833      	ldr	r3, [r6, #0]
 8003a48:	9300      	str	r3, [sp, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003a4a:	4643      	mov	r3, r8
 8003a4c:	462a      	mov	r2, r5
 8003a4e:	4648      	mov	r0, r9
 8003a50:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a52:	f7ff fa12 	bl	8002e7a <_ntoa_long>
 8003a56:	e7b8      	b.n	80039ca <_vsnprintf+0x2ea>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003a58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a5c:	6830      	ldr	r0, [r6, #0]
 8003a5e:	d007      	beq.n	8003a70 <_vsnprintf+0x390>
 8003a60:	b2c0      	uxtb	r0, r0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003a62:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003a66:	2300      	movs	r3, #0
 8003a68:	e9cd 7204 	strd	r7, r2, [sp, #16]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	e7c2      	b.n	80039f6 <_vsnprintf+0x316>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003a70:	0616      	lsls	r6, r2, #24
 8003a72:	bf48      	it	mi
 8003a74:	b280      	uxthmi	r0, r0
 8003a76:	e7f4      	b.n	8003a62 <_vsnprintf+0x382>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003a78:	f042 0220 	orr.w	r2, r2, #32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003a7c:	e9cd 7203 	strd	r7, r2, [sp, #12]
 8003a80:	3607      	adds	r6, #7
 8003a82:	f026 0607 	bic.w	r6, r6, #7
 8003a86:	9402      	str	r4, [sp, #8]
 8003a88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003a8c:	4648      	mov	r0, r9
 8003a8e:	e9cd 2300 	strd	r2, r3, [sp]
 8003a92:	4643      	mov	r3, r8
 8003a94:	462a      	mov	r2, r5
 8003a96:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a98:	f7ff fc72 	bl	8003380 <_ftoa>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003a9c:	4605      	mov	r5, r0
        out(*format, buffer, idx++, maxlen);
 8003a9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
        break;
 8003aa0:	e62a      	b.n	80036f8 <_vsnprintf+0x18>
        if (!(flags & FLAGS_LEFT)) {
 8003aa2:	f012 0402 	ands.w	r4, r2, #2
 8003aa6:	d026      	beq.n	8003af6 <_vsnprintf+0x416>
        unsigned int l = 1U;
 8003aa8:	f04f 0a01 	mov.w	sl, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003aac:	f856 0b04 	ldr.w	r0, [r6], #4
 8003ab0:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ab2:	4643      	mov	r3, r8
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	b2c0      	uxtb	r0, r0
 8003ab8:	47c8      	blx	r9
 8003aba:	f105 0b01 	add.w	fp, r5, #1
        if (flags & FLAGS_LEFT) {
 8003abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ac0:	b35c      	cbz	r4, 8003b1a <_vsnprintf+0x43a>
 8003ac2:	4654      	mov	r4, sl
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003ac4:	465a      	mov	r2, fp
 8003ac6:	e020      	b.n	8003b0a <_vsnprintf+0x42a>
            out(' ', buffer, idx++, maxlen);
 8003ac8:	910b      	str	r1, [sp, #44]	; 0x2c
 8003aca:	4643      	mov	r3, r8
 8003acc:	2020      	movs	r0, #32
 8003ace:	47c8      	blx	r9
 8003ad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ad2:	eb0a 0205 	add.w	r2, sl, r5
          while (l++ < width) {
 8003ad6:	f10a 0a01 	add.w	sl, sl, #1
 8003ada:	4557      	cmp	r7, sl
 8003adc:	d8f4      	bhi.n	8003ac8 <_vsnprintf+0x3e8>
 8003ade:	2f00      	cmp	r7, #0
 8003ae0:	f107 33ff 	add.w	r3, r7, #4294967295
 8003ae4:	bf08      	it	eq
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	f107 0a01 	add.w	sl, r7, #1
 8003aec:	441d      	add	r5, r3
 8003aee:	bf08      	it	eq
 8003af0:	f04f 0a02 	moveq.w	sl, #2
 8003af4:	e7da      	b.n	8003aac <_vsnprintf+0x3cc>
 8003af6:	46a2      	mov	sl, r4
 8003af8:	e7eb      	b.n	8003ad2 <_vsnprintf+0x3f2>
            out(' ', buffer, idx++, maxlen);
 8003afa:	910b      	str	r1, [sp, #44]	; 0x2c
 8003afc:	4643      	mov	r3, r8
 8003afe:	2020      	movs	r0, #32
 8003b00:	1c55      	adds	r5, r2, #1
 8003b02:	47c8      	blx	r9
 8003b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003b06:	3401      	adds	r4, #1
 8003b08:	462a      	mov	r2, r5
          while (l++ < width) {
 8003b0a:	42bc      	cmp	r4, r7
 8003b0c:	d3f5      	bcc.n	8003afa <_vsnprintf+0x41a>
 8003b0e:	eba7 030a 	sub.w	r3, r7, sl
 8003b12:	4557      	cmp	r7, sl
 8003b14:	bf38      	it	cc
 8003b16:	2300      	movcc	r3, #0
 8003b18:	449b      	add	fp, r3
        break;
 8003b1a:	465d      	mov	r5, fp
 8003b1c:	e5ec      	b.n	80036f8 <_vsnprintf+0x18>
        const char* p = va_arg(va, char*);
 8003b1e:	4633      	mov	r3, r6
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003b20:	2c00      	cmp	r4, #0
        const char* p = va_arg(va, char*);
 8003b22:	f853 ab04 	ldr.w	sl, [r3], #4
 8003b26:	930b      	str	r3, [sp, #44]	; 0x2c
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003b28:	bf14      	ite	ne
 8003b2a:	4623      	movne	r3, r4
 8003b2c:	f04f 33ff 	moveq.w	r3, #4294967295
 8003b30:	4453      	add	r3, sl
 8003b32:	46d3      	mov	fp, sl
  for (s = str; *s && maxsize--; ++s);
 8003b34:	f89b 0000 	ldrb.w	r0, [fp]
 8003b38:	b108      	cbz	r0, 8003b3e <_vsnprintf+0x45e>
 8003b3a:	459b      	cmp	fp, r3
 8003b3c:	d111      	bne.n	8003b62 <_vsnprintf+0x482>
        if (flags & FLAGS_PRECISION) {
 8003b3e:	f412 6380 	ands.w	r3, r2, #1024	; 0x400
  return (unsigned int)(s - str);
 8003b42:	ebab 0b0a 	sub.w	fp, fp, sl
        if (flags & FLAGS_PRECISION) {
 8003b46:	930c      	str	r3, [sp, #48]	; 0x30
 8003b48:	d002      	beq.n	8003b50 <_vsnprintf+0x470>
          l = (l < precision ? l : precision);
 8003b4a:	45a3      	cmp	fp, r4
 8003b4c:	bf28      	it	cs
 8003b4e:	46a3      	movcs	fp, r4
        if (!(flags & FLAGS_LEFT)) {
 8003b50:	f012 0302 	ands.w	r3, r2, #2
 8003b54:	930d      	str	r3, [sp, #52]	; 0x34
 8003b56:	d11b      	bne.n	8003b90 <_vsnprintf+0x4b0>
 8003b58:	ebab 0305 	sub.w	r3, fp, r5
 8003b5c:	462a      	mov	r2, r5
 8003b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8003b60:	e009      	b.n	8003b76 <_vsnprintf+0x496>
  for (s = str; *s && maxsize--; ++s);
 8003b62:	f10b 0b01 	add.w	fp, fp, #1
 8003b66:	e7e5      	b.n	8003b34 <_vsnprintf+0x454>
            out(' ', buffer, idx++, maxlen);
 8003b68:	910f      	str	r1, [sp, #60]	; 0x3c
 8003b6a:	4643      	mov	r3, r8
 8003b6c:	2020      	movs	r0, #32
 8003b6e:	1c56      	adds	r6, r2, #1
 8003b70:	47c8      	blx	r9
 8003b72:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003b74:	4632      	mov	r2, r6
          while (l++ < width) {
 8003b76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b78:	18d3      	adds	r3, r2, r3
 8003b7a:	429f      	cmp	r7, r3
 8003b7c:	d8f4      	bhi.n	8003b68 <_vsnprintf+0x488>
 8003b7e:	eba7 030b 	sub.w	r3, r7, fp
 8003b82:	455f      	cmp	r7, fp
 8003b84:	bf38      	it	cc
 8003b86:	2300      	movcc	r3, #0
 8003b88:	f10b 0b01 	add.w	fp, fp, #1
 8003b8c:	441d      	add	r5, r3
 8003b8e:	449b      	add	fp, r3
 8003b90:	4656      	mov	r6, sl
 8003b92:	eba5 0a0a 	sub.w	sl, r5, sl
 8003b96:	e005      	b.n	8003ba4 <_vsnprintf+0x4c4>
 8003b98:	461c      	mov	r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8003b9a:	910e      	str	r1, [sp, #56]	; 0x38
 8003b9c:	4643      	mov	r3, r8
 8003b9e:	462a      	mov	r2, r5
 8003ba0:	47c8      	blx	r9
 8003ba2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003ba4:	eb0a 0506 	add.w	r5, sl, r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ba8:	f816 0b01 	ldrb.w	r0, [r6], #1
 8003bac:	b128      	cbz	r0, 8003bba <_vsnprintf+0x4da>
 8003bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f2      	beq.n	8003b9a <_vsnprintf+0x4ba>
 8003bb4:	1e63      	subs	r3, r4, #1
 8003bb6:	2c00      	cmp	r4, #0
 8003bb8:	d1ee      	bne.n	8003b98 <_vsnprintf+0x4b8>
        if (flags & FLAGS_LEFT) {
 8003bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bbc:	b19b      	cbz	r3, 8003be6 <_vsnprintf+0x506>
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	ebab 0405 	sub.w	r4, fp, r5
 8003bc4:	e006      	b.n	8003bd4 <_vsnprintf+0x4f4>
            out(' ', buffer, idx++, maxlen);
 8003bc6:	910c      	str	r1, [sp, #48]	; 0x30
 8003bc8:	4643      	mov	r3, r8
 8003bca:	2020      	movs	r0, #32
 8003bcc:	1c56      	adds	r6, r2, #1
 8003bce:	47c8      	blx	r9
 8003bd0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003bd2:	4632      	mov	r2, r6
          while (l++ < width) {
 8003bd4:	1913      	adds	r3, r2, r4
 8003bd6:	42bb      	cmp	r3, r7
 8003bd8:	d3f5      	bcc.n	8003bc6 <_vsnprintf+0x4e6>
 8003bda:	eba7 030b 	sub.w	r3, r7, fp
 8003bde:	455f      	cmp	r7, fp
 8003be0:	bf38      	it	cc
 8003be2:	2300      	movcc	r3, #0
 8003be4:	441d      	add	r5, r3
        const char* p = va_arg(va, char*);
 8003be6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
        break;
 8003be8:	e586      	b.n	80036f8 <_vsnprintf+0x18>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003bea:	f042 0221 	orr.w	r2, r2, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003bee:	2308      	movs	r3, #8
 8003bf0:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8003bf4:	9205      	str	r2, [sp, #20]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003bfe:	f856 3b04 	ldr.w	r3, [r6], #4
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	462a      	mov	r2, r5
 8003c06:	4643      	mov	r3, r8
 8003c08:	4648      	mov	r0, r9
 8003c0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8003c0c:	f7ff f935 	bl	8002e7a <_ntoa_long>
 8003c10:	e744      	b.n	8003a9c <_vsnprintf+0x3bc>
          flags |= FLAGS_UPPERCASE;
 8003c12:	f042 0220 	orr.w	r2, r2, #32
          base = 16U;
 8003c16:	2310      	movs	r3, #16
 8003c18:	e6aa      	b.n	8003970 <_vsnprintf+0x290>
          base =  8U;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	e6a8      	b.n	8003970 <_vsnprintf+0x290>
          base =  2U;
 8003c1e:	2302      	movs	r3, #2
        if ((*format != 'i') && (*format != 'd')) {
 8003c20:	e6a6      	b.n	8003970 <_vsnprintf+0x290>
 8003c22:	bf00      	nop

08003c24 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003c24:	b40f      	push	{r0, r1, r2, r3}
 8003c26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c28:	aa06      	add	r2, sp, #24
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003c2a:	a902      	add	r1, sp, #8
{
 8003c2c:	f852 3b04 	ldr.w	r3, [r2], #4
  va_start(va, format);
 8003c30:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003c32:	9200      	str	r2, [sp, #0]
 8003c34:	4804      	ldr	r0, [pc, #16]	; (8003c48 <printf_+0x24>)
 8003c36:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3a:	f7ff fd51 	bl	80036e0 <_vsnprintf>
  va_end(va);
  return ret;
}
 8003c3e:	b005      	add	sp, #20
 8003c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c44:	b004      	add	sp, #16
 8003c46:	4770      	bx	lr
 8003c48:	080036d9 	.word	0x080036d9

08003c4c <_putchar>:
// #define MDK_STD
// #define MDL_MICROLIB

#ifdef MPALAND_PRINTF
#include "gd32f3x0.h"
void _putchar(char character) {
 8003c4c:	b538      	push	{r3, r4, r5, lr}
    while (RESET == usart_flag_get(USART1, USART_FLAG_TBE))
 8003c4e:	4d07      	ldr	r5, [pc, #28]	; (8003c6c <_putchar+0x20>)
void _putchar(char character) {
 8003c50:	4604      	mov	r4, r0
    while (RESET == usart_flag_get(USART1, USART_FLAG_TBE))
 8003c52:	f240 7107 	movw	r1, #1799	; 0x707
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7fe fffd 	bl	8002c56 <usart_flag_get>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d0f8      	beq.n	8003c52 <_putchar+0x6>
        ;
    USART_TDATA(USART1) = (uint32_t)character;
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	f8c3 4428 	str.w	r4, [r3, #1064]	; 0x428
}
 8003c68:	bd38      	pop	{r3, r4, r5, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40004400 	.word	0x40004400

08003c70 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8003c70:	b510      	push	{r4, lr}
 8003c72:	4604      	mov	r4, r0
  unsigned Cnt;

  Cnt = p->Cnt;
 8003c74:	6882      	ldr	r2, [r0, #8]
  if ((Cnt + 1u) <= p->BufferSize) {
 8003c76:	1c53      	adds	r3, r2, #1
 8003c78:	6840      	ldr	r0, [r0, #4]
 8003c7a:	4283      	cmp	r3, r0
 8003c7c:	d805      	bhi.n	8003c8a <_StoreChar+0x1a>
    *(p->pBuffer + Cnt) = c;
 8003c7e:	6820      	ldr	r0, [r4, #0]
 8003c80:	5481      	strb	r1, [r0, r2]
    p->Cnt = Cnt + 1u;
 8003c82:	60a3      	str	r3, [r4, #8]
    p->ReturnValue++;
 8003c84:	68e3      	ldr	r3, [r4, #12]
 8003c86:	3301      	adds	r3, #1
 8003c88:	60e3      	str	r3, [r4, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8003c8a:	68a2      	ldr	r2, [r4, #8]
 8003c8c:	6863      	ldr	r3, [r4, #4]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d000      	beq.n	8003c94 <_StoreChar+0x24>
      p->ReturnValue = -1;
    } else {
      p->Cnt = 0u;
    }
  }
}
 8003c92:	bd10      	pop	{r4, pc}
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 8003c94:	6821      	ldr	r1, [r4, #0]
 8003c96:	6920      	ldr	r0, [r4, #16]
 8003c98:	f000 face 	bl	8004238 <SEGGER_RTT_Write>
 8003c9c:	68a3      	ldr	r3, [r4, #8]
 8003c9e:	4298      	cmp	r0, r3
 8003ca0:	d003      	beq.n	8003caa <_StoreChar+0x3a>
      p->ReturnValue = -1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	60e3      	str	r3, [r4, #12]
 8003ca8:	e7f3      	b.n	8003c92 <_StoreChar+0x22>
      p->Cnt = 0u;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60a3      	str	r3, [r4, #8]
}
 8003cae:	e7f0      	b.n	8003c92 <_StoreChar+0x22>

08003cb0 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8003cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb4:	4681      	mov	r9, r0
 8003cb6:	460f      	mov	r7, r1
 8003cb8:	4615      	mov	r5, r2
 8003cba:	461e      	mov	r6, r3
 8003cbc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 8003cc2:	460b      	mov	r3, r1
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
 8003cc4:	f04f 0801 	mov.w	r8, #1
  while (Number >= Base) {
 8003cc8:	e003      	b.n	8003cd2 <_PrintUnsigned+0x22>
    Number = (Number / Base);
 8003cca:	fbb3 f3f5 	udiv	r3, r3, r5
    Width++;
 8003cce:	f108 0801 	add.w	r8, r8, #1
  while (Number >= Base) {
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	d2f9      	bcs.n	8003cca <_PrintUnsigned+0x1a>
  }
  if (NumDigits > Width) {
 8003cd6:	45b0      	cmp	r8, r6
 8003cd8:	d200      	bcs.n	8003cdc <_PrintUnsigned+0x2c>
    Width = NumDigits;
 8003cda:	46b0      	mov	r8, r6
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8003cdc:	f012 0b01 	ands.w	fp, r2, #1
 8003ce0:	d118      	bne.n	8003d14 <_PrintUnsigned+0x64>
    if (FieldWidth != 0u) {
 8003ce2:	f1ba 0f00 	cmp.w	sl, #0
 8003ce6:	d015      	beq.n	8003d14 <_PrintUnsigned+0x64>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8003ce8:	f012 0f02 	tst.w	r2, #2
 8003cec:	d002      	beq.n	8003cf4 <_PrintUnsigned+0x44>
 8003cee:	b1be      	cbz	r6, 8003d20 <_PrintUnsigned+0x70>
        c = '0';
      } else {
        c = ' ';
 8003cf0:	2420      	movs	r4, #32
 8003cf2:	e000      	b.n	8003cf6 <_PrintUnsigned+0x46>
 8003cf4:	2420      	movs	r4, #32
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003cf6:	f1ba 0f00 	cmp.w	sl, #0
 8003cfa:	d00b      	beq.n	8003d14 <_PrintUnsigned+0x64>
 8003cfc:	45c2      	cmp	sl, r8
 8003cfe:	d909      	bls.n	8003d14 <_PrintUnsigned+0x64>
        FieldWidth--;
 8003d00:	f10a 3aff 	add.w	sl, sl, #4294967295
        _StoreChar(pBufferDesc, c);
 8003d04:	4621      	mov	r1, r4
 8003d06:	4648      	mov	r0, r9
 8003d08:	f7ff ffb2 	bl	8003c70 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8003d0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	daf0      	bge.n	8003cf6 <_PrintUnsigned+0x46>
          break;
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 8003d14:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	db25      	blt.n	8003d68 <_PrintUnsigned+0xb8>
  Digit = 1u;
 8003d1c:	2401      	movs	r4, #1
 8003d1e:	e004      	b.n	8003d2a <_PrintUnsigned+0x7a>
        c = '0';
 8003d20:	2430      	movs	r4, #48	; 0x30
 8003d22:	e7e8      	b.n	8003cf6 <_PrintUnsigned+0x46>
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
        NumDigits--;
 8003d24:	3e01      	subs	r6, #1
        Div = v / Digit;
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
          break;
        }
      }
      Digit *= Base;
 8003d26:	fb05 f404 	mul.w	r4, r5, r4
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003d2a:	2e01      	cmp	r6, #1
 8003d2c:	d8fa      	bhi.n	8003d24 <_PrintUnsigned+0x74>
        Div = v / Digit;
 8003d2e:	fbb7 f3f4 	udiv	r3, r7, r4
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003d32:	429d      	cmp	r5, r3
 8003d34:	d9f7      	bls.n	8003d26 <_PrintUnsigned+0x76>
 8003d36:	e000      	b.n	8003d3a <_PrintUnsigned+0x8a>
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
      if (pBufferDesc->ReturnValue < 0) {
        break;
      }
      Digit /= Base;
 8003d38:	461c      	mov	r4, r3
      Div = v / Digit;
 8003d3a:	fbb7 f3f4 	udiv	r3, r7, r4
      v -= Div * Digit;
 8003d3e:	fb04 7713 	mls	r7, r4, r3, r7
      _StoreChar(pBufferDesc, _aV2C[Div]);
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <_PrintUnsigned+0xdc>)
 8003d44:	5cd1      	ldrb	r1, [r2, r3]
 8003d46:	4648      	mov	r0, r9
 8003d48:	f7ff ff92 	bl	8003c70 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 8003d4c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db03      	blt.n	8003d5c <_PrintUnsigned+0xac>
      Digit /= Base;
 8003d54:	fbb4 f3f5 	udiv	r3, r4, r5
    } while (Digit);
 8003d58:	42ac      	cmp	r4, r5
 8003d5a:	d2ed      	bcs.n	8003d38 <_PrintUnsigned+0x88>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003d5c:	f1bb 0f00 	cmp.w	fp, #0
 8003d60:	d002      	beq.n	8003d68 <_PrintUnsigned+0xb8>
      if (FieldWidth != 0u) {
 8003d62:	f1ba 0f00 	cmp.w	sl, #0
 8003d66:	d101      	bne.n	8003d6c <_PrintUnsigned+0xbc>
          }
        }
      }
    }
  }
}
 8003d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003d6c:	f1ba 0f00 	cmp.w	sl, #0
 8003d70:	d0fa      	beq.n	8003d68 <_PrintUnsigned+0xb8>
 8003d72:	45c2      	cmp	sl, r8
 8003d74:	d9f8      	bls.n	8003d68 <_PrintUnsigned+0xb8>
          FieldWidth--;
 8003d76:	f10a 3aff 	add.w	sl, sl, #4294967295
          _StoreChar(pBufferDesc, ' ');
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	4648      	mov	r0, r9
 8003d7e:	f7ff ff77 	bl	8003c70 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8003d82:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	daf0      	bge.n	8003d6c <_PrintUnsigned+0xbc>
 8003d8a:	e7ed      	b.n	8003d68 <_PrintUnsigned+0xb8>
 8003d8c:	08004698 	.word	0x08004698

08003d90 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	4607      	mov	r7, r0
 8003d98:	4688      	mov	r8, r1
 8003d9a:	4615      	mov	r5, r2
 8003d9c:	4699      	mov	r9, r3
 8003d9e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003da0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 8003da4:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
 8003da8:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31

  //
  // Get actual field width
  //
  Width = 1u;
 8003dac:	2401      	movs	r4, #1
  while (Number >= (int)Base) {
 8003dae:	e002      	b.n	8003db6 <_PrintInt+0x26>
    Number = (Number / (int)Base);
 8003db0:	fb9c fcf5 	sdiv	ip, ip, r5
    Width++;
 8003db4:	3401      	adds	r4, #1
  while (Number >= (int)Base) {
 8003db6:	4565      	cmp	r5, ip
 8003db8:	ddfa      	ble.n	8003db0 <_PrintInt+0x20>
  }
  if (NumDigits > Width) {
 8003dba:	454c      	cmp	r4, r9
 8003dbc:	d200      	bcs.n	8003dc0 <_PrintInt+0x30>
    Width = NumDigits;
 8003dbe:	464c      	mov	r4, r9
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003dc0:	b136      	cbz	r6, 8003dd0 <_PrintInt+0x40>
 8003dc2:	f1b8 0f00 	cmp.w	r8, #0
 8003dc6:	db02      	blt.n	8003dce <_PrintInt+0x3e>
 8003dc8:	f01a 0f04 	tst.w	sl, #4
 8003dcc:	d000      	beq.n	8003dd0 <_PrintInt+0x40>
    FieldWidth--;
 8003dce:	3e01      	subs	r6, #1
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003dd0:	f01a 0f02 	tst.w	sl, #2
 8003dd4:	d002      	beq.n	8003ddc <_PrintInt+0x4c>
 8003dd6:	f1b9 0f00 	cmp.w	r9, #0
 8003dda:	d003      	beq.n	8003de4 <_PrintInt+0x54>
 8003ddc:	f01a 0f01 	tst.w	sl, #1
 8003de0:	d100      	bne.n	8003de4 <_PrintInt+0x54>
    if (FieldWidth != 0u) {
 8003de2:	b9ae      	cbnz	r6, 8003e10 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db0f      	blt.n	8003e0a <_PrintInt+0x7a>
    if (v < 0) {
 8003dea:	f1b8 0f00 	cmp.w	r8, #0
 8003dee:	db1c      	blt.n	8003e2a <_PrintInt+0x9a>
      v = -v;
      _StoreChar(pBufferDesc, '-');
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003df0:	f01a 0f04 	tst.w	sl, #4
 8003df4:	d120      	bne.n	8003e38 <_PrintInt+0xa8>
      _StoreChar(pBufferDesc, '+');
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db06      	blt.n	8003e0a <_PrintInt+0x7a>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003dfc:	f00a 0303 	and.w	r3, sl, #3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d01e      	beq.n	8003e42 <_PrintInt+0xb2>
              break;
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da2d      	bge.n	8003e66 <_PrintInt+0xd6>
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
      }
    }
  }
}
 8003e0a:	b002      	add	sp, #8
 8003e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	d0e7      	beq.n	8003de4 <_PrintInt+0x54>
 8003e14:	42a6      	cmp	r6, r4
 8003e16:	d9e5      	bls.n	8003de4 <_PrintInt+0x54>
        FieldWidth--;
 8003e18:	3e01      	subs	r6, #1
        _StoreChar(pBufferDesc, ' ');
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	4638      	mov	r0, r7
 8003e1e:	f7ff ff27 	bl	8003c70 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	daf3      	bge.n	8003e10 <_PrintInt+0x80>
 8003e28:	e7dc      	b.n	8003de4 <_PrintInt+0x54>
      v = -v;
 8003e2a:	f1c8 0800 	rsb	r8, r8, #0
      _StoreChar(pBufferDesc, '-');
 8003e2e:	212d      	movs	r1, #45	; 0x2d
 8003e30:	4638      	mov	r0, r7
 8003e32:	f7ff ff1d 	bl	8003c70 <_StoreChar>
 8003e36:	e7de      	b.n	8003df6 <_PrintInt+0x66>
      _StoreChar(pBufferDesc, '+');
 8003e38:	212b      	movs	r1, #43	; 0x2b
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	f7ff ff18 	bl	8003c70 <_StoreChar>
 8003e40:	e7d9      	b.n	8003df6 <_PrintInt+0x66>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003e42:	f1b9 0f00 	cmp.w	r9, #0
 8003e46:	d1dd      	bne.n	8003e04 <_PrintInt+0x74>
        if (FieldWidth != 0u) {
 8003e48:	2e00      	cmp	r6, #0
 8003e4a:	d0db      	beq.n	8003e04 <_PrintInt+0x74>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003e4c:	2e00      	cmp	r6, #0
 8003e4e:	d0d9      	beq.n	8003e04 <_PrintInt+0x74>
 8003e50:	42a6      	cmp	r6, r4
 8003e52:	d9d7      	bls.n	8003e04 <_PrintInt+0x74>
            FieldWidth--;
 8003e54:	3e01      	subs	r6, #1
            _StoreChar(pBufferDesc, '0');
 8003e56:	2130      	movs	r1, #48	; 0x30
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f7ff ff09 	bl	8003c70 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	daf3      	bge.n	8003e4c <_PrintInt+0xbc>
 8003e64:	e7ce      	b.n	8003e04 <_PrintInt+0x74>
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003e66:	f8cd a004 	str.w	sl, [sp, #4]
 8003e6a:	9600      	str	r6, [sp, #0]
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4641      	mov	r1, r8
 8003e72:	4638      	mov	r0, r7
 8003e74:	f7ff ff1c 	bl	8003cb0 <_PrintUnsigned>
}
 8003e78:	e7c7      	b.n	8003e0a <_PrintInt+0x7a>
	...

08003e7c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 8003e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7e:	b099      	sub	sp, #100	; 0x64
 8003e80:	4606      	mov	r6, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	4615      	mov	r5, r2
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8003e86:	ab03      	add	r3, sp, #12
 8003e88:	9313      	str	r3, [sp, #76]	; 0x4c
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 8003e8a:	2340      	movs	r3, #64	; 0x40
 8003e8c:	9314      	str	r3, [sp, #80]	; 0x50
  BufferDesc.Cnt            = 0u;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	9315      	str	r3, [sp, #84]	; 0x54
  BufferDesc.RTTBufferIndex = BufferIndex;
 8003e92:	9017      	str	r0, [sp, #92]	; 0x5c
  BufferDesc.ReturnValue    = 0;
 8003e94:	9316      	str	r3, [sp, #88]	; 0x58
 8003e96:	e08a      	b.n	8003fae <SEGGER_RTT_vprintf+0x132>
    }
    if (c == '%') {
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003e98:	2000      	movs	r0, #0
      v = 1;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	e011      	b.n	8003ec2 <SEGGER_RTT_vprintf+0x46>
      do {
        c = *sFormat;
        switch (c) {
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003e9e:	f040 0001 	orr.w	r0, r0, #1
 8003ea2:	3401      	adds	r4, #1
 8003ea4:	e00c      	b.n	8003ec0 <SEGGER_RTT_vprintf+0x44>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003ea6:	f040 0002 	orr.w	r0, r0, #2
 8003eaa:	3401      	adds	r4, #1
 8003eac:	e008      	b.n	8003ec0 <SEGGER_RTT_vprintf+0x44>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003eae:	f040 0004 	orr.w	r0, r0, #4
 8003eb2:	3401      	adds	r4, #1
 8003eb4:	e004      	b.n	8003ec0 <SEGGER_RTT_vprintf+0x44>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003eb6:	f040 0008 	orr.w	r0, r0, #8
 8003eba:	3401      	adds	r4, #1
 8003ebc:	e000      	b.n	8003ec0 <SEGGER_RTT_vprintf+0x44>
        switch (c) {
 8003ebe:	2200      	movs	r2, #0
        default:  v = 0; break;
        }
      } while (v);
 8003ec0:	b312      	cbz	r2, 8003f08 <SEGGER_RTT_vprintf+0x8c>
        c = *sFormat;
 8003ec2:	7823      	ldrb	r3, [r4, #0]
        switch (c) {
 8003ec4:	3b23      	subs	r3, #35	; 0x23
 8003ec6:	2b0d      	cmp	r3, #13
 8003ec8:	d8f9      	bhi.n	8003ebe <SEGGER_RTT_vprintf+0x42>
 8003eca:	a101      	add	r1, pc, #4	; (adr r1, 8003ed0 <SEGGER_RTT_vprintf+0x54>)
 8003ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed0:	08003eb7 	.word	0x08003eb7
 8003ed4:	08003ebf 	.word	0x08003ebf
 8003ed8:	08003ebf 	.word	0x08003ebf
 8003edc:	08003ebf 	.word	0x08003ebf
 8003ee0:	08003ebf 	.word	0x08003ebf
 8003ee4:	08003ebf 	.word	0x08003ebf
 8003ee8:	08003ebf 	.word	0x08003ebf
 8003eec:	08003ebf 	.word	0x08003ebf
 8003ef0:	08003eaf 	.word	0x08003eaf
 8003ef4:	08003ebf 	.word	0x08003ebf
 8003ef8:	08003e9f 	.word	0x08003e9f
 8003efc:	08003ebf 	.word	0x08003ebf
 8003f00:	08003ebf 	.word	0x08003ebf
 8003f04:	08003ea7 	.word	0x08003ea7
      //
      // filter out field with
      //
      FieldWidth = 0u;
      do {
        c = *sFormat;
 8003f08:	7823      	ldrb	r3, [r4, #0]
        if ((c < '0') || (c > '9')) {
 8003f0a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003f0e:	b2c9      	uxtb	r1, r1
 8003f10:	2909      	cmp	r1, #9
 8003f12:	d807      	bhi.n	8003f24 <SEGGER_RTT_vprintf+0xa8>
          break;
        }
        sFormat++;
 8003f14:	3401      	adds	r4, #1
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8003f16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f1a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8003f1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
        c = *sFormat;
 8003f22:	e7f1      	b.n	8003f08 <SEGGER_RTT_vprintf+0x8c>
      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
      c = *sFormat;
      if (c == '.') {
 8003f24:	2b2e      	cmp	r3, #46	; 0x2e
 8003f26:	d002      	beq.n	8003f2e <SEGGER_RTT_vprintf+0xb2>
      NumDigits = 0u;
 8003f28:	2300      	movs	r3, #0
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003f2a:	7821      	ldrb	r1, [r4, #0]
 8003f2c:	e013      	b.n	8003f56 <SEGGER_RTT_vprintf+0xda>
        sFormat++;
 8003f2e:	3401      	adds	r4, #1
      NumDigits = 0u;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e005      	b.n	8003f40 <SEGGER_RTT_vprintf+0xc4>
          sFormat++;
 8003f34:	3401      	adds	r4, #1
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 8003f36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f3a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003f3e:	3b30      	subs	r3, #48	; 0x30
          c = *sFormat;
 8003f40:	7821      	ldrb	r1, [r4, #0]
          if ((c < '0') || (c > '9')) {
 8003f42:	f1a1 0c30 	sub.w	ip, r1, #48	; 0x30
 8003f46:	fa5f fc8c 	uxtb.w	ip, ip
 8003f4a:	f1bc 0f09 	cmp.w	ip, #9
 8003f4e:	d9f1      	bls.n	8003f34 <SEGGER_RTT_vprintf+0xb8>
 8003f50:	e7eb      	b.n	8003f2a <SEGGER_RTT_vprintf+0xae>
      do {
        if ((c == 'l') || (c == 'h')) {
          sFormat++;
          c = *sFormat;
 8003f52:	f814 1f01 	ldrb.w	r1, [r4, #1]!
        if ((c == 'l') || (c == 'h')) {
 8003f56:	296c      	cmp	r1, #108	; 0x6c
 8003f58:	d0fb      	beq.n	8003f52 <SEGGER_RTT_vprintf+0xd6>
 8003f5a:	2968      	cmp	r1, #104	; 0x68
 8003f5c:	d0f9      	beq.n	8003f52 <SEGGER_RTT_vprintf+0xd6>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8003f5e:	2925      	cmp	r1, #37	; 0x25
 8003f60:	d06d      	beq.n	800403e <SEGGER_RTT_vprintf+0x1c2>
 8003f62:	d320      	bcc.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
 8003f64:	2978      	cmp	r1, #120	; 0x78
 8003f66:	d81e      	bhi.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
 8003f68:	2958      	cmp	r1, #88	; 0x58
 8003f6a:	d31c      	bcc.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
 8003f6c:	3958      	subs	r1, #88	; 0x58
 8003f6e:	2920      	cmp	r1, #32
 8003f70:	d819      	bhi.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
 8003f72:	e8df f001 	tbb	[pc, r1]
 8003f76:	183d      	.short	0x183d
 8003f78:	18181818 	.word	0x18181818
 8003f7c:	18181818 	.word	0x18181818
 8003f80:	18271118 	.word	0x18271118
 8003f84:	18181818 	.word	0x18181818
 8003f88:	18181818 	.word	0x18181818
 8003f8c:	18571818 	.word	0x18571818
 8003f90:	32184818 	.word	0x32184818
 8003f94:	1818      	.short	0x1818
 8003f96:	3d          	.byte	0x3d
 8003f97:	00          	.byte	0x00
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	1d1a      	adds	r2, r3, #4
 8003f9c:	602a      	str	r2, [r5, #0]
        c0 = (char)v;
        _StoreChar(&BufferDesc, c0);
 8003f9e:	7819      	ldrb	r1, [r3, #0]
 8003fa0:	a813      	add	r0, sp, #76	; 0x4c
 8003fa2:	f7ff fe65 	bl	8003c70 <_StoreChar>
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
      }
      sFormat++;
 8003fa6:	3401      	adds	r4, #1
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);
 8003fa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	db4c      	blt.n	8004048 <SEGGER_RTT_vprintf+0x1cc>
    c = *sFormat;
 8003fae:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0u) {
 8003fb2:	2900      	cmp	r1, #0
 8003fb4:	d048      	beq.n	8004048 <SEGGER_RTT_vprintf+0x1cc>
    if (c == '%') {
 8003fb6:	2925      	cmp	r1, #37	; 0x25
 8003fb8:	f43f af6e 	beq.w	8003e98 <SEGGER_RTT_vprintf+0x1c>
      _StoreChar(&BufferDesc, c);
 8003fbc:	a813      	add	r0, sp, #76	; 0x4c
 8003fbe:	f7ff fe57 	bl	8003c70 <_StoreChar>
 8003fc2:	e7f1      	b.n	8003fa8 <SEGGER_RTT_vprintf+0x12c>
        v = va_arg(*pParamList, int);
 8003fc4:	6829      	ldr	r1, [r5, #0]
 8003fc6:	1d0f      	adds	r7, r1, #4
 8003fc8:	602f      	str	r7, [r5, #0]
 8003fca:	6809      	ldr	r1, [r1, #0]
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003fcc:	9001      	str	r0, [sp, #4]
 8003fce:	9200      	str	r2, [sp, #0]
 8003fd0:	220a      	movs	r2, #10
 8003fd2:	a813      	add	r0, sp, #76	; 0x4c
 8003fd4:	f7ff fedc 	bl	8003d90 <_PrintInt>
        break;
 8003fd8:	e7e5      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
        v = va_arg(*pParamList, int);
 8003fda:	6829      	ldr	r1, [r5, #0]
 8003fdc:	1d0f      	adds	r7, r1, #4
 8003fde:	602f      	str	r7, [r5, #0]
 8003fe0:	6809      	ldr	r1, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003fe2:	9001      	str	r0, [sp, #4]
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	a813      	add	r0, sp, #76	; 0x4c
 8003fea:	f7ff fe61 	bl	8003cb0 <_PrintUnsigned>
        break;
 8003fee:	e7da      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
        v = va_arg(*pParamList, int);
 8003ff0:	6829      	ldr	r1, [r5, #0]
 8003ff2:	1d0f      	adds	r7, r1, #4
 8003ff4:	602f      	str	r7, [r5, #0]
 8003ff6:	6809      	ldr	r1, [r1, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003ff8:	9001      	str	r0, [sp, #4]
 8003ffa:	9200      	str	r2, [sp, #0]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	a813      	add	r0, sp, #76	; 0x4c
 8004000:	f7ff fe56 	bl	8003cb0 <_PrintUnsigned>
        break;
 8004004:	e7cf      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
          const char * s = va_arg(*pParamList, const char *);
 8004006:	682b      	ldr	r3, [r5, #0]
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	602a      	str	r2, [r5, #0]
 800400c:	681f      	ldr	r7, [r3, #0]
            c = *s;
 800400e:	f817 1b01 	ldrb.w	r1, [r7], #1
            if (c == '\0') {
 8004012:	2900      	cmp	r1, #0
 8004014:	d0c7      	beq.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
           _StoreChar(&BufferDesc, c);
 8004016:	a813      	add	r0, sp, #76	; 0x4c
 8004018:	f7ff fe2a 	bl	8003c70 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 800401c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800401e:	2b00      	cmp	r3, #0
 8004020:	daf5      	bge.n	800400e <SEGGER_RTT_vprintf+0x192>
 8004022:	e7c0      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
        v = va_arg(*pParamList, int);
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	6819      	ldr	r1, [r3, #0]
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 800402c:	2300      	movs	r3, #0
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	2308      	movs	r3, #8
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2210      	movs	r2, #16
 8004036:	a813      	add	r0, sp, #76	; 0x4c
 8004038:	f7ff fe3a 	bl	8003cb0 <_PrintUnsigned>
        break;
 800403c:	e7b3      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>
        _StoreChar(&BufferDesc, '%');
 800403e:	2125      	movs	r1, #37	; 0x25
 8004040:	a813      	add	r0, sp, #76	; 0x4c
 8004042:	f7ff fe15 	bl	8003c70 <_StoreChar>
        break;
 8004046:	e7ae      	b.n	8003fa6 <SEGGER_RTT_vprintf+0x12a>

  if (BufferDesc.ReturnValue > 0) {
 8004048:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800404a:	2b00      	cmp	r3, #0
 800404c:	dd05      	ble.n	800405a <SEGGER_RTT_vprintf+0x1de>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 800404e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004050:	b932      	cbnz	r2, 8004060 <SEGGER_RTT_vprintf+0x1e4>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8004052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004056:	4413      	add	r3, r2
 8004058:	9316      	str	r3, [sp, #88]	; 0x58
  }
  return BufferDesc.ReturnValue;
}
 800405a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800405c:	b019      	add	sp, #100	; 0x64
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8004060:	a903      	add	r1, sp, #12
 8004062:	4630      	mov	r0, r6
 8004064:	f000 f8e8 	bl	8004238 <SEGGER_RTT_Write>
 8004068:	e7f3      	b.n	8004052 <SEGGER_RTT_vprintf+0x1d6>
 800406a:	bf00      	nop

0800406c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 800406c:	b40e      	push	{r1, r2, r3}
 800406e:	b500      	push	{lr}
 8004070:	b082      	sub	sp, #8
 8004072:	ab03      	add	r3, sp, #12
 8004074:	f853 1b04 	ldr.w	r1, [r3], #4
  int r;
  va_list ParamList;

  va_start(ParamList, sFormat);
 8004078:	9301      	str	r3, [sp, #4]
  r = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 800407a:	aa01      	add	r2, sp, #4
 800407c:	f7ff fefe 	bl	8003e7c <SEGGER_RTT_vprintf>
  va_end(ParamList);
  return r;
}
 8004080:	b002      	add	sp, #8
 8004082:	f85d eb04 	ldr.w	lr, [sp], #4
 8004086:	b003      	add	sp, #12
 8004088:	4770      	bx	lr

0800408a <_GetAvailWriteSpace>:
    unsigned r;
    //
    // Avoid warnings regarding volatile access order.  It's not a problem
    // in this case, but dampen compiler enthusiasm.
    //
    RdOff = pRing->RdOff;
 800408a:	6903      	ldr	r3, [r0, #16]
    WrOff = pRing->WrOff;
 800408c:	68c2      	ldr	r2, [r0, #12]
    if (RdOff <= WrOff) {
 800408e:	4293      	cmp	r3, r2
 8004090:	d804      	bhi.n	800409c <_GetAvailWriteSpace+0x12>
        r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004092:	6880      	ldr	r0, [r0, #8]
 8004094:	1a80      	subs	r0, r0, r2
 8004096:	4403      	add	r3, r0
 8004098:	1e58      	subs	r0, r3, #1
 800409a:	4770      	bx	lr
    } else {
        r = RdOff - WrOff - 1u;
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	1e58      	subs	r0, r3, #1
    }
    return r;
}
 80040a0:	4770      	bx	lr
	...

080040a4 <_DoInit>:
static void _DoInit(void) {
 80040a4:	b510      	push	{r4, lr}
    memset((SEGGER_RTT_CB*)p, 0,
 80040a6:	4c15      	ldr	r4, [pc, #84]	; (80040fc <_DoInit+0x58>)
 80040a8:	22a8      	movs	r2, #168	; 0xa8
 80040aa:	2100      	movs	r1, #0
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7fd feb7 	bl	8001e20 <memset>
    p->MaxNumUpBuffers = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040b2:	2303      	movs	r3, #3
 80040b4:	6123      	str	r3, [r4, #16]
    p->MaxNumDownBuffers = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040b6:	6163      	str	r3, [r4, #20]
    p->aUp[0].sName = "Terminal";
 80040b8:	4911      	ldr	r1, [pc, #68]	; (8004100 <_DoInit+0x5c>)
 80040ba:	61a1      	str	r1, [r4, #24]
    p->aUp[0].pBuffer = _acUpBuffer;
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <_DoInit+0x60>)
 80040be:	61e3      	str	r3, [r4, #28]
    p->aUp[0].SizeOfBuffer = BUFFER_SIZE_UP;
 80040c0:	2320      	movs	r3, #32
 80040c2:	6223      	str	r3, [r4, #32]
    p->aUp[0].RdOff = 0u;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62a3      	str	r3, [r4, #40]	; 0x28
    p->aUp[0].WrOff = 0u;
 80040c8:	6263      	str	r3, [r4, #36]	; 0x24
    p->aUp[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80040ca:	2202      	movs	r2, #2
 80040cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    p->aDown[0].sName = "Terminal";
 80040ce:	6621      	str	r1, [r4, #96]	; 0x60
    p->aDown[0].pBuffer = _acDownBuffer;
 80040d0:	490d      	ldr	r1, [pc, #52]	; (8004108 <_DoInit+0x64>)
 80040d2:	6661      	str	r1, [r4, #100]	; 0x64
    p->aDown[0].SizeOfBuffer = BUFFER_SIZE_DOWN;
 80040d4:	2110      	movs	r1, #16
 80040d6:	66a1      	str	r1, [r4, #104]	; 0x68
    p->aDown[0].RdOff = 0u;
 80040d8:	6723      	str	r3, [r4, #112]	; 0x70
    p->aDown[0].WrOff = 0u;
 80040da:	66e3      	str	r3, [r4, #108]	; 0x6c
    p->aDown[0].Flags = SEGGER_RTT_MODE_DEFAULT;
 80040dc:	6762      	str	r2, [r4, #116]	; 0x74
    RTT__DMB();  // Force order of memory accesses for cores that may perform out-of-order memory
 80040de:	f3bf 8f5f 	dmb	sy
    for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80040e2:	e006      	b.n	80040f2 <_DoInit+0x4e>
            _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80040e4:	f1c3 020f 	rsb	r2, r3, #15
 80040e8:	4908      	ldr	r1, [pc, #32]	; (800410c <_DoInit+0x68>)
 80040ea:	5c89      	ldrb	r1, [r1, r2]
        p->acID[i] =
 80040ec:	4a03      	ldr	r2, [pc, #12]	; (80040fc <_DoInit+0x58>)
 80040ee:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80040f0:	3301      	adds	r3, #1
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d9f6      	bls.n	80040e4 <_DoInit+0x40>
    RTT__DMB();  // Force order of memory accesses for cores that may perform out-of-order memory
 80040f6:	f3bf 8f5f 	dmb	sy
}
 80040fa:	bd10      	pop	{r4, pc}
 80040fc:	20000530 	.word	0x20000530
 8004100:	080046a8 	.word	0x080046a8
 8004104:	200005e8 	.word	0x200005e8
 8004108:	200005d8 	.word	0x200005d8
 800410c:	080046b4 	.word	0x080046b4

08004110 <MEMCPY>:
    if (pDst == pData) {
 8004110:	4288      	cmp	r0, r1
 8004112:	d003      	beq.n	800411c <MEMCPY+0xc>
void MEMCPY(void* pDst, const char* pData, unsigned NumBytes) {
 8004114:	b508      	push	{r3, lr}
        memcpy(pDst, pData, NumBytes);
 8004116:	f7fd fdc5 	bl	8001ca4 <memcpy>
}
 800411a:	bd08      	pop	{r3, pc}
 800411c:	4770      	bx	lr

0800411e <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800411e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004122:	4604      	mov	r4, r0
 8004124:	4688      	mov	r8, r1
 8004126:	4616      	mov	r6, r2
    WrOff = pRing->WrOff;
 8004128:	68c5      	ldr	r5, [r0, #12]
    Rem = pRing->SizeOfBuffer - WrOff;
 800412a:	6887      	ldr	r7, [r0, #8]
 800412c:	eba7 0905 	sub.w	r9, r7, r5
    if (Rem > NumBytes) {
 8004130:	4591      	cmp	r9, r2
 8004132:	d909      	bls.n	8004148 <_WriteNoCheck+0x2a>
        pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004134:	6840      	ldr	r0, [r0, #4]
        SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004136:	4428      	add	r0, r5
 8004138:	f7ff ffea 	bl	8004110 <MEMCPY>
        RTT__DMB();  // Force data write to be complete before writing the <WrOff>, in case CPU is
 800413c:	f3bf 8f5f 	dmb	sy
        pRing->WrOff = WrOff + NumBytes;
 8004140:	4435      	add	r5, r6
 8004142:	60e5      	str	r5, [r4, #12]
}
 8004144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004148:	6840      	ldr	r0, [r0, #4]
        SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800414a:	464a      	mov	r2, r9
 800414c:	4428      	add	r0, r5
 800414e:	f7ff ffdf 	bl	8004110 <MEMCPY>
        NumBytesAtOnce = NumBytes - Rem;
 8004152:	1bed      	subs	r5, r5, r7
 8004154:	4435      	add	r5, r6
        SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004156:	462a      	mov	r2, r5
 8004158:	eb08 0109 	add.w	r1, r8, r9
 800415c:	6860      	ldr	r0, [r4, #4]
 800415e:	f7ff ffd7 	bl	8004110 <MEMCPY>
        RTT__DMB();  // Force data write to be complete before writing the <WrOff>, in case CPU is
 8004162:	f3bf 8f5f 	dmb	sy
        pRing->WrOff = NumBytesAtOnce;
 8004166:	60e5      	str	r5, [r4, #12]
}
 8004168:	e7ec      	b.n	8004144 <_WriteNoCheck+0x26>

0800416a <_WriteBlocking>:
                               unsigned NumBytes) {
 800416a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800416e:	4606      	mov	r6, r0
 8004170:	4688      	mov	r8, r1
 8004172:	4617      	mov	r7, r2
    WrOff = pRing->WrOff;
 8004174:	68c5      	ldr	r5, [r0, #12]
    NumBytesWritten = 0u;
 8004176:	f04f 0900 	mov.w	r9, #0
 800417a:	e01a      	b.n	80041b2 <_WriteBlocking+0x48>
            NumBytesToWrite = RdOff - WrOff - 1u;
 800417c:	1b64      	subs	r4, r4, r5
 800417e:	1e62      	subs	r2, r4, #1
            MIN(NumBytesToWrite,
 8004180:	68b3      	ldr	r3, [r6, #8]
 8004182:	1b5c      	subs	r4, r3, r5
        NumBytesToWrite =
 8004184:	4294      	cmp	r4, r2
 8004186:	bf28      	it	cs
 8004188:	4614      	movcs	r4, r2
        NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800418a:	42bc      	cmp	r4, r7
 800418c:	bf28      	it	cs
 800418e:	463c      	movcs	r4, r7
        pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004190:	6870      	ldr	r0, [r6, #4]
        SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004192:	4622      	mov	r2, r4
 8004194:	4641      	mov	r1, r8
 8004196:	4428      	add	r0, r5
 8004198:	f7ff ffba 	bl	8004110 <MEMCPY>
        NumBytesWritten += NumBytesToWrite;
 800419c:	44a1      	add	r9, r4
        pBuffer += NumBytesToWrite;
 800419e:	44a0      	add	r8, r4
        NumBytes -= NumBytesToWrite;
 80041a0:	1b3f      	subs	r7, r7, r4
        WrOff += NumBytesToWrite;
 80041a2:	4425      	add	r5, r4
        if (WrOff == pRing->SizeOfBuffer) {
 80041a4:	68b3      	ldr	r3, [r6, #8]
 80041a6:	42ab      	cmp	r3, r5
 80041a8:	d00b      	beq.n	80041c2 <_WriteBlocking+0x58>
        RTT__DMB();  // Force data write to be complete before writing the <WrOff>, in case CPU is
 80041aa:	f3bf 8f5f 	dmb	sy
        pRing->WrOff = WrOff;
 80041ae:	60f5      	str	r5, [r6, #12]
    } while (NumBytes);
 80041b0:	b14f      	cbz	r7, 80041c6 <_WriteBlocking+0x5c>
        RdOff = pRing->RdOff;  // May be changed by host (debug probe) in the meantime
 80041b2:	6934      	ldr	r4, [r6, #16]
        if (RdOff > WrOff) {
 80041b4:	42a5      	cmp	r5, r4
 80041b6:	d3e1      	bcc.n	800417c <_WriteBlocking+0x12>
            NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80041b8:	68b2      	ldr	r2, [r6, #8]
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	4414      	add	r4, r2
 80041be:	1e62      	subs	r2, r4, #1
 80041c0:	e7de      	b.n	8004180 <_WriteBlocking+0x16>
            WrOff = 0u;
 80041c2:	2500      	movs	r5, #0
 80041c4:	e7f1      	b.n	80041aa <_WriteBlocking+0x40>
}
 80041c6:	4648      	mov	r0, r9
 80041c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080041cc <SEGGER_RTT_WriteNoLock>:
 *    (1) Data is stored according to buffer flags.
 *    (2) For performance reasons this function does not call Init()
 *        and may only be called after RTT has been initialized.
 *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 */
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	460f      	mov	r7, r1
 80041d0:	4616      	mov	r6, r2
    SEGGER_RTT_BUFFER_UP* pRing;
    //
    // Get "to-host" ring buffer.
    //
    pData = (const char*)pBuffer;
    pRing =
 80041d2:	4b18      	ldr	r3, [pc, #96]	; (8004234 <SEGGER_RTT_WriteNoLock+0x68>)
 80041d4:	1c45      	adds	r5, r0, #1
 80041d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
                                                           // changes made by the J-Link side and
                                                           // all of our changes go into HW directly
    //
    // How we output depends upon the mode...
    //
    switch (pRing->Flags) {
 80041de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80041e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80041e6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80041e8:	2c01      	cmp	r4, #1
 80041ea:	d011      	beq.n	8004210 <SEGGER_RTT_WriteNoLock+0x44>
 80041ec:	2c02      	cmp	r4, #2
 80041ee:	d01c      	beq.n	800422a <SEGGER_RTT_WriteNoLock+0x5e>
 80041f0:	b114      	cbz	r4, 80041f8 <SEGGER_RTT_WriteNoLock+0x2c>
 80041f2:	2400      	movs	r4, #0
    }
    //
    // Finish up.
    //
    return Status;
}
 80041f4:	4620      	mov	r0, r4
 80041f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            Avail = _GetAvailWriteSpace(pRing);
 80041f8:	4628      	mov	r0, r5
 80041fa:	f7ff ff46 	bl	800408a <_GetAvailWriteSpace>
            if (Avail < NumBytes) {
 80041fe:	4286      	cmp	r6, r0
 8004200:	d8f8      	bhi.n	80041f4 <SEGGER_RTT_WriteNoLock+0x28>
                _WriteNoCheck(pRing, pData, NumBytes);
 8004202:	4632      	mov	r2, r6
 8004204:	4639      	mov	r1, r7
 8004206:	4628      	mov	r0, r5
 8004208:	f7ff ff89 	bl	800411e <_WriteNoCheck>
                Status = NumBytes;
 800420c:	4634      	mov	r4, r6
 800420e:	e7f1      	b.n	80041f4 <SEGGER_RTT_WriteNoLock+0x28>
            Avail = _GetAvailWriteSpace(pRing);
 8004210:	4628      	mov	r0, r5
 8004212:	f7ff ff3a 	bl	800408a <_GetAvailWriteSpace>
            Status = Avail < NumBytes ? Avail : NumBytes;
 8004216:	4634      	mov	r4, r6
 8004218:	4286      	cmp	r6, r0
 800421a:	bf28      	it	cs
 800421c:	4604      	movcs	r4, r0
            _WriteNoCheck(pRing, pData, Status);
 800421e:	4622      	mov	r2, r4
 8004220:	4639      	mov	r1, r7
 8004222:	4628      	mov	r0, r5
 8004224:	f7ff ff7b 	bl	800411e <_WriteNoCheck>
            break;
 8004228:	e7e4      	b.n	80041f4 <SEGGER_RTT_WriteNoLock+0x28>
            Status = _WriteBlocking(pRing, pData, NumBytes);
 800422a:	4628      	mov	r0, r5
 800422c:	f7ff ff9d 	bl	800416a <_WriteBlocking>
 8004230:	4604      	mov	r4, r0
            break;
 8004232:	e7df      	b.n	80041f4 <SEGGER_RTT_WriteNoLock+0x28>
 8004234:	20000530 	.word	0x20000530

08004238 <SEGGER_RTT_Write>:
 *    Number of bytes which have been stored in the "Up"-buffer.
 *
 *  Notes
 *    (1) Data is stored according to buffer flags.
 */
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	4604      	mov	r4, r0
 800423c:	460d      	mov	r5, r1
 800423e:	4616      	mov	r6, r2
    unsigned Status;

    INIT();
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <SEGGER_RTT_Write+0x34>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b53      	cmp	r3, #83	; 0x53
 8004248:	d10d      	bne.n	8004266 <SEGGER_RTT_Write+0x2e>
    SEGGER_RTT_LOCK();
 800424a:	f3ef 8711 	mrs	r7, BASEPRI
 800424e:	f04f 0120 	mov.w	r1, #32
 8004252:	f381 8811 	msr	BASEPRI, r1
    Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer,
 8004256:	4632      	mov	r2, r6
 8004258:	4629      	mov	r1, r5
 800425a:	4620      	mov	r0, r4
 800425c:	f7ff ffb6 	bl	80041cc <SEGGER_RTT_WriteNoLock>
                                    NumBytes);  // Call the non-locking write function
    SEGGER_RTT_UNLOCK();
 8004260:	f387 8811 	msr	BASEPRI, r7
    return Status;
}
 8004264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    INIT();
 8004266:	f7ff ff1d 	bl	80040a4 <_DoInit>
 800426a:	e7ee      	b.n	800424a <SEGGER_RTT_Write+0x12>
 800426c:	20000530 	.word	0x20000530

08004270 <SEGGER_RTT_Init>:
 *  Function description
 *    Initializes the RTT Control Block.
 *    Should be used in RAM targets, at start of the application.
 *
 */
void SEGGER_RTT_Init(void) { _DoInit(); }
 8004270:	b508      	push	{r3, lr}
 8004272:	f7ff ff17 	bl	80040a4 <_DoInit>
 8004276:	bd08      	pop	{r3, pc}

08004278 <abort>:
 8004278:	b508      	push	{r3, lr}
 800427a:	2006      	movs	r0, #6
 800427c:	f000 f836 	bl	80042ec <raise>
 8004280:	2001      	movs	r0, #1
 8004282:	f000 f889 	bl	8004398 <_exit>
 8004286:	bf00      	nop

08004288 <memcmp>:
 8004288:	2a03      	cmp	r2, #3
 800428a:	b570      	push	{r4, r5, r6, lr}
 800428c:	d915      	bls.n	80042ba <memcmp+0x32>
 800428e:	ea40 0c01 	orr.w	ip, r0, r1
 8004292:	f01c 0f03 	tst.w	ip, #3
 8004296:	4604      	mov	r4, r0
 8004298:	460b      	mov	r3, r1
 800429a:	d121      	bne.n	80042e0 <memcmp+0x58>
 800429c:	4619      	mov	r1, r3
 800429e:	4620      	mov	r0, r4
 80042a0:	680e      	ldr	r6, [r1, #0]
 80042a2:	6805      	ldr	r5, [r0, #0]
 80042a4:	42b5      	cmp	r5, r6
 80042a6:	f104 0404 	add.w	r4, r4, #4
 80042aa:	f103 0304 	add.w	r3, r3, #4
 80042ae:	d117      	bne.n	80042e0 <memcmp+0x58>
 80042b0:	3a04      	subs	r2, #4
 80042b2:	2a03      	cmp	r2, #3
 80042b4:	4620      	mov	r0, r4
 80042b6:	4619      	mov	r1, r3
 80042b8:	d8f0      	bhi.n	800429c <memcmp+0x14>
 80042ba:	1e54      	subs	r4, r2, #1
 80042bc:	b1a2      	cbz	r2, 80042e8 <memcmp+0x60>
 80042be:	f100 3cff 	add.w	ip, r0, #4294967295
 80042c2:	3901      	subs	r1, #1
 80042c4:	e001      	b.n	80042ca <memcmp+0x42>
 80042c6:	18c3      	adds	r3, r0, r3
 80042c8:	d00c      	beq.n	80042e4 <memcmp+0x5c>
 80042ca:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80042ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80042d2:	4596      	cmp	lr, r2
 80042d4:	eba4 030c 	sub.w	r3, r4, ip
 80042d8:	d0f5      	beq.n	80042c6 <memcmp+0x3e>
 80042da:	ebae 0002 	sub.w	r0, lr, r2
 80042de:	bd70      	pop	{r4, r5, r6, pc}
 80042e0:	1e54      	subs	r4, r2, #1
 80042e2:	e7ec      	b.n	80042be <memcmp+0x36>
 80042e4:	4618      	mov	r0, r3
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	4610      	mov	r0, r2
 80042ea:	bd70      	pop	{r4, r5, r6, pc}

080042ec <raise>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <raise+0x58>)
 80042f0:	281f      	cmp	r0, #31
 80042f2:	681d      	ldr	r5, [r3, #0]
 80042f4:	d820      	bhi.n	8004338 <raise+0x4c>
 80042f6:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 80042fa:	4604      	mov	r4, r0
 80042fc:	b162      	cbz	r2, 8004318 <raise+0x2c>
 80042fe:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004302:	b14b      	cbz	r3, 8004318 <raise+0x2c>
 8004304:	2b01      	cmp	r3, #1
 8004306:	d015      	beq.n	8004334 <raise+0x48>
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	d00f      	beq.n	800432c <raise+0x40>
 800430c:	2500      	movs	r5, #0
 800430e:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8004312:	4798      	blx	r3
 8004314:	4628      	mov	r0, r5
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	4628      	mov	r0, r5
 800431a:	f000 f82b 	bl	8004374 <_getpid_r>
 800431e:	4622      	mov	r2, r4
 8004320:	4601      	mov	r1, r0
 8004322:	4628      	mov	r0, r5
 8004324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004328:	f000 b80e 	b.w	8004348 <_kill_r>
 800432c:	2316      	movs	r3, #22
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	2001      	movs	r0, #1
 8004332:	bd38      	pop	{r3, r4, r5, pc}
 8004334:	2000      	movs	r0, #0
 8004336:	bd38      	pop	{r3, r4, r5, pc}
 8004338:	2316      	movs	r3, #22
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	bd38      	pop	{r3, r4, r5, pc}
 8004342:	bf00      	nop
 8004344:	20000000 	.word	0x20000000

08004348 <_kill_r>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	460c      	mov	r4, r1
 800434c:	4d08      	ldr	r5, [pc, #32]	; (8004370 <_kill_r+0x28>)
 800434e:	4603      	mov	r3, r0
 8004350:	2600      	movs	r6, #0
 8004352:	4620      	mov	r0, r4
 8004354:	4611      	mov	r1, r2
 8004356:	461c      	mov	r4, r3
 8004358:	602e      	str	r6, [r5, #0]
 800435a:	f000 f815 	bl	8004388 <_kill>
 800435e:	1c43      	adds	r3, r0, #1
 8004360:	d000      	beq.n	8004364 <_kill_r+0x1c>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0fb      	beq.n	8004362 <_kill_r+0x1a>
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	bf00      	nop
 8004370:	20000608 	.word	0x20000608

08004374 <_getpid_r>:
 8004374:	f000 b800 	b.w	8004378 <_getpid>

08004378 <_getpid>:
 8004378:	4b02      	ldr	r3, [pc, #8]	; (8004384 <_getpid+0xc>)
 800437a:	2258      	movs	r2, #88	; 0x58
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	f04f 30ff 	mov.w	r0, #4294967295
 8004382:	4770      	bx	lr
 8004384:	20000608 	.word	0x20000608

08004388 <_kill>:
 8004388:	4b02      	ldr	r3, [pc, #8]	; (8004394 <_kill+0xc>)
 800438a:	2258      	movs	r2, #88	; 0x58
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	4770      	bx	lr
 8004394:	20000608 	.word	0x20000608

08004398 <_exit>:
 8004398:	e7fe      	b.n	8004398 <_exit>
 800439a:	bf00      	nop

0800439c <_init>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr

080043a8 <_fini>:
 80043a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043aa:	bf00      	nop
 80043ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ae:	bc08      	pop	{r3}
 80043b0:	469e      	mov	lr, r3
 80043b2:	4770      	bx	lr
