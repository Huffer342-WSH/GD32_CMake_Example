# script for gd32f3x family

#
# gd32 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME gd32f3x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 16kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x2000
}

# JTAG speed should be <= F_CPU/6. F_CPU after reset is 8MHz, so use F_JTAG = 1MHz
#
# Since we may be running of an RC oscilator, we crank down the speed a
# bit more to be on the safe side. Perhaps superstition, but if are
# running off a crystal, we can run closer to the limit. Note
# that there can be a pretty wide band where things are more or less stable.
adapter speed 12000


adapter srst delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}

#jtag scan chain
if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   if { [using_jtag] } {
	  # GigaDevice's document doesn't provide this information, but STM32F3's code seems to work well. 
      # See STM Document RM0316
      # Section 29.6.3 - corresponds to Cortex-M4 r0p1
      set _CPUTAPID 0x4ba00477
   } {
      set _CPUTAPID 0x2ba01477
   }
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
   jtag newtap $_CHIPNAME bs -irlen 5
}

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap


$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

set _FLASHNAME $_CHIPNAME.flash
# according to openocd's document, stm32f1x is suitable for gd32f3x0, but it seems to work with gd32f30x.
flash bank $_FLASHNAME stm32f1x 0x08000000 0x00010000 0 0 $_TARGETNAME

reset_config srst_nogate

if {![using_hla]} {
   # if srst is not fitted use SYSRESETREQ to
   # perform a soft reset
   cortex_m reset_config sysresetreq
}

proc gd32f3x_default_reset_start {} {
	# Reset clock is HSI (8 MHz)
	adapter speed 1000
	puts "Reset Start."
}

proc gd32f3x_default_examine_end {} {
	# Enable debug during low power modes (uses more power)
	mmw 0xe0042004 0x00000307 0 ;# DBG_CTL0 |= SLP_HOLD | DSLP_HOLD | STB_HOLD | FWDGT_HOLD | WWDGT_HOLD
}

proc gd32f3x_default_reset_init {} {
	# Configure PLL to boost clock to HSI/2 x 18 (72 MHz)
	mww 0x40021004 0x00000000   ;
	mmw 0x40021004 0x00000000 0 ;# AHB = SYSCLK
	mmw 0x40021004 0x00002000 0 ;# APB2 = AHB/2
	mmw 0x40021004 0x00000400 0 ;# APB1 = AHB/2
	mmw 0x40021004 0 0xF7C0FFFF ;# PLL = (IRC8M/2) * 18 = 72 MHz
	mmw 0x4002102C 0 0x3FFFFFF0 ;
	mmw 0x40021004 0x08040000 0 ;
	mmw 0x4002102C 0x00000000 0 ;
	mmw 0x40021000 0x01000000 0 ;# enable PLL
	mww 0x40022000 0x00000012   ;
	sleep 100
	mmw 0x40021004 0 0xFFFFFFFC  ;# select PLL as system clock
	mmw 0x40021004 0x00000002 0 ;
	
	# Boost JTAG frequency
	adapter speed 12000
	puts "Reset init."
}

# Default hooks
$_TARGETNAME configure -event examine-end { gd32f3x_default_examine_end }
$_TARGETNAME configure -event reset-start { gd32f3x_default_reset_start }
$_TARGETNAME configure -event reset-init { gd32f3x_default_reset_init }

tpiu create $_CHIPNAME.tpiu -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0xE0040000 -traceclk 72000000

lappend _telnet_autocomplete_skip _proc_pre_enable_$_CHIPNAME.tpiu
proc _proc_pre_enable_$_CHIPNAME.tpiu {_targetname} {
	targets $_targetname

	# Set TRACE_IOEN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins
	# assignment
	mmw 0xe0042004 0x00000020 0
}

$_CHIPNAME.tpiu configure -event pre-enable "_proc_pre_enable_$_CHIPNAME.tpiu $_TARGETNAME"
